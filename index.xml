<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Merhaba on GKMNGRGN</title>
    <link>https://gokmengorgen.net/</link>
    <description>Recent content in Merhaba on GKMNGRGN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Jan 2020 23:10:15 +0100</lastBuildDate>
    
	<atom:link href="https://gokmengorgen.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elifin Öküzü ya da Sürprizler Kitabı</title>
      <link>https://gokmengorgen.net/blog/elifin-okuzu-ya-da-surprizler-kitabi/</link>
      <pubDate>Sun, 05 Jan 2020 23:10:15 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/elifin-okuzu-ya-da-surprizler-kitabi/</guid>
      <description>&lt;p&gt;Tarih boyunca toplulukların birbirleriyle iletişimi, her dilde olduğu gibi
Türkçe&amp;rsquo;de de kelime alışverişine neden olmuş ve kitapta buna örnek sayılabilecek
bazı kelimeler ele alınıyor.&lt;/p&gt;

&lt;p&gt;Haftada birkaç bölüm okuyarak kitabı yavaş yavaş bitirdim. Sevan beyin Arapça
hakkındaki düşünceleri ve paylaştıkları bilgiler, Türkçe&amp;rsquo;yi anlamak ve daha iyi
kullanmak için yol gösterici oldu. Arapça en çok etkilendiğimiz dillerin başında
geliyor. Bir dönem Türkçeleştirme çalışmaları yapıldıysa bile, benim düşüncem bu
tip çeşitliliğinin bir zenginlik olduğu yönünde.&lt;/p&gt;

&lt;p&gt;Gelecekteki kendime notum, umarım çok geç olmadan Arapça öğrenme fırsatın
olur. Ama önce yaşadığın yerin dilini öğrenirsen daha güzel olur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/books/elifin-okuzu-ya-da-surprizler-kitabi.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uzaktan Çalışma ile İlgili Sorular</title>
      <link>https://gokmengorgen.net/blog/uzaktan-calisma-ile-ilgili-sorular/</link>
      <pubDate>Thu, 29 Aug 2019 10:49:37 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/uzaktan-calisma-ile-ilgili-sorular/</guid>
      <description>

&lt;h2 id=&#34;uzaktan-çalışırken-karşılaşılan-en-büyük-problem-nedir&#34;&gt;Uzaktan çalışırken karşılaşılan en büyük problem nedir?&lt;/h2&gt;

&lt;p&gt;En büyük problem disiplin.&lt;/p&gt;

&lt;p&gt;Ofisin ıskaladığımız avantajları var: Masan, sandalyen, bilgisayarın, tarayıcın ve yazıcın, internetin, ofisin havalandırması, temizliği, hatta ofisteki kahve makinesi, su sebili.. Bunların hepsini sana ofis sağlıyor, bunlardan doğrudan ofis sorumlu oluyor. Bunların bir kısmı gereksiz; ama tüm bunları ofis senin iş yapabilmen, motivasyonun ve disiplinin için sağlıyor.&lt;/p&gt;

&lt;p&gt;Uzaktan çalışınca bunlara sen bir çözüm bulmak zorundasın. Ya bir co-working space üyeliği ile, ya da evinin bir odasını kendi disiplinin için hazır hale getirerek.&lt;/p&gt;

&lt;h2 id=&#34;kontrat-sgk-emeklilik-primi-gelir-vergisi-gibi-konularda-hiç-bilgim-yok-ve-bu-konuda-internette-pek-bir-kaynak-bulamadım-bu-konuda-şirkete-baştan-söylemem-belli-şartları-yerine-getirmiyorsa-bulaşma-dediğiniz-kriterler-var-mı&#34;&gt;Kontrat, SGK, emeklilik primi, gelir vergisi gibi konularda hiç bilgim yok ve bu konuda internette pek bir kaynak bulamadım. Bu konuda şirkete baştan söylemem, belli şartları yerine getirmiyorsa bulaşma dediğiniz kriterler var mı?&lt;/h2&gt;

&lt;p&gt;Aslında bu konuların hiçbirisinin uzaktan çalışma ile doğrudan ilgisi yok. Normal bir iş sözleşmesinde de bunları bilmen gerekiyor. Para kazanıyorsan, devlete gelirini beyan etmek zorundasın. Gelir beyanı da yasal olarak kurulmuş bir şirket üzerinden yapılır. Tüm bunları öğrenmek için şunları yapabilirsin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eğer halihazırda çalışıyorsan ve okumadıysan, imzaladığın kontratı oku. Çalışma saatlerin, fazla mesai ücretin, kazancın, hatta maaşın ödeneceği zamanlar, izin sürelerin, her şey orada belli. Uzaktan veya ofisten çalış, senin şirketle arandaki ilişkiyi belirleyecek olan belge o.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eğer uzaktan çalışacağın şirketin Türkiye&amp;rsquo;de kayıtlı ve yasal bir şirketi varsa, SGK, vergiler ve maaş konularında değişen bir şey yok.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eğer uzaktan çalışacağın şirketin Türkiye&amp;rsquo;de yasal bir şirketi yok ise, senin daha önce de söylediğim gibi bir gelir beyan etmen gerekiyor. Bunu yapmanın en kolay yolu, bir şahıs şirketi kurup o şirkete fatura kesmek veya sanal şirket hizmeti veren ve senin adına fatura kesen bir hizmet satın almak. İnternette araştırırsan epey online hizmet bulabilirsin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bunun dışında bir de devletin sunmuş olduğu hazır beyan sistemi var. Ancak burada çok önemli bir kriter var: Kazancının sürekli olmaması. Bu genelde freelancerlar için uygun bir yöntem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sanal-şirket-hizmetini-aldığım-şirket-de-yurtdışındaysa&#34;&gt;Sanal şirket hizmetini aldığım şirket de yurtdışındaysa?&lt;/h2&gt;

&lt;p&gt;Şirket nerede olursa olsun, hesabına gelen paranın nasıl geldiğini beyan edebileceğin bir bordro, ücret dökümü, fatura ve benzeri mutlaka bir belge olsun.&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;TODO: Burada bir detay bilgi daha var; ama epey karışık ve emin olmadığım için bir araştırma yapmalıyım.&lt;/mark&gt;&lt;/p&gt;

&lt;h2 id=&#34;remote-çalışmaya-ilk-adımını-atacak-birisi-için-verebileceğiniz-altın-değerinde-bir-tavsiyeniz-var-mıdır&#34;&gt;Remote çalışmaya ilk adımını atacak birisi için verebileceğiniz altın değerinde bir tavsiyeniz var mıdır?&lt;/h2&gt;

&lt;p&gt;İlk adım bence senin yaptığın gibi, deneyimli insanlara danışmak. Bunun için Türkçe kaynak bile var: &lt;a href=&#34;https://uzaktancalismak.com&#34;&gt;https://uzaktancalismak.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha net bir altın tavsiye bekliyorsan, şunu derim: Vereceğin bütün kararlarda önce sağlığını düşün. Mecidiyeköy trafiğine takılmayınca kendiliğinden daha sağlıklı bir hayatın olmuyor.&lt;/p&gt;

&lt;h2 id=&#34;uzaktan-çalışmanın-bu-kadar-dezavantajı-varsa-neden-insanlar-uzaktan-çalışmayı-tercih-etsin&#34;&gt;Uzaktan çalışmanın bu kadar dezavantajı varsa, neden insanlar uzaktan çalışmayı tercih etsin?&lt;/h2&gt;

&lt;p&gt;Ortada bir tercih yok. Yakın zamanda uzaktan çalışmayı şart koşan ve daha önce de bu deneyime sahip insanları arayan iş ilanlarını daha fazla göreceğimizi düşünüyorum. Bu disipline ne kadar erken sahip olursan, senin için bir avantaj.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Altın Rehber</title>
      <link>https://gokmengorgen.net/blog/altin-rehber/</link>
      <pubDate>Sun, 11 Aug 2019 13:43:00 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/altin-rehber/</guid>
      <description>&lt;p&gt;&lt;em&gt;Bağımlılıklardan nefret ediyorum. Bu nedenle sahip olduğum her eşya için kendime bazı sorular soruyorum. Bu bir araba, bilgisayar veya bir internet hizmeti olabilir:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Ne kadar süre&lt;/strong&gt; kullanmayı düşünüyorum?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;İşimi gerçekten &lt;strong&gt;görüyor mu&lt;/strong&gt;?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Hangi&lt;/strong&gt; sorunumu çözecek ve daha önce &lt;strong&gt;nasıl&lt;/strong&gt; çözüyordum?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Birçok alternatif varken bunu &lt;strong&gt;niye&lt;/strong&gt; tercih ettim?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bozulursa &lt;strong&gt;ne&lt;/strong&gt; yapacağım?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/altin-rehber.jpg&#34; alt=&#34;Altın rehber&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bu konuya girmeden önce kendimden bir şey anlatmak istiyorum. Adından olsa gerek, her Kurban bayramı, Kurban grubunu hatırlarım. Bana enstrümanı sevdiren, üniversitemin renkli geçmesine vesile olan, hayatı türlü türlü deneyimlediğim bir grup. Kendime basgitarist olarak bir müzik grubu araştırırken, internette epey araştırma yapardım. O zamanlar &lt;a href=&#34;https://myspace.com&#34;&gt;MySpace&lt;/a&gt; çok popülerdi, müzisyenler için Linkedin gibi düşünün. Grup kimlerden oluşuyor, hangi üyesi ne bölüm okuyor, enstrümanı nedir; stüdyo parası bulabilecek mi, vakti var mı, başka şehirlerde konserimiz olursa gelebilecek mi, daha önce hangi sahnelere çıkmış&amp;hellip; Birçok bilgiyi bu sitede bulabiliyorduk.&lt;/p&gt;

&lt;p&gt;Onun dışında müzik forumları olurdu. Bazen müzik grupları adına fan kulüpleri, bazen enstrümanlar veya müzik tarzları üzerinden genel forumlar oluşturulurdu ve biz bunları hep Google, Yahoo gibi arama motorları sayesinde, internette araştırarak bulurduk.&lt;/p&gt;

&lt;p&gt;İnternet demişken, kaldığım yurtta bırakın internet olmasını, bilgisayar yoktu. Telefonlarımız da akıllı falan değildi. Şimdi düşününce &lt;strong&gt;içim kararıyor&lt;/strong&gt;; ama o zamanlar öyleydi. O zaman endişelenirdim, nasıl kendime grup bulacağım, nasıl yeni insanlarla tanışacağım, yeni grupları nasıl takip edeceğim&amp;hellip; Dersten çıkıp yurda dönene kadar bir saatlik bir vaktim olurdu, milletin püfür püfür sigara içip oyun oynadığı vakit ben internette kendime grup araştırırdım.&lt;/p&gt;

&lt;p&gt;İşte benim bağımlılıktan kastettiğim bu. Eskiden (daha da eskiden) internet olmadığında bu işler nasıl oluyordu? Herhalde dergiler alınıyordu, televizyon programları izleniyordu, basılı yayın takip ediliyordu, mekanlara gidip veya sokak sokak dolaşıp posterlere bakılıyordu, haftasonu programları not alınıyordu. Üniversitelerin müzik kulüplerine katılınıyordu. Kısacası gerçek anlamda koşturuluyordu.&lt;/p&gt;

&lt;p&gt;Artık hayatımızda sosyal medya var. İyi hatırlıyorum, Markafoni&amp;rsquo;nin reklamını televizyonda görünce şaşırmıştık, sonra yavaş yavaş televizyon spikerleri veya anchorman dediğimiz haber sunucuları, Twitter ve Facebook adreslerini paylaşır oldular. Şimdi geldiği noktaya bakıyorum, artık gazeteciler YouTube&amp;rsquo;da, müzisyenler Bandcamp&amp;rsquo;ta, yazılımcılar GitHub&amp;rsquo;da. Twitter&amp;rsquo;da da her kafadan insan var.&lt;/p&gt;

&lt;p&gt;Eskiden aradığım insana ulaşma çabamla, şimdiki çabam arasında korkunç bir uçurum var. Eskiden o kadar imkansızlığa rağmen müthiş insanlar tanıdım. Bugün her türlü imkana rağmen çok az insan tanıyorum. &lt;strong&gt;Çoğulculuk gitti, yerini çoğunlukçuluğa bıraktı&lt;/strong&gt;. En çok kim tanınıyorsa, herkes onu bilmek istiyor, en çok ne tercih ediliyorsa herkes onu tercih etmek istiyor. En çok neye bağımlılık varsa, herkes ona bağımlı olmak istiyor. Çoğunluk nerede ise, herkes orada olmak istiyor. Sonra bir bakıyoruz, hep aynı insanlar, hep aynı çoğunluk, hep aynı tarz müzik, hep aynı günler, aynı haftasonları.&lt;/p&gt;

&lt;p&gt;İnsan dediğimiz sosyal bir varlık; ama sosyal medya bu işlevi yerine getirmekte inanılmaz başarısız. Zarar verici bile olabilir. Bugün Hayko Cepkin&amp;rsquo;i, Harun Tekin&amp;rsquo;i Twitter sayesinde tanıyanlar olduğunu biliyorum. Ama bu insanları ben henüz ünlü değilken, araştırarak tanımıştım. Kerem Tüzün&amp;rsquo;ü, Demirhan Baylan&amp;rsquo;ı, Tarkan Gözübüyük&amp;rsquo;ü ben orada burada bir şeyler yazdıkları zaman değil; isim isim, tek tek araştırarak bulmuştum, tanımıştım. Bu insanlar internette yoktular ve hep başkaları onlardan bahsediyordu. Şimdi bugünün tanınmayan, henüz ünlü olmamış ve belki de hiçbir zaman olmayacak ama başarılı, samimi insanlarını keşfedip, onlarla gerçek bir bağ kurma özlemi içindeyim.&lt;/p&gt;

&lt;p&gt;Sosyal medya işimi gerçekten görüyor mu, emin değilim. Hangi sorunlarımı çözüyor, gerçekten çözüyor mu, anlamış değilim. Bir sürü güzel alternatif iletişim kanalları varken, her kafadan insanın belli birkaç siteye yığılmış olması tuhaf. Bir gün Facebook, Linkedin, Twitter yok olup gitse, kaybedeceğim bir şey var mı diye düşünüyorum. Hayır, yok. Veya neredeyse yok.&lt;/p&gt;

&lt;p&gt;Tek ihtiyacım, yeni bir altın rehber.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iPad Üzerine İlk İncelemem</title>
      <link>https://gokmengorgen.net/blog/ipad-uzerine-ilk-incelemem/</link>
      <pubDate>Sat, 03 Aug 2019 15:24:01 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/ipad-uzerine-ilk-incelemem/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Daha efektif kullanmak amaçlı ikinci bir laptop yerine iPad kullanmaya başladım. Birşeyler okumak, mailleri cevaplamak, işleri kontrol etmek için mükemmel olsa da, tabletleri bir laptop gibi kullanmak hala mümkün değil.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bu yüzden ana PC&amp;rsquo;ye uzaktan bağlanmayı denedim. Ancak bu da benim için tatmin edici olmadı. iOS 13 ve birkaç güncelleme geldikten sonra tekrar karşılaştırmak için bazı notlar aldım.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/ipad-remote-desktop.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;olumlu-yanlar&#34;&gt;Olumlu Yanlar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tablet modunda, bütün uygulama ekranları otomatik olarak tam boyutlu hale geliyor.&lt;/li&gt;
&lt;li&gt;UI bileşenlerinin boyutları, ekranı dokunarak kullanmak için daha rahat oluyor.&lt;/li&gt;
&lt;li&gt;Firefox&amp;rsquo;ta tablet modu var; dokunarak sayfayı kaydırmak mümkün, yer imlerine tıklamak kolay.&lt;/li&gt;
&lt;li&gt;Sanal klavye harika! iPad&amp;rsquo;in kendi ekran klavyesini kullanma gereği duymadım.&lt;/li&gt;
&lt;li&gt;Görev çubuğunda çalışan uygulamaları göremiyoruz, ama parmak hareketleri ile dokunarak tüm çalışan uygulamaları görebilmek mümkün.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;olumsuz-yanlar&#34;&gt;Olumsuz Yanlar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Uzaktan bir masaüstü veya bir sunucuya ihtiyacın var. Çevrimdışı olarak çalışmak imkansız.&lt;/li&gt;
&lt;li&gt;Eğer uzak bir masaüstü kullanmayı düşünürseniz ve fontlarla ilgili bir takıntınız varsa, ekran kalitesini artırmak mümkün değil.&lt;/li&gt;
&lt;li&gt;İyi bir fiziksel klavye olsa bile, saatlerce iPad üzerinden kodlamaya yapabileceğimi sanmıyorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sonuç-olarak&#34;&gt;Sonuç Olarak&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Yeni macOS ve iOS 13 güncellemeleri ile iPad uygulamalarını macOS üzerinde çalıştırmak mümkün olacak. Bu nedenle iPadOS uygulamaların çeşitliliği ve kalitesini etkileyebilir.&lt;/li&gt;
&lt;li&gt;Hala Microsoft Surface veya Surface Go&amp;rsquo;nun Thunderbolt 3 ve USB-C portlarına sahip olan, ARM CPU kullanan bir sürümünü bekliyorum.&lt;/li&gt;
&lt;li&gt;Henüz Google Pixelbook nasıldır araştırmadım ama güzel bir alternatif gibi görünüyor.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tatilden Sonraki İlk Hatam</title>
      <link>https://gokmengorgen.net/blog/tatilden-sonraki-ilk-hatam/</link>
      <pubDate>Thu, 20 Jun 2019 13:33:38 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/tatilden-sonraki-ilk-hatam/</guid>
      <description>&lt;p&gt;Üç haftalık tatilimin sonunda görünürde basit bir iş talep edildi. Geliştirdiğimiz projenin yeni sürümünü yayınlayacaktık:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bugün haftanın son çalışma günü mü? &lt;strong&gt;Hayır&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Unit testlerde sorun var mı? &lt;strong&gt;Hayır&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Yapılan tüm değişiklikler test sunucusunda ürün yöneticisi tarafından onaylandı mı? &lt;strong&gt;Evet&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ben her şeyi not ederim ve bu yazıyı da aynı amaçla, bu deneyimimi hatırlamak için yazıyorum. Bir diğer alışkanlığım, &lt;a href=&#34;https://gokmengorgen.net/blog/komutlar-icin-yardimci-script/&#34;&gt;&lt;strong&gt;dosh&lt;/strong&gt;&lt;/a&gt; ile sık kullandığım komutları tüm projelerimde ortak belli başlı alt-komutlar altında toplamak. Proje .NET ile yazılmış, Django olmuş farketmez;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dosh start&lt;/code&gt; dediğimde o projenin geliştirme ortamımda başlayacağını,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dosh build&lt;/code&gt; dediğimde build edileceğini,&lt;/li&gt;
&lt;li&gt;Belli git branch&amp;rsquo;ları güncellendiğinde, sunucularda &lt;code&gt;dosh deploy&lt;/code&gt; çalışacağını biliyorum. Her şey benim için bu kadar standart.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peki standart olmayan neydi?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/server-updates.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bir projede sunucunun bakımı hariç bütün her şeyi yönetiyorum. İletişim kopukluğu, sitenin bir saat offline kalmasına sebep oldu. Her zaman olmasa da, ara sıra sunucuda küçük ama önemli güncellemeler oluyor. Bu güncelleme, projenin psycopg2 bağımlılığının SSL modülünü tabiri caizse kırdı. Loglarda sadece bu vardı:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DAMN ! worker 1 (pid: 28018) died :( trying respawn ...
Respawned uWSGI worker 1 (new pid: 28021)
!!! uWSGI process 27988 got Segmentation Fault !!!
*** backtrace of 27988 ***
/usr/bin/uwsgi-core(uwsgi_backtrace+0x2a) [0x55a0ad5c498a]
/usr/bin/uwsgi-core(uwsgi_segfault+0x23) [0x55a0ad5c4d73]
/lib/x86_64-linux-gnu/libc.so.6(+0x3ef20) [0x7f4811ecaf20]
/project/venv/lib/python3.6/site-packages/psycopg2/.libs/./libssl-8bb9b3dd.so.1.0.2o(ssl3_cleanup_key_block+0xb) [0x7f480a747cbb]
/project/venv/lib/python3.6/site-packages/psycopg2/.libs/./libssl-8bb9b3dd.so.1.0.2o(ssl3_clear+0x16) [0x7f480a7455b6]
/project/venv/lib/python3.6/site-packages/psycopg2/.libs/./libssl-8bb9b3dd.so.1.0.2o(tls1_clear+0x9) [0x7f480a751229]
/usr/lib/x86_64-linux-gnu/libssl.so.1.1(SSL_new+0x3f2) [0x7f4812b429d2]
/project/venv/lib/python3.6/site-packages/psycopg2/.libs/libpq-239f9ac8.so.5.10(+0x23399) [0x7f480a9dc399]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Segmentation Fault&amp;rsquo;a ya C programlama dilinden ya da herhangi bir paket yöneticisiyle uğraştıysanız tanık olmuşsunuzdur. Psycopg2&amp;rsquo;nin binary sürümünü kullandığımız için, içindeki bazı kütüphaneler eski libssl kütüphanesini kullanıyordu ve bu nedenle son sunucu güncellemesi &lt;mark&gt;bağımlılıkları kırdı&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/mark&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lib/python3.6/site-packages/psycopg2/.libs/libssl-8bb9b3dd.so.1.0.2o   # 1.0&#39;dan
lib/python3.6/site-packages/psycopg2/.libs/libssl-7a80b951.so.1.1.1b   # 1.1&#39;e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bazı projelerde çeşitli regülasyonlar ve kaynak kısıtları nedeniyle her şeyi istediğimiz gibi çözmek mümkün değil; ama tatil sonrası bende oluşan bir rehavetle, benim kontrolümün dışında ne değişiklikler olduğunu kontrol etmeden sunucuları güncellemeye kalktım ve daha kötüsü bana söylenene kadar sorunu fark etmedim.&lt;/p&gt;

&lt;p&gt;Onun için, tatil sonrası ilk iş gününde biraz yavaş olmakta fayda var ve kendime bir kural daha ekledim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bugün tatilden sonraki ilk çalışma günü mü? &lt;strong&gt;Evet (öyleyse yapma)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Özlemişim bu tarz kelimeler kullanmayı. Taa Pardus zamanlarından.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Django CMS için HTML Tags eklentisi</title>
      <link>https://gokmengorgen.net/blog/djangocms-icin-html-tags-eklentisi/</link>
      <pubDate>Sun, 28 Apr 2019 11:18:33 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/djangocms-icin-html-tags-eklentisi/</guid>
      <description>

&lt;p&gt;Django ile yazılmış içerik yönetim sistemi deyince aklımıza ilk Django CMS geliyor. Oldukça kapsamlı ve geliştirici açısından öğrenmesi biraz zaman alan; fakat öğrenince de CMS gerektiren işleri kolay ve eğlenceli hale getiren açık kaynak bir yazılımdır. Kurulumu kolay, Divio&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;lsquo;nun bulut sistemlerinde Django CMS&amp;rsquo;e tam desteği var; ama isterseniz kendi VPN sunucunuza da kurabiliyorsunuz. Eğer bu işlerle ilgili ilgilenecek ekibiniz yoksa, Divio&amp;rsquo;nun Türkiye&amp;rsquo;deki tek partneri Radity&amp;rsquo;den destek alabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.django-cms.org/en/addons/browse/djangocms-html-tags/&#34;&gt;HTML Tags&lt;/a&gt;, adından da anlaşılacağı üzere, HTML kodlarını CMS paneli üzerinden sayfaya tek tek ekleme imkanı sunan bir Django CMS eklentisidir. Django CMS&amp;rsquo;te bir sayfa tasarlarken ikilemde kaldığımız bazı sorular vardı:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Header bölümünde bir başlık ekleyeceğiz ve bu başlığın farklı dillere çevrilebilir olması gerekiyor, bunun için koca bir text editörü kullanmak ne kadar mantıklı?&lt;/li&gt;
&lt;li&gt;Varsayalım kullandık, içindeki editörün özelliklerini her farklı alan (placeholder) için kısıtlamak ne kadar verimli olur?&lt;/li&gt;
&lt;li&gt;Onun yerine her bir eleman için ayrı ayrı alanlar oluştursak ne kadar verimli olacak? Ve bunun gibi sorular&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yapmak istediğimiz şöyle bir senaryoydu: &amp;ldquo;X şablonunu kullanan bir sayfanın header bölümünde sadece bir başlık ve bir de paragraf kullanılmasına izin vermek istiyoruz. Başlık ancak &lt;strong&gt;H1&lt;/strong&gt; olabilir, paragraf için de sadece &lt;strong&gt;P&lt;/strong&gt; kullanılabilir.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;alternatifler&#34;&gt;Alternatifler&lt;/h2&gt;

&lt;p&gt;HTML text editörü kullanmak dışında &lt;a href=&#34;https://github.com/pakal/cmsplugin-rst&#34;&gt;ReStructuredText&lt;/a&gt; ve &lt;a href=&#34;https://github.com/bitlabstudio/cmsplugin-markdown&#34;&gt;Markdown&lt;/a&gt; kullanmak bir çözüm olabilirdi; ancak hem CMS&amp;rsquo;i yönetecek insanların bu tip biçimleme araçlarını bilme olasılıkları düşük, hem de tam olarak sorunumuzu çözmüyor. Form builder&amp;rsquo;lar istediğimize en yakın eklentiler; fakat onlar da sadece form elementlerini kapsıyor.&lt;/p&gt;

&lt;h2 id=&#34;kurulum&#34;&gt;Kurulum&lt;/h2&gt;

&lt;p&gt;Kurulum basit. Eğer Divio Cloud kullanıyorsanız Marketplace&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; üzerinden kurabilirsiniz. Kullanmıyorsanız PyPi&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&amp;lsquo;de aynı paketi bulabilirsiniz, ek olarak &lt;code&gt;INSTALLED_APPS&lt;/code&gt; içine &lt;code&gt;djangocms-html-tags&lt;/code&gt; yazmalısınız.&lt;/p&gt;

&lt;p&gt;Bunun dışında tek yapmanız gereken, hangi sayfa alanlarında hangi eklentiyi kullanacağınızı belirtmeniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;CMS_PLACEHOLDER_CONF = {
  &amp;quot;header&amp;quot;: {
    &amp;quot;plugins&amp;quot;: [&amp;quot;Heading1Plugin&amp;quot;, &amp;quot;ParagraphPlugin&amp;quot;]
  },
  &amp;quot;footer&amp;quot;: {
    &amp;quot;plugins&amp;quot;: [&amp;quot;ParagraphPlugin&amp;quot;]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu ayarlara göre artık ilgili alanlara belirli HTML elemanlarını eklemek, çeşitli stillerle özelleştirmek artık mümkün.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/djangocms-html-tags.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;gelişimine-katkıda-bulunmak-ister-misiniz&#34;&gt;Gelişimine katkıda bulunmak ister misiniz?&lt;/h2&gt;

&lt;p&gt;Benim en çok yapmak istediğim şeylerden birisi bir form builder özelliği eklemek, şuanda input ve buton koymak mümkün; ancak &lt;strong&gt;TEXTAREA&lt;/strong&gt;, &lt;strong&gt;RADIO BUTTONS&lt;/strong&gt;, &lt;strong&gt;CHECK BUTTONS&lt;/strong&gt;, &lt;strong&gt;IMAGE / FILE FIELD&lt;/strong&gt; gibi özel inputları da ekleyerek bir form builder eklentisi ihtiyacını karşılamak mümkün olabilirdi.&lt;/p&gt;

&lt;p&gt;Öte yandan, örnekleri iyi tasarımla güzelleştirmek, daha spesifik örneklerle eklentinin nasıl kullanılacağını göstermek iyi olurdu.&lt;/p&gt;

&lt;p&gt;Sizlerden gelecek fikirlere de açığız.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.divio.com/&#34;&gt;Divio&lt;/a&gt;, aynı zamanda Django CMS&amp;rsquo;i geliştiren şirket. Sitesine bir göz atmanızı öneririm.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://marketplace.django-cms.org/en/addons/browse/?name=html+tags&#34;&gt;Divio Marketplace&lt;/a&gt; üzerinden eklenti araması yapabilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://pypi.org/project/djangocms-html-tags/&#34;&gt;PyPi&lt;/a&gt; için örnek kurulum: &lt;code&gt;pip install djangocms-html-tags&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>31 Mart seçimlerinde medya</title>
      <link>https://gokmengorgen.net/blog/31-mart-secimlerinde-medya/</link>
      <pubDate>Sat, 06 Apr 2019 12:42:17 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/31-mart-secimlerinde-medya/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Konu siyaset değil.&lt;/strong&gt; Sadece işimizle ilgili küçük bir gözlemimi paylaşmak istiyorum. 31 Mart seçiminde ilk defa hiçbir televizyon kanalını izlemedim, basılı yayınların internet sitelerine bakmadım, takip etmedim. Twitter&amp;rsquo;daki dezenformasyondan kendimi korumak için epey kabarık bir engelleme ve sessize alma listem oluştu. O gece sadece Youtube&amp;rsquo;daki -alternatif- medya vardı benim için.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Artık televizyon kanallarına bakmak yerine Youtube, Twitch, Netflix ve benzeri sitelere bakıyorum ve bunu bir tek ben yapmadığımı en iyi  seçim günü anladım. Görsel medyadaki bu değişimin, yazılı medyada da değişeceğini umuyorum ve bu durumun, blog siteleri için bir şans olacağını düşünüyorum. Bu yeni ilgi gösterilen medya araçlarında yeni girişimlerin, yeni yayın programlarının ve dolayısıyla yeni ihtiyaçların ortaya çıkacağını düşünüyorum.&lt;/p&gt;

&lt;p&gt;Bir televizyon programında 50 kişilik bir ekibin çalıştığını ve o programın yayınına kadar çeşitli yazılımların hazırlandığını düşünecek olursak; &lt;strong&gt;Cüneyt Özdemir&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&amp;lsquo;in küçük bir ekiple seçim günü çok iyi bir iş yaptığını söyleyebiliriz. Yer ve ekipman hazırlamışlar, seçim sonuçlarını Anadolu Ajansı&amp;rsquo;ndan alıp ekranda gösterebilmek için her türlü hazırlığı yapmışlar, önemli konukları programa davet etmişler. Bir Youtube kanalı için çok değerli bir çaba. Aslında konuyu seçimle sınırlamazsak bu tip alternatif yayınların çok fazla örneği var. &lt;strong&gt;Ruşen Çakır&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&amp;lsquo;ın Medyascope&amp;rsquo;u, &lt;strong&gt;Çağlar Cilara&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&amp;lsquo;nın Onuncu Köy&amp;rsquo;ü, &lt;strong&gt;Kadri Gürsel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; gibi gazetecilerin yorumlarını aktardıkları yayınlar, her türlü görüşten sesli makaleler&amp;hellip; Ve tüm bu yayıncıların ortak yazılım ihtiyaçları var, benim ilgimi çeken kısım işte burası.&lt;/p&gt;

&lt;p&gt;Bunun, blog sitelerini nasıl etkileyeceğini de merak ediyorum. &lt;strong&gt;Mahfi Eğilmez&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; hala ama hala düzenli bir şekilde Blogspot kullanıyor. Benzer şekilde, yazılarını başka bir platformda yayınlasa da &lt;strong&gt;Uğur Gürses&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&amp;lsquo;in blogu var. Niye yazarların kendi blog siteleri yok, bunu tekrar sorgulamak ve önünü açmak gerekiyor. &lt;strong&gt;Serdar Kuzuloğlu&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; epeydir bu işin içinde. &lt;strong&gt;Hamza Şamlıoğlu&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&amp;lsquo;nun gazetecilik geçmişi var mı bilmiyorum ama çok güzel bir blogu var.&lt;/p&gt;

&lt;p&gt;Örnekler çok. Gazetecilerin bloglarının, medyanın ana damarlarından biri olmasını dilerim. Bir de tabi &lt;mark&gt;yeni bir Google Reader&lt;/mark&gt; ve gezegenler (bilen bilir).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Cüneyt Özdemir: &lt;a href=&#34;https://www.youtube.com/user/dipnottv&#34;&gt;https://www.youtube.com/user/dipnottv&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Medyascope: &lt;a href=&#34;https://medyascope.tv/&#34;&gt;https://medyascope.tv/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Çağlar Cilara: &lt;a href=&#34;https://www.youtube.com/caglarcilara&#34;&gt;https://www.youtube.com/caglarcilara&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Kadri Gürsel: &lt;a href=&#34;http://kadrigursel.com&#34;&gt;http://kadrigursel.com&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Kendime Yazılar: &lt;a href=&#34;http://www.mahfiegilmez.com/&#34;&gt;http://www.mahfiegilmez.com/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;Uğur Gürses: &lt;a href=&#34;https://ugurses.net/&#34;&gt;https://ugurses.net/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;Serdar Kuzuloğlu: &lt;a href=&#34;https://www.mserdark.com/&#34;&gt;https://www.mserdark.com/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;Teakolik: &lt;a href=&#34;https://www.teakolik.com/&#34;&gt;https://www.teakolik.com/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tüketici</title>
      <link>https://gokmengorgen.net/blog/tuketici/</link>
      <pubDate>Wed, 27 Feb 2019 20:49:26 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/tuketici/</guid>
      <description>&lt;p&gt;Hayatta iyi şeyler için emek, sabır ve zaman gerekiyor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resim çizmek;&lt;/li&gt;
&lt;li&gt;Enstrüman çalmak;&lt;/li&gt;
&lt;li&gt;Yazılım üretmek;&lt;/li&gt;
&lt;li&gt;Veya herhangi bir şey üretmek;&lt;/li&gt;
&lt;li&gt;Hatta kitap bitirmek;&lt;/li&gt;
&lt;li&gt;Çeviri yapmak;&lt;/li&gt;
&lt;li&gt;Dert anlatmak;&lt;/li&gt;
&lt;li&gt;Yazı yazmak;&lt;/li&gt;
&lt;li&gt;Görsel yayın hazırlamak;&lt;/li&gt;
&lt;li&gt;Her şey.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bir tek sosyal medya paylaşımı yapmak ve onu tüketmek kolay.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hangi çağda yaşıyoruz?</title>
      <link>https://gokmengorgen.net/blog/hangi-cagda-yasiyoruz/</link>
      <pubDate>Sat, 16 Feb 2019 23:48:02 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/hangi-cagda-yasiyoruz/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/train-station.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teknolojimiz henüz gören bir göz, duyan bir kulak kadar gelişmedi.&lt;br /&gt;
Veya henüz bedenimize ihtiyaç duymayacağımız bir çağda değiliz.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Spreadsheet uygulamaları</title>
      <link>https://gokmengorgen.net/blog/spreadsheet-uygulamalari/</link>
      <pubDate>Wed, 02 Jan 2019 17:30:44 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/spreadsheet-uygulamalari/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/blog/spreadsheet-apps.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Spreadsheet uygulamaları, şimdiye kadar kullandığım en işlevsel uygulamalar. Excel, Gnumeric, Google Sheet, OpenOffice Calc, hangisi olursa olsun, farketmez. Trello gibi iş takibi olarak kullanabilirsiniz, günlük - haftalık - aylık planlar yapabilirsiniz, veri saklayabilir ve aktarabilirsiniz, mali durumunuzu takip edebilirsiniz. İsviçre çakısı gibi ve üstelik yeni bir icat değil.&lt;/p&gt;

&lt;p&gt;Bundan daha işlevsel bir uygulama bulduğumda, bu yazıyı güncelleyeceğim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zincirsiz</title>
      <link>https://gokmengorgen.net/blog/zincirsiz/</link>
      <pubDate>Sat, 29 Dec 2018 20:46:59 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/zincirsiz/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;Zinciri kırma&amp;rdquo; sözünü her yeni yıla girmeden önce, yıllık planımı yaparken sosyal medyadan görürdüm, yine &lt;a href=&#34;https://www.instagram.com/p/BryaKZpBasB/&#34;&gt;Aycan Doğanlar&lt;/a&gt;’ın hazırladığı bir projeyle denk geldim bu söze. Sonunda üşenmeyip nedir bu diye araştırdım. &lt;a href=&#34;https://youtu.be/5uIl38UFVh0&#34;&gt;Barış Özcan&lt;/a&gt;&amp;lsquo;ın 16 Aralık 2018’de hazırladığı videosunu izledim ve şaşırdım. Ben de kendi kendime benzer planlar yapıyordum. Bu sefer yeni yıla onun önerileriyle gireceğim.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/unchained-demo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bu resimdeki çizelge bir örnek. Önce biraz anlatayım, aşağıdaki katkı çizelgesini yazılımcı arkadaşlar tanıyacak, GitHub’tan. Dikey olarak haftalara, yatay olarak günlere bölünmüş bu çizelge sayesinde, bir kullanıcının son bir yılda GitHub’taki katkılarını takip etmek mümkün. Aslında Barış Özcan&amp;rsquo;ın &lt;a href=&#34;https://barisozcan.com/zinciri-kirma/&#34;&gt;2018 takviminin&lt;/a&gt; &lt;strong&gt;yatay hali&lt;/strong&gt;. Bir de renk spektrumu var aynı rengin farklı tonlarında, böylece &lt;mark&gt;o günün ne kadar aktif geçtiğini&lt;/mark&gt; anlayabilmek mümkün:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/dsyme-contribution-chart.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ben de birkaç hedef belirleyerek, aylık çizelgeler oluşturuyorum. &lt;a href=&#34;https://1drv.ms/x/s!AsRMET0ye5r7hJIn2odT70UZQogumg&#34;&gt;Burada&lt;/a&gt; bir örneğini indirebilirsiniz. Bu çizelgeleri her gün belli renklerle dolduruyorum, olabildiğince yeşillerle. &lt;span style=&#34;color: gray;&#34;&gt;&lt;strong&gt;Griler&lt;/strong&gt;&lt;/span&gt; o kadar değil; ama &lt;span style=&#34;color: green;&#34;&gt;&lt;strong&gt;yeşillerin&lt;/strong&gt;&lt;/span&gt; arasında &lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;kırmızı&lt;/strong&gt;&lt;/span&gt; görmek epey rahatsız edici oluyor. Yine de bir zincir söz konusu olmadığı için, kırmızılar için her ayın sonunda bir güncelleme yapıyorum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ya o hedeften tamamen vazgeçiyorum ve yerine başka bir hedef koyuyorum.&lt;/li&gt;
&lt;li&gt;Ya da hedefi &lt;mark&gt;bir sonraki ay&lt;/mark&gt; için daha gerçekçi hale getirmeye çalışıyorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bir yıl için tutturabildiğim hedef 4 veya en fazla 5, o da bir tanesinin aylık veya haftalık olması şartıyla. Önümüzdeki yıla kadar başarmamı istediğim şeye hizmet edecek ne varsa önce onları belirliyorum. Mesela:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Kendimi daha sağlıklı hissetmek için &lt;strong&gt;haftada bir gün bisiklet kullanmayı&lt;/strong&gt; hedefliyorum. Örneğin Cumartesi günleri, diğer günleri &lt;span style=&#34;color: gray;&#34;&gt;&lt;strong&gt;griye&lt;/strong&gt;&lt;/span&gt; boyuyorum. Cumartesi günleri ise başardıysam &lt;span style=&#34;color: green;&#34;&gt;&lt;strong&gt;yeşil&lt;/strong&gt;&lt;/span&gt;, başaramadıysam &lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;kırmızı&lt;/strong&gt;&lt;/span&gt;.&lt;br /&gt;
&lt;code&gt;(Bisiklet kullan, W 1d)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;İşimde daha iyi olmak için &lt;strong&gt;her gün 20 dakika kitap okumayı&lt;/strong&gt; hedefliyorum. Okuyamadığım her gün için &lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;kırmızı&lt;/strong&gt;&lt;/span&gt;.&lt;br /&gt;
&lt;code&gt;(Kitap oku, D 20m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Her gün yazı yazmak için 1 saat&lt;/strong&gt; ayır. Bir cümle bile olsa tamam; ama Tweet gibi değil. Hoşuna gidecek, karakter limiti olmaksızın; sadece düşünmene yardımcı olacak, daha iyi iletişim kurmanı sağlayacak cümleler. Yapamadığın her gün için &lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;kırmızı&lt;/strong&gt;&lt;/span&gt;, yapabildiklerin için &lt;span style=&#34;color: green;&#34;&gt;&lt;strong&gt;yeşil&lt;/strong&gt;&lt;/span&gt;.&lt;br /&gt;
&lt;code&gt;(Yazı yaz, D 1h)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hedefleri belirleyebilmek o kadar kolay değil. Zaten kolay olmadığı için Barış Özcan&amp;rsquo;ın videosu şaşırtıcı oldu benim için. Çok basit bir önerisi vardı, yapabileceğinin &lt;strong&gt;yarısını&lt;/strong&gt; hedef olarak belirlemek. Ben her yılın sonunda, bazen ay sonlarında bu hedefleri belirlemek için kendime mektup yazar gibi yazı yazıyorum, hedefleri onun üzerinden belirliyorum. Sonra her ay çizelgeme bakıp ne kadar başarabildiğimi inceliyorum. &lt;mark&gt;İnsan, geçmiş ayın bir özetini, istatistiğini bir şekilde görmek istiyor&lt;/mark&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hepinize mutlu yıllar diliyorum. Umarım daha çok bloggerların olduğu, static site generatorların, Blogspot’un, Wordpress’in tekrar rağbet gördüğü bir yıl olur. Ben de Seinfeld serisini nereden satın alabilirim, bir bakayım.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Müşteri memnuniyeti</title>
      <link>https://gokmengorgen.net/blog/musteri-memnuniyeti/</link>
      <pubDate>Tue, 04 Dec 2018 11:04:36 +0100</pubDate>
      
      <guid>https://gokmengorgen.net/blog/musteri-memnuniyeti/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/thinkpad-alienware.png&#34; alt=&#34;Ekmek teknem&#34; title=&#34;Şu köşedeki gülüyor mu? Hayır yani gülünecek bir şey mi var?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aşağıda &lt;mark&gt;alternatif iletişim yollarını&lt;/mark&gt; kullanarak çözdüğüm problemleri ve başvurularımı yazıyorum. Dünyanın neresinde olursak olalım, hiçbir hizmet kusursuz değil. Önemli olan bir sorun olduğunda, sorunların nasıl ve ne kadar sürede çözüldüğü, alternatif iletişim kanallarının olup olmadığı.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PayPal:&lt;/strong&gt; Uzun zaman önce açtığım hesabı, mail adresim aynı olmasına rağmen, telefon numaram değiştiği için kurtaramamıştım. Açıklayıcı bir mail attıktan sonra bir otomatik mail geldi, etkisi oldu mu bilmem ama telefonla veya anahtar sorularla doğrulama şartı kalktı. İçindeki 3 doları görünce de kışlık montun cebinden para bulmuşum gibi sevindim.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Amazon:&lt;/strong&gt; Bilgisayar için çanta siparişi verdiğim günün ertesinde büyük bir indirim oldu. Çanta gelmeden iadesini isteyip ikinci kez satın aldım. İlk çantanın parasını ödemek istemeyince de hatlar büyük büyük karıştı. Açıklayıcı bir mail gönderdim. Karşınızda bir insan bu maili okuyor, sorunu anlayıp çözüyor ve size cevap yazıyor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;BVG:&lt;/strong&gt; Berlin&amp;rsquo;de ulaşım firması BVG&amp;rsquo;nin mobil uygulamasından bilet satın alırken uygulama bir hata verdi ve ben de kontrol etmeden aynı işlemi ikinci kez yaptım. İki kez para çekilince durumu BVG&amp;rsquo;ye mail ile anlattım. Acayip bir şey ama şunu seviyorum; bir şeyi yapacağız diye değil, yaptık veya yapmaya başladık diye cevap alıyorum çoğunlukla. Ben de çoğunlukla aynı şekilde mail atarım. BVG&amp;rsquo;den iki hafta hiç ses gelmedi, sonra ikinci biletin iadesi birden yapılıverdi, ardından cevap.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;İsmi lazım değil bir VPN firması:&lt;/strong&gt; Üyeliği sonlandırmayı unutmuştum, bir şekilde şirketin mail gönderimlerini spam olarak işaretlediğim için hatırlatmaların da farkına varamadım. Buna rağmen durumu açıkladım, sadece üyeliği neden sonlandırmak istediğimi sordular, ardından iadesini yaptılar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DigitalOcean:&lt;/strong&gt; Birbirine bağlı birkaç hesabım var. Ödemelerimi PayPal ile yapıyorum; fakat bir hesaptaki borcunuzu, diğer hesaba yüklediğiniz parayla ödeyemiyorsunuz, sanırım hesaplar arası para aktarma da mümkün değil. Ben de yanlışlıkla başka hesaba para yükleyince, durumu mail ile açıkladım. Zannediyorum düzeltmeleri bir gün gibi kısa sürmüştü.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decathlon:&lt;/strong&gt; Çok kötü bir deneyimdi. İnternet üzerinden bisiklet siparişi verdim. Bu siparişlerden bir tanesi elimizde kalmadı diye iptal edildi ve €10 Gutschein hediye kuponuyla birlikte para iade edildi. Sonra diğer bisiklet yanlış model olarak geldi. Onun da parası iade edildi.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Workinton:&lt;/strong&gt; Rutin ödemelerimiz -duyduğum kadarıyla- sistem değişikliği nedeniyle aksadı. Defalarca mail, Whatsapp, çalışanlarım üzerinden fatura talebinde bulundum; en sonunda Twitter üzerinden yazdığımda, gün içinde hizmetin faturası kesildi ve ben de nihayet ödememi yapabildim. Sistem değişikliğinin bir an önce oturmasını diliyorum.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DELL / Alienware:&lt;/strong&gt; Haftalar süren; ama güzel noktalanan bir süreç. Bilgisayarımdaki bir sorun için &lt;a href=&#34;https://twitter.com/AlienwareTech&#34;&gt;@AlienwareTech&lt;/a&gt; Twitter hesabına yazdım. Önce tespit için çeşitli yöntemler denedik, sonra sorunun donanımsal olduğunu anlayınca anlaşmalı oldukları kargo firmasına laptopumu paketli bir şekilde teslim etmelerini, bakım aşamasında sorun hakkında bilgilendireceklerini ve iki hafta içinde geri teslim edeceklerini söylediler. Kapıda verdim, kapıda aldım. Türkiye&amp;rsquo;de buna benzer hizmeti ben Apple&amp;rsquo;da gördüm. DELL hizmet konusunda Apple&amp;rsquo;i aratmadı. Çok memnun kaldım.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Turkcell / Türk Telekom mobil imza:&lt;/strong&gt; Burada tahminimce Workinton&amp;rsquo;daki gibi bir sistem veya altyapı değişikliğine denk geldim. Turkcell, beni mobil imza başvurum için bir o şubeye, bir bu şubeye yönlendirmekten başka hiçbir şey yapmadı. Tek çözüm müşteri hizmetlerini aramaktı ve ben de aramak yerine Türk Telekom&amp;rsquo;u denedim. Türk Telekom&amp;rsquo;un şubeleri ben ilk başvurduğumda mobil imza ne demek onu bile bilmiyorlardı. Ocak 2019 ayında bir kez daha -aramadan-, şubeden mobil imza başvurusunda bulunacağım. Yine olmazsa artık arayacağım. PTTKEP, elektronik posta hizmeti için artık bu zıkkıma ihtiyacım var.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vodafone internet (Almanya):&lt;/strong&gt; Başvuruyu yaptığım gün internetim bağlandı. Ben böyle muhteşem bir bağlatma hızı Türkiye&amp;rsquo;de görmedim, ki Türkiye&amp;rsquo;dekinden de memnundum (2 gün). Yalnız burada €80 internet bağlatma bedelini ödemiş olmanın bir katkısı oldu mu emin değilim. Mesela o parayı vermeyip kendim bağlatmak isteseydim, burada yaşayan arkadaşlarımın deyimiyle 1 ay sürer miydi, bilmiyorum.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Sık kullanılan komutlar için yardımcı script</title>
      <link>https://gokmengorgen.net/blog/komutlar-icin-yardimci-script/</link>
      <pubDate>Fri, 07 Sep 2018 22:46:31 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/komutlar-icin-yardimci-script/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Projeler büyüdükçe operasyonlar artıyor, operasyonları koda döktükçe komutlar, parametreler artıyor. Bunları yardımcı bir scriptle kontrol altına alabiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;Yazının sonunda bu yönteme dair &lt;strong&gt;eleştirim&lt;/strong&gt; ve alternatif önerim var.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/bash-shell-scripting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bir projede frontend geliştiricisinin her bildiğini backend geliştirici bilmek, backend geliştiricisinin her bildiğini devops takımı bilmek zorunda değil. Ve farklı pozisyondaki geliştiricilerin birbirlerini aynı konular için &lt;mark&gt;sürekli meşgul etmemesi&lt;/mark&gt; arzu edilir. Bunun için süreçleri olabildiğince belgelemek ve otomatikleştirmek gerekiyor.&lt;/p&gt;

&lt;h2 id=&#34;basit-bir-amacım-var&#34;&gt;Basit bir amacım var.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Birisi bana alanımla ilgili bir soru sorduğunda, ona olabildiğince basit bir cevap vermek istiyorum.&lt;/li&gt;
&lt;li&gt;Bana soru sorulmadan önce de olası çözümleri kendi bulmayı denesin istiyorum.&lt;/li&gt;
&lt;li&gt;Proje neyle yazılmış olursa olsun, yöntem hep aynı olsun istiyorum.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;örneğin&#34;&gt;Örneğin&amp;hellip;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Soru:&lt;/strong&gt; Geliştirme ortamımı nasıl ayağa kaldırabilirim?
&lt;br /&gt;
&lt;strong&gt;Cevap:&lt;/strong&gt; Bağımlılıkları kur, &lt;code&gt;do start&lt;/code&gt; komutunu çalıştır. Daha fazla bilgi için wiki bakabilirsin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soru:&lt;/strong&gt; Son değişiklikleri geliştirme ortamıma aldım; ancak backend sunucusu çalışmamaya başladı.
&lt;br /&gt;
&lt;strong&gt;Cevap:&lt;/strong&gt; Veritabanı tablosunda değişiklik yaptım, &lt;code&gt;do build &amp;amp;&amp;amp; do restart&lt;/code&gt; komutunu çalıştır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soru:&lt;/strong&gt; Çevirileri güncelledim; ancak arayüzde değişiklikleri göremiyorum.
&lt;br /&gt;
&lt;strong&gt;Cevap:&lt;/strong&gt; &lt;code&gt;do update_translations&lt;/code&gt; komutunu çalıştır. &lt;code&gt;do&lt;/code&gt; yardım çıktısına bir göz at, wiki&amp;rsquo;ye de yazdım.&lt;/p&gt;

&lt;h2 id=&#34;neden-shell-scripting&#34;&gt;Neden Shell scripting?&lt;/h2&gt;

&lt;p&gt;Nedenini &lt;a href=&#34;https://gokmengorgen.net/blog/docker-icin-yardimci-script/&#34;&gt;şurada&lt;/a&gt; yazmıştım. BASH zaten projelerimin çoğunda bir bağımlılık olarak geliyor. İkincisi, shell programlama hem öğrenmesi basit, hem derlemeye gerek kalmadığı için kodlaması zaman kazandırıyor. Yeni bir komut ihtiyacı olduğunda bir fonksiyon ekleyip denemek kolay oluyor. Basit bir örnek üzerinden gidelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash

BLUE=&amp;quot;\\033[1;34m&amp;quot;
GREEN=&amp;quot;\\033[1;32m&amp;quot;
NORMAL=&amp;quot;\\033[0;39m&amp;quot;
RED=&amp;quot;\\033[1;31m&amp;quot;

print_help() {
    echo -e &amp;quot;${BLUE}Available environments${NORMAL}&amp;quot;
    echo &amp;quot;  - DEV (default)&amp;quot;
    echo &amp;quot;  - PROD&amp;quot;
    echo &amp;quot;  - STAGING&amp;quot;
    echo &amp;quot;&amp;quot;
    echo -e &amp;quot;${BLUE}Available commands${NORMAL}&amp;quot;
    echo -e &amp;quot;  &amp;gt; colors \t\t Show available colors.&amp;quot;
    echo -e &amp;quot;  &amp;gt; tell [:words] \t Tell me something.&amp;quot;
}

colors() {
    echo &amp;quot;&amp;quot;
    echo &amp;quot;This is a test command.&amp;quot;
    echo -e &amp;quot;${BLUE}BLUE${NORMAL} - ${GREEN}GREEN${NORMAL} - ${RED}RED${NORMAL}&amp;quot;
}

tell() {
    echo -e &amp;quot;${GREEN}${HOSTNAME}:${NORMAL} $@&amp;quot;.
}

if [ -z &amp;quot;$1&amp;quot; ]
then
    print_help
else
    case $ENV in
        &amp;quot;PROD&amp;quot;)
            env_str=&amp;quot;production&amp;quot;
            ;;
        &amp;quot;STAGING&amp;quot;)
            env_str=&amp;quot;staging&amp;quot;
            ;;
        *)
            env_str=&amp;quot;development&amp;quot;
            ;;
    esac
    echo -e &amp;quot;${BLUE}Environment:${NORMAL} $env_str&amp;quot;
    &amp;quot;$@&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
# terminal
$ ENV=PROD ./do.sh tell &#34;hello, world!&#34;
Environment: production
URRAS: hello, world!.
--&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; terminal&lt;/span&gt;
&lt;span class=&#34;hljs-meta&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; ENV=PROD ./do.sh tell &lt;span class=&#34;hljs-string&#34;&gt;&#34;hello, world!&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: blue;&#34;&gt;Environment:&lt;/span&gt; production
&lt;span style=&#34;color: green;&#34;&gt;URRAS:&lt;/span&gt; hello, world!.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Komutu biraz daha kısaltmak için alias kullanabiliriz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.bashrc
alias do=&amp;quot;ENV=DEV ./do.sh&amp;quot;

# Windows kullanıyorsanız, aşağıdakini deneyin.
# alias do=&amp;quot;ENV=DEV winpty bash do.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
# terminal
$ do colors
Environment: development

This is a test command.
BLUE - GREEN - RED
--&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; terminal&lt;/span&gt;
&lt;span class=&#34;hljs-meta&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; colors&lt;/span&gt;
&lt;span style=&#34;color: blue;&#34;&gt;Environment:&lt;/span&gt; development

This is a test command.
&lt;span style=&#34;color: blue;&#34;&gt;BLUE&lt;/span&gt; - &lt;span style=&#34;color: green;&#34;&gt;GREEN&lt;/span&gt; - &lt;span style=&#34;color: red;&#34;&gt;RED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Biraz daha işe yarar örnekler &lt;a href=&#34;https://gist.github.com/gkmngrgn/48303742353b0b17ae0e5c2d1d24ec3e&#34;&gt;GitHubGist&lt;/a&gt;&amp;lsquo;te bulabilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# terminal
$ do
Available environments
  - DEV (default)
  - PROD
  - STAGING

Available commands
  &amp;gt; build                Build or rebuild services
  &amp;gt; django [:command]    Run a django-specific command
  &amp;gt; docker [:command]    Run a docker command
  &amp;gt; logs [:service]      View output from containers
  &amp;gt; runserver            Run development server
  &amp;gt; shell                Connect to a BASH session from the service inside
  &amp;gt; start                Create and start containers
  &amp;gt; status               List containers
  &amp;gt; stop                 Stop services
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/gkmngrgn/48303742353b0b17ae0e5c2d1d24ec3e.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;problemler&#34;&gt;Problemler&lt;/h2&gt;

&lt;p&gt;Her yeni projenin altında bir &lt;strong&gt;do.sh&lt;/strong&gt; dosyası oluşturmak, projeye özel olmayan kodların bakımı açısından sıkıntılı bir durum. Stiller ve çalışma biçimiyle ilgili yeni bir standart oluşturmak istediğimde, bu değişiklikleri tüm projelere tek tek yansıtmam gerekiyor. Bu nedenle, başka bir komut satırı uygulaması yazıp, bu uygulamayla &lt;strong&gt;do.yaml&lt;/strong&gt; gibi bir ayar dosyasını okumak daha mantıklı olabilir. Böylece projeye özel olmayan kodları dışarıda tutmuş oluruz.&lt;/p&gt;

&lt;p&gt;Peki yok mu böyle bir şey zaten? Elbette var, &lt;a href=&#34;https://pressly.github.io/sup/&#34;&gt;Sup&lt;/a&gt; bu mantıkta çalışıyor. Golang ile yazılmış olmasının avantajı, işletim sisteminize göre komut satırı uygulaması içeren bir binary indirip, basit bir ayar dosyası oluşturup hemen kullanmaya başlayabilmeniz. Oldukça kapsamlı ve güzel bir uygulama, mutlaka denemenizi öneriyorum. Eğer gereksiz karmaşık gelirse benim bu yazıda değindiğim yönteme bakabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bir diğer problem, PowerShell kullananlar için ayrı bir script dosyası hazırlamak zorunda olmanız. Bu konuda çözüm önerileriniz olursa sevinirim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker için yardımcı script</title>
      <link>https://gokmengorgen.net/blog/docker-icin-yardimci-script/</link>
      <pubDate>Sun, 05 Aug 2018 12:11:27 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/docker-icin-yardimci-script/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Docker&amp;rsquo;da projenin çalıştırılacağı ortam sayısı arttıkça, konteynerler çoğaldıkça, yapılandırma dosyalarında satır sayısı uzadıkça komutlar da uzamaya, parametreler artmaya başlıyor. Django shell&amp;rsquo;e nasıl bağlanılıyordu, çeviri dosyalarını nasıl güncelliyorduk, frontend sunucusu hazır mı değil mi nasıl anlıyorduk demek yerine, sık kullanılan komutları basit bir scriptle çalıştırırsak beni rahatlatır diye düşündüm ve internette bununla ilgili bir araştırma yaptım.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Öncelikle bu tip işler için &lt;strong&gt;Makefile&lt;/strong&gt; kullanma önerisi çok hoşuma gitti. Epey basit ve anlaşılır bir sözdizimi var, komut satırında çift tab yapıp autocomplete yapabiliyorsunuz ve bu tip yardımcı özellikler epey verimliliği artırıyor. Zaten amacımız verimliliği artırmak. Ama Windows kullananların Makefile&amp;rsquo;i ayrıca yüklemesi gerekiyor.&lt;/p&gt;

&lt;p&gt;Makefile&amp;rsquo;i yüklemek (veya yükletmek) bir problem değil; ama yine de alternatiflere bakma gereği duydum&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;strong&gt;Docker compose&lt;/strong&gt;&amp;lsquo;da her bir komut için ayrı ayrı servis oluşturma fikri çok mantıklı gelmedi, bir de help çıktısı ile tüm komutları açıklamalarıyla birlikte görmek istiyordum. O nedenle basit bir &lt;strong&gt;shell scripting&lt;/strong&gt; ile zaten bağımlılığımız olan eldeki araçları kullanarak bu işi yapabileceğimizi gördüm.&lt;/p&gt;

&lt;h2 id=&#34;kısaca&#34;&gt;Kısaca&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Komutu parametresiz çalıştırdığımda bana nasıl kullanabileceğimi gösterecek.&lt;/li&gt;
&lt;li&gt;Sistemin production mu, yoksa geliştirme ortamı mı olduğunu ben belirleyeceğim.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Komutu çalıştırırken emin olmak için ortamı ve hatırlatmak için asıl komutu gösterecek.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./do.sh
Available environments
- DEV (default)
- PROD
- STAGING

Available commands
&amp;gt; shell               Open Bash
&amp;gt; start               Create and start containers
&amp;gt; status              List containers
&amp;gt; stop                Stop services
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Öntanımlı ortam, &lt;strong&gt;DEV&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./do.sh status
Environment: development
    Command: docker-compose -f docker-compose.yml -f docker-compose.dev.yml ps

Name                  State      Ports
----------------------------------------------------------------------------------------------
prj_amqp_1            Up         15671/tcp, 15672/tcp, 25672/tcp, 4369/tcp, 5671/tcp, 5672/tcp
prj_backend_1         Exit 137
prj_celery-beat_1     Up
prj_celery-worker_1   Up
prj_db_1              Up         5432/tcp
prj_es_1              Up         9200/tcp, 9300/tcp
prj_frontend_1        Up         0.0.0.0:8080-&amp;gt;8080/tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;STAGING&lt;/strong&gt; ortamını kullanmak istersek:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ENV=STAGING ./do.sh shell
Environment: staging
    Command: docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d db frontend backend ...

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows &lt;strong&gt;PowerShell&lt;/strong&gt;&amp;lsquo;de kullanmak için:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;&amp;gt; $env:ENV = &amp;quot;PROD&amp;quot;;
&amp;gt; bash do.sh status
Environment: production
    Command: docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows&amp;rsquo;ta &lt;strong&gt;Git Bash&lt;/strong&gt; kullanıyorsanız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ENV=STAGING winpty bash do.sh status
Environment: staging
    Command: docker-compose -f docker-compose.yml -f docker-compose.staging.yml ps
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;örnek-script&#34;&gt;Örnek script&lt;/h2&gt;

&lt;p&gt;Yannick PEREIRA-REIS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;lsquo;e teşekkürler. &lt;a href=&#34;http://azmesai.net/&#34;&gt;Az Mesai&lt;/a&gt; slack grubuna da geribildirim için teşekkürler.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/gkmngrgn/48303742353b0b17ae0e5c2d1d24ec3e.js&#34;&gt;&lt;/script&gt;

&lt;!--
# BACKUP IS HERE #

#!/usr/bin/env bash

NORMAL=&#34;\\033[0;39m&#34;
BLUE=&#34;\\033[1;34m&#34;

print_help() {
    echo -e &#34;$BLUE Available environments $NORMAL&#34;
    echo &#34;   - DEV (default)&#34;
    echo &#34;   - PROD&#34;
    echo &#34;   - STAGING&#34;
    echo &#34;&#34;
    echo -e &#34;$BLUE Available commands $NORMAL&#34;
    echo -e &#34;   &gt; shell \t\t Open Bash&#34;
    echo -e &#34;   &gt; start \t\t Create and start containers&#34;
    echo -e &#34;   &gt; status \t\t List containers&#34;
    echo -e &#34;   &gt; stop \t\t Stop services&#34;
}

docker_command() {
    if [ &#34;$ENV&#34; = &#34;PROD&#34; ]
    then
        env_str=&#34;production&#34;
        command=&#34;docker-compose -f docker-compose.yml -f docker-compose.prod.yml $@&#34;
    elif [ &#34;$ENV&#34; = &#34;STAGING&#34; ]
    then
        env_str=&#34;staging&#34;
        command=&#34;docker-compose -f docker-compose.yml -f docker-compose.staging.yml $@&#34;
    else
        env_str=&#34;development&#34;
        command=&#34;docker-compose -f docker-compose.yml -f docker-compose.dev.yml $@&#34;
    fi

    echo -e &#34;$BLUE \rEnvironment:$NORMAL $env_str&#34;
    echo -e &#34;$BLUE \r    Command:$NORMAL $command&#34;
    echo -e &#34;&#34;
    eval $command
}

shell() {
    docker_command run --rm backend_shell bash
}

status() {
    docker_command ps
}

start() {
    docker_command up -d db amqp es frontend celery-beat celery-worker backend
}

stop() {
    docker_command stop
}

if [ -z &#34;$1&#34; ]
then
    print_help
else
    &#34;$@&#34;
fi
--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Yannick PEREIRA-REIS - &lt;a href=&#34;https://ypereirareis.github.io/blog/2015/05/04/docker-with-shell-script-or-makefile/&#34;&gt;Docker with shell script or Makefile&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Git iş akışı</title>
      <link>https://gokmengorgen.net/blog/git-is-akisi/</link>
      <pubDate>Sun, 24 Jun 2018 14:23:26 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/git-is-akisi/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Çalıştığım projelerin çoğunda Git kullanıyoruz ve tüm sürüm çıkarma, projenin teste açılması, testten sonra production sürümünün hazırlanması, acil düzeltilmesi gereken işler olduğunda sürecin esnetilmesi ve bunun gibi birçok iş akışı Git reposu üzerinden yürüyor. Aşama aşama deneyimlerimi paylaşıyorum.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-aşama-prototipe-odaklan&#34;&gt;1. Aşama: Prototipe odaklan&lt;/h2&gt;

&lt;p&gt;Yeni bir projeye başlıyorsunuz, ekip henüz oluşturulmamış veya tek başınasınız ve derhal kabul edilebilir bir prototip&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; hazırlamanız gerekiyor. Öncelikli kural, eğer hep aynı teknik araçları kullanıyorsanız bir öncekilerden &lt;strong&gt;iskelet yaratıp&lt;/strong&gt; olduğu gibi yeni projeye aktarmanız. Çok az kuralımız var:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ana branş &lt;strong&gt;master&lt;/strong&gt; branşıdır ve bu branşın bir sorumlusu olur.&lt;/li&gt;
&lt;li&gt;Kod iskeleti hazırlanıp basit bir yayına alma süreci oturtulana kadar sorumlu, master branşını yönetir.&lt;/li&gt;
&lt;li&gt;Sorumlu, master branşına gönderilen değişiklikleri kontrol altına almak için isterse geliştiricilerin yetkilerini kısıtlar ve herkesin kendi branşında çalışmasını isteyebilir. Bu durumda geliştiriciler kendi dallarındaki çalışmaların master branşına yansıtılması için pull-request oluştururlar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Geliştiriciler kendi branşlarını oluştururken ana branş olarak &lt;strong&gt;master&lt;/strong&gt; branşını kullanırlar ve iş numarasıyla kendi branşlarını isimlendirebilirler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ git checkout master
$ git checkout -b issue-692         # iş numarası 692
$ git checkout -b issue-698.1       # aynı iş için ikinci branş
$ git checkout -b issue-590-gokmen  # aynı iş için ikinci geliştirici
$ git checkout -b hotfix-499        # önemli bir hatayı düzelten branş
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu aşamada tüm değişiklikler &lt;strong&gt;master&lt;/strong&gt; branşına gider ve bu branştan bir prototip sürümü üretilir.&lt;/p&gt;

&lt;h2 id=&#34;2-aşama-test-ve-production-u-ayır&#34;&gt;2. Aşama: Test ve Production&amp;rsquo;u ayır&lt;/h2&gt;

&lt;p&gt;Proje belli bir noktadan sonra artık ekip arasında veya şirket içinde denenmekten çıkıp müşteriye gösterilmeye başlayınca (eğer proje sizin değilse müşterinizin müşterisine), artık &lt;strong&gt;master&lt;/strong&gt; branşında çok esnek olamamaya başlarsınız ve bu branşa bir değişiklik yapmadan önce başka bir branşta test etme ihtiyacı duyarsınız. Bu branşı &lt;strong&gt;develop&lt;/strong&gt; diye isimlendirelim ve bu branşı &lt;strong&gt;master&lt;/strong&gt; branşını baz alarak oluşturalım. Müşteriye &lt;strong&gt;asla&lt;/strong&gt; develop branşından oluşturulmuş bir test sürümü gösterilmeyecek, sadece master branşından üretilecek production sürümünü kullanabilecek, ona erişebilecek.&lt;/p&gt;

&lt;p&gt;Bu aşamada kurallar biraz değişecek:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Birinci aşamadan farklı olarak geliştirme branşımız master yerine &lt;strong&gt;develop&lt;/strong&gt; olacak. Bundan sonra yeni branşlar develop üzerinden oluşturulacak.&lt;/li&gt;
&lt;li&gt;Ancak buna tek istisna acil düzeltilmesi istenen &lt;strong&gt;hotfix&lt;/strong&gt; branşları hariç. Hotfix branşları &lt;strong&gt;master&lt;/strong&gt; branşı üzerinden oluşturulmaya devam edecek.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt; branşının olduğu gibi &lt;strong&gt;develop&lt;/strong&gt; branşının da bir sorumlusu olacak ve bu kişi aynı kişiler de olabilir, farklı kişiler de.&lt;/li&gt;
&lt;li&gt;Bu iki branşın sorumlularının sorumlulukları birbirinden farklı olacak. &lt;strong&gt;develop&lt;/strong&gt; branşının sorumlusu gözden geçirme ve test süreçlerinden sorumlu olacak, &lt;strong&gt;master&lt;/strong&gt; branşının sorumlusu müşteri için stable bir sürüm çıkarmaktan.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu aşamada master branşına gönderilecek her değişiklikten sonra bir etiketleme yapılır:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ git checkout master
$ git merge --no-ff develop
$ git tag 5.6.0
$ git push --all
$ git push --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-aşama-süreci-otomatikleştir&#34;&gt;3. Aşama: Süreci otomatikleştir&lt;/h2&gt;

&lt;p&gt;Bu aşamaya kadar atladığım çok şey olmasına karşın kabaca süreç böyle işliyor. Fakat bir müddet sonra bazı işler sürekli tekrarlamaya başlayacak. Her seferinde sürüm numarasını düzelt, statik dosyaları oluştur ve gerekli yerlere taşı, çeviri dosyalarını güncelle, testleri çalıştır, hatta yeni sürümü belli bir tarih ve saatte yayınla, mail at, haber ver vesaire. Tüm bunları yapan bir script hazırlanabilir, Chef - Puppet - Ansible - Salt gibi otomasyon araçları kullanılabilir, onlarca Continuous Delivery, Continous Deployment, Continuous Integration gibi isimlendirmelerle bu süreçleri otomatikleştiren servisler var. Ben genellikle &lt;a href=&#34;http://bit.ly/2tqY49q-bitbucket-pipelines&#34;&gt;Bitbucket Pipelines&lt;/a&gt; kullanıyorum ve Git barındırma servisi olarak Bitbucket kullanıyorsanız kesinlikle denemelisiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# bitbucket-pipelines.yml
image: python:3.5

pipelines:
  branches:
    master:
      - step:
         deployment: production
         script:
           - pip install fabric
           - fab production deploy
   develop:
     - step:
         deployment: test
         script:
           - pip install fabric
           - fab staging deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artık bundan sonra projenin ihtiyaçlarına iş akışını arada bir gözden geçirmek, gerektiğinde güncellemek gerekir.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;MVP kısaltmasıyla bilinen Minimum Viable Product hakkında detaylı bilgiye &lt;a href=&#34;http://bit.ly/2In1P4m-mvp-rachel-cabakoff&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2018&#39;de keşfettiğim en iyi laptoplar</title>
      <link>https://gokmengorgen.net/blog/2018-en-iyi-laptoplar/</link>
      <pubDate>Thu, 21 Jun 2018 23:38:57 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/2018-en-iyi-laptoplar/</guid>
      <description>

&lt;p&gt;&lt;em&gt;2018&amp;rsquo;in ortasındayız ve henüz Apple yeni ürünlerini tanıtmadı, 8. nesil Intel işlemciler henüz yeteri kadar yaygınlaşmadı, piyasada alternatif olarak 2. Nesil AMD Ryzen 7 işlemcili laptop neredeyse yok. Yazıyı arada yeni keşifler yaptıkça güncellemeyi düşünüyorum, sonraki bilgisayarınız için bir kaynak olur umarım.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/alienware-logo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;güncellemeler&#34;&gt;Güncellemeler&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Monster Tulpar T5 için görüş eklendi.&lt;/li&gt;
&lt;li&gt;Anlatım bozukluğu düzeltmesi.&lt;/li&gt;
&lt;li&gt;Yazıyı kısalttım, yazım hatalarını düzelttim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Öncelikle seçtiğim laptopların genellikle oyun bilgisayarı olduğunu göreceksiniz. Bu, Macbook Pro gibi çok tercih edilen bir ürünün fiyatını baz almamdan kaynaklanıyor. Çok tuhaf tasarımlarda, kütük gibi ağır, taşınması zor alternatiflerle karşılaşacaksınız; ama çok sağlam donanımlara sahipler. Ses, mikrofon ve kamera görüntü kaliteleri iyi oluyor, klavyeleri sağlam, en son bluetooth teknolojilerini destekliyorlar. Yani markalar, Discord ve Twitch ile canlı yayında olup kesintisiz internet üzerinden birden fazla oyuncuyla beraber oyun oynayacak müşterisini memnun etmeye çalışıyorlar. Biz de tabi bir yazılım geliştiricisi olarak bu kaliteden faydalanmış oluyoruz.&lt;/p&gt;

&lt;p&gt;Bu liste Macbook Pro&amp;rsquo;ya alternatif bir liste değil. Böyle bakarsanız, Macbook Pro&amp;rsquo;nun &lt;strong&gt;donanım olarak değil&lt;/strong&gt; ama tasarım, ağırlık olarak ve işletim sistemi avantajı ile diğerlerinden nispeten daha ucuz ve tercih edilebilir olduğunu görebilirsiniz.&lt;/p&gt;

&lt;p&gt;Fiyatlar hakkında net bilgi yok, bir kısmının fiyatı bile değil.&lt;/p&gt;

&lt;h2 id=&#34;1-razer-blade-15-ve-kardeşi-stealth-13&#34;&gt;1. Razer Blade 15&amp;rdquo; ve kardeşi Stealth 13&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Hem tasarım olarak, hem de donanım olarak benim keşfedebildiğim en iyi laptoplar &lt;a href=&#34;https://bit.ly/2MffIUy-razer-blade&#34;&gt;Razer&lt;/a&gt; tarafından üretiliyor. Epey pahalılar; ama ekran kartı harici olsun, küçük de olabilir derseniz &lt;a href=&#34;https://bit.ly/2tuoh6f-blade-stealth&#34;&gt;Stealth&lt;/a&gt; olanına bakabilirsiniz.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/kfFHghqiIAU&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2-alienware-15-r4&#34;&gt;2. Alienware 15 R4&lt;/h2&gt;

&lt;p&gt;Oyun bilgisayarı deyince ilk aklıma gelen bilgisayar markasıydı benim için. Tam bir kütük, eşek ölüsü gibi ağır; ama donanım harika. Fiyat performans konusunda Razer&amp;rsquo;dan daha kötü bir izlenim bırakıyor. Ama benim merak ettiğim Alienware 13 R4&amp;rsquo;ün nasıl olacağı. Çıkacak mı, çıkacaksa ne zaman çıkacak bilmiyorum. Detaylar &lt;a href=&#34;https://bit.ly/2MjBvKJ-alienware-15-r4&#34;&gt;burada&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/74p0deKguZw&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;3-hp-omen-15&#34;&gt;3. HP Omen 15&lt;/h2&gt;

&lt;p&gt;Neredeyse her markanın bir business sınıfı olduğu gibi bir de gaming laptop sınıfı var. Alienware Dell&amp;rsquo;in, &lt;a href=&#34;https://bit.ly/2lsfL3Z-hp-omen-15&#34;&gt;Omen&lt;/a&gt; HP&amp;rsquo;nin. Twitch&amp;rsquo;te sürekli bu serinin reklamı çıkınca inceledim ve özellikleri epey sağlam, henüz satışta değil. Bağlantı portlarının genelde arkada olması masada kablo dağınıklığının göze batmasını bir nebze önlüyor. Alienware bunu epeydir yapıyor.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/PdomXqzi3Lk&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;4-msi-gs65-stealth-thin&#34;&gt;4. MSI GS65 Stealth Thin&lt;/h2&gt;

&lt;p&gt;Alienware alamayan MSI&amp;rsquo;ya. Eskiden öyleydi, şimdi &lt;a href=&#34;http://bit.ly/2tp6a2d-msi-gs65-stealth-thin&#34;&gt;Stealth Thin&lt;/a&gt; fiyatlarına bakıyorum, fark kalmamış. Ya kütük gibi olacak ki ucuz olacak; ya da ince, hafif ve çok güçlü olacak ama pahalı da olacak. Ortası yok.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/Rnpd1G-SQqs&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;5-lenovo-legion-y730&#34;&gt;5. Lenovo Legion Y730&lt;/h2&gt;

&lt;p&gt;Genelde oyun bilgisayarlarında ağırlık konusunu konuşmayız, ama bu Razer&amp;rsquo;dan sonraki en hafif oyun bilgisayarı olabilir. Bağlantı portları Alienware ve HP Omen&amp;rsquo;de olduğu gibi arkada. Işıklandırma epilepsiyi tetikleyecek seviyede. Oyun bilgisayarlarındaki bu aşırı renklendirme olayı iyi mi kötü mü tam emin olamadım. Legion serisi laptop konusunda ne kadar başarılı bilmiyorum; ama mini ITX case &lt;a href=&#34;https://bit.ly/2luWwXF-lenovo-legion&#34;&gt;Legion Cube&lt;/a&gt; serisini çok sevdim. Siz de bir bakın derim.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/-PWm-jVIwb8&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;6-asus-zephyrus-m-gm501&#34;&gt;6. Asus Zephyrus M GM501&lt;/h2&gt;

&lt;p&gt;Marka model isimlendirmeleri çeşitlendikçe takibini yapmak epey zor oluyor. Bu kadar uzun isimlendirmeye gerçekten ihtiyaç var mı bilmiyorum. Ama şu laptopu bir yerden görüp sonra bir daha bakayım desem hatırlamam. &lt;a href=&#34;https://bit.ly/2Mhh6G1-rog-zephrus-m-gm501&#34;&gt;Zephyrus M&lt;/a&gt; bana gereksiz pahalı geldi. Başta da dediğim gibi, bir şey ne kadar tasarım olarak Macbook Pro kalitesinde olmaya başlıyorsa fiyatı o kadar saçmalıyor. Gerçi son zamanlarda Apple&amp;rsquo;in kalitesi de sorgulanmaya başladı; ama teknik destek hala çok güçlü.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9 mb-4&#34;&gt;
  &lt;iframe class=&#34;embed-responsive-item&#34; src=&#34;https://www.youtube.com/embed/X3fQk10pxPU&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;neleri-atladım&#34;&gt;Neleri atladım?&lt;/h2&gt;

&lt;p&gt;Bazı markaları şu sebeplerden atladım:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tamam kütük diyoruz; ama yine de göz tırmalamasın.&lt;/li&gt;
&lt;li&gt;Ağırlık 15&amp;rdquo; için 2.4 kg eh. 3 kg öh, ama 3&amp;rsquo;ü de geçecekse o bilgisayarın Alienware olması lazım.&lt;/li&gt;
&lt;li&gt;Kasada plastik olması dezavantaj değil; ama plastiğin saçma sapan süs ve görüntü için kullanılması benim için anlamsız.&lt;/li&gt;
&lt;li&gt;Klavyede FN tuşlarının (Fn tuşu değil) dörderli gruplar halinde olması, numerik tuşların olmaması veya varsa bile ayrık olması, tuşların arasında boşlukların olması, ışıklandırmanın ötesinde renk seçiminin yapılabilmesi, bunların hepsi bence önemli detaylar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Acer Predator&lt;/strong&gt;, kütüğe tahammülümüz bir yere kadar, sonuçta masada gözümüzün önünde olacak.
&lt;strong&gt;Monster&lt;/strong&gt;, Tulpar T5 inceledim, ne kasasını beğendim, ne klavyesini. Ama diğer hepsinden daha ucuz, belki bu açıdan değerlendirilebilirdi.&lt;/p&gt;

&lt;p&gt;Başka atladığım bir laptop varsa bana bildirirseniz memnun olurum!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 - Sunucunun hazırlanması</title>
      <link>https://gokmengorgen.net/django-notes/10-sunucunun-hazirlanmasi/</link>
      <pubDate>Sun, 17 Jun 2018 01:57:58 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/10-sunucunun-hazirlanmasi/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Buraya kadar hep geliştirme aşamasıyla ilgili konulara değindik. Şimdi backend development tarafından çıkıp biraz devops deployment konusunu ele alalım. Olabildiğince az müdahale ile projemizi dış dünyanın erişimine sunacağız.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker ile sunucumuzu hazırlayacağız.&lt;/li&gt;
&lt;li&gt;Ortama göre (development, production, test) sunucu ve proje ayarlarımızı değiştirebileceğimiz yapılandırma dosyaları oluşturacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://bit.ly/2MVbToM-django-notes-article-10&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gerçekten-docker-a-gerek-var-mı&#34;&gt;Gerçekten Docker&amp;rsquo;a gerek var mı?&lt;/h2&gt;

&lt;p&gt;Elbette hayır. Hatta yeni bir sunucuya da ihtiyacımız yok, şimdiye kadar kullandığımız geliştirme sunucumuzu &lt;a href=&#34;https://bit.ly/2KidzH9-ngrok&#34;&gt;ngrok&lt;/a&gt; gibi basit bir tünelleme aracıyla dışarıdan erişilebilir hale getirip bilgisayarımızı 24 saat açık bırakabiliriz. Ama sunucuyla ilgili bizim birtakım beklentilerimiz var. Mesela sürekli erişilebilir durumda olmasını istiyoruz ve gelen isteklerin kesintisiz, hızlı ve mutlaka alınıp cevaplandırılmasını istiyoruz. Bunun için sunucunun sağlıklı çalışmasını sağlamak ve insan kusurunu &lt;strong&gt;en aza indirmemiz&lt;/strong&gt; gerekiyor.&lt;/p&gt;

&lt;p&gt;Bizim veritabanı değişikliklerini uygulamak için bir script oluşturmamızın bir sebebi var, kaç farklı ortam ve sunucumuz olursa olsun, hata yapma olasılığımızı en aza indirmek. Bir önceki bölümde Docker ile sanallaştırma yaparken de amacımız buydu, production&amp;rsquo;da olabilecek her türlü senaryoyu önce yerelimizde gerçekleştirmek ki deployment aşamasında herhangi bir sürprizle karşılaşmayalım.&lt;/p&gt;

&lt;p&gt;Peki deployment için bir script hazırlamak daha pratik olmaz mıydı? Olabilir elbette, benim halen daha basit projeler için kullandığım bir yöntemdir. Ancak benim size göstermek ve anlatmak istediğim şey, elle müdahaleye en aza indirmek ve bunu mümkün mertebe en kısa zamanda alışkanlık haline getirmek. Çok şey kazanırsınız. Çok yöntem var, hepsini anlatmam zor; ancak Docker ile başlayabiliriz.&lt;/p&gt;

&lt;h2 id=&#34;ortama-göre-sunucu-ayarları&#34;&gt;Ortama göre sunucu ayarları&lt;/h2&gt;

&lt;p&gt;Önceki yazımızda Docker ile geliştirme yapmaya başlamıştık. Bunun için docker-compose.yml dosyası oluşturup Celery, RabbitMQ ve web sunucumuzun otomatik başlamasını sağlamıştık. Ancak bu ayarlarımız tamamen geliştirme ortamına göre hazırlanmıştı. Şimdi bu yapılandırmada ortak kısımları yine &lt;strong&gt;docker-compose.yml&lt;/strong&gt; dosyasında tutacağız, diğer ayarları sunucu ortamına göre ayrı dosyalarda tutacağız&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# docker-compose.yml
version: &#39;3&#39;

services:
  web:
    build: .
  celery:
    build: .
    command: celery worker -l info -A hello_django
    depends_on:
      - amqp
  celery-beat:
    build: .
    command: celery beat -l info -A hello_django --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - amqp
      - celery
  amqp:
    image: rabbitmq:3.7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# docker-compose.dev.yml
version: &#39;3&#39;

services:
  web:  # Test ortamında geliştirme sunucusu kullanmamız bizim için yeterli.
    command: python manage.py runserver 0:8000
    volumes:  # Geliştirme aşamasında konteyner içindeki kodlarımıza kolayca müdahale edebilelim.
      - .:/code
    ports:  # İlgili portları açıyoruz ki projemize erişebilelim.
      - 8000:8000
  celery:
    volumes:
      - .:/code
  celery-beat:
    volumes:
      - .:/code
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# docker-compose.prod.yml
version: &#39;3&#39;

services:
  nginx:  # Production&#39;da Nginx sunucusunu kullanacağız. 8000 portunu dinlemek için.
    image: nginx
    volumes:
     - ./conf/nginx.prod.conf:/etc/nginx/nginx.conf
     - ./assets/static:/assets/static  # Statik dosyalarımız Nginx tarafından sunulacak.
     - ./assets/media:/assets/media  # Media dosyalarımız Nginx tarafından sunulacak.
    restart: always  # Bir sebepten kapanırsa yeniden başlatması için.
    ports:
      - 80:80
  web:  # Production&#39;da geliştirme sunucusu yerine Gunicorn kullanacağız.
    command: gunicorn hello_django.wsgi:application -b 0:8000
    entrypoint: /code/entrypoint.sh  # Bu dosyayı ayrıca inceleyin, otomatik bazı komutları çalıştırmak için.
    restart: always
    volumes:
      - ./db.sqlite3:/code/db.sqlite3
      - ./assets/static:/assets/static
      - ./assets/media:/assets/media
  celery:
    restart: always
  celery-beat:
    restart: always
  amqp:
    restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şunu da yapabilirdik, geliştirme aşamasında DB backend olarak SQLite3 kullanıp, Production&amp;rsquo;da PostgreSQL tercih edebilirdik. Bunu pek önermiyorum, geliştirme ortamınız production&amp;rsquo;u ne kadar iyi taklit ederse bizim için o kadar iyi. Peki bu değişiklikten sonra geliştirme ortamımızı nasıl çalıştıracağız?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose.exe -f docker-compose.yml -f docker-compose.dev.yml up -d
Creating network &amp;quot;hello_django_default&amp;quot; with the default driver
Creating hello_django_web_1    ... done
Creating hello_django_amqp_1 ... done
Creating hello_django_celery_1 ... done
Creating hello_django_celery-beat_1 ... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Güzel. Bu kısım Docker ayarlarımızın ortama göre ayrılması içindi. Ama bir de Django ayarlarımız var.&lt;/p&gt;

&lt;h2 id=&#34;ortama-göre-proje-ayarları&#34;&gt;Ortama göre proje ayarları&lt;/h2&gt;

&lt;p&gt;Bildiğiniz gibi proje ayarlarımızı &lt;strong&gt;settings.py&lt;/strong&gt; dosyamızda saklıyoruz. Bazı öyle ayarlar var ki kesinlikle geliştirme ve production ortamlarında aynı olamaz. Örneğin &lt;strong&gt;DEBUG&lt;/strong&gt; production ortamında kesinlikle &lt;strong&gt;False&lt;/strong&gt; olmalı. Ben bu tip değişiklikleri bir JSON dosyasında saklamayı ve bu özel JSON dosyalarının repo&amp;rsquo;ya yanlışlıkla gönderilmesini önlemek için de .gitignore dosyasına adının yazılmasını öneriyorum. Çünkü bu dosya sadece sunucu ayarları değil, sunucuya özel gizli bazı bilgileri de barındırabilecek. Örneğin &lt;strong&gt;SECRET_KEY&lt;/strong&gt;, veritabanı erişim bilgileri, özel API anahtarları ve bunun gibi. Bunun için, &lt;strong&gt;settings.py&lt;/strong&gt; dosyamıza basit bir kod ekliyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_django/settings.py
...
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 1. Önce proje dizinimizde env.json dosyası var mı araştır.
# 2. Yoksa varsayılan conf/env.dev.json dosyamızı kullan.
env_path = os.path.join(BASE_DIR, &#39;env.json&#39;)
if not os.path.exists(env_path):
    env_path = os.path.join(BASE_DIR, &#39;conf&#39;, &#39;env.dev.json&#39;)
with open(env_path, &#39;r&#39;) as env_file:
    env = json.loads(env_file.read())

DEBUG = env[&#39;DEBUG&#39;]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Böylece &lt;strong&gt;DEBUG&lt;/strong&gt; ayarımız sunucuda oluşturacağımız &lt;strong&gt;env.json&lt;/strong&gt; dosyasından gelecek, repomuzda örneği var:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;DEBUG&amp;quot;: false,
    &amp;quot;MEDIA_ROOT&amp;quot;: &amp;quot;/assets/media&amp;quot;,
    &amp;quot;STATIC_ROOT&amp;quot;: &amp;quot;/assets/static&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Son bir şey daha, dikkatinizi çektiyse Production için hazırladığımız Docker Compose ayarlarımızda fazladan bir konteyner daha kullandık. Bizim 80 portuna erişebilmemiz, statik ve media dosyalarımıza erişebilmemiz için Nginx&amp;rsquo;e ihtiyacımız var. Her sunucunun Nginx yapılandırması farklı olur, örnek olarak bunu inceleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# conf/nginx.prod.json
# detaylı hali repomuzda var.
...
http {
    sendfile on;
    include mime.types;

    server {
        listen 80;
        server_name _;

        ...
        location /static/ {
            root /assets;
            ...
        }

        location /media/ {
            root /assets;
            ...
        }

        location / {
            proxy_pass http://web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;artık-sunucuyu-ayağa-kaldırabiliriz&#34;&gt;Artık sunucuyu ayağa kaldırabiliriz&lt;/h2&gt;

&lt;p&gt;Bu yazıyı konumuz olmadığı için uzatmamak adına, sizlerin VPS tercihinizi zaten yaptığınızı (DigitalOcean iyi seçim), zaten bir domain sahibi olduğunuzu veya bu tip konuları netleştirdiğinizi varsayıyorum. Yapacaklarınız çok basit:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sunucunuza bağlanın, yerelinizde olduğu gibi &lt;a href=&#34;https://bit.ly/2lA43nL-docker-store&#34;&gt;docker&lt;/a&gt; ve &lt;a href=&#34;https://bit.ly/2tA1lSP-docker-compose-install&#34;&gt;docker-compose&lt;/a&gt; kurulumunuzu yapın.&lt;/li&gt;
&lt;li&gt;Kod reponuzu sunucunuza klonlayın, proje dizinine girin.&lt;/li&gt;
&lt;li&gt;Eğer NGINX servisi sunucunuzda çalışıyorsa kapatın, konteyner içinden kullanacağız.&lt;/li&gt;
&lt;li&gt;Ve konteynerları oluşturup çalıştırın.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Çalıştırmak için mutlaka production ayarlarımızı kullanacağız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose.exe -f docker-compose.yml -f docker-compose.prod.yml up -d
Creating network &amp;quot;hello_django_default&amp;quot; with the default driver
Creating hello_django_amqp_1  ... done
Creating hello_django_nginx_1  ... done
Creating hello_django_web_1    ... done
Creating hello_django_celery_1 ... done
Creating hello_django_celery-beat_1 ... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artık sunucuya erişebiliyor olmalısınız.&lt;/p&gt;

&lt;h2 id=&#34;sırada-ne-var&#34;&gt;Sırada ne var?&lt;/h2&gt;

&lt;p&gt;10. yazımızı artık projemizi deploy edebilecek aşamada bitiriyoruz. İşlemediğimiz değinmediğimiz bir çok konu olduğunu biliyorsunuz. Bundan  sonraki aşamalarda biraz da sizden gelen isteklere göre seriyi sürdürmeyi düşünüyorum. Neyi atladıysam, neyi detaylandırmamı istiyorsanız bana ulaşın, destekte bulunun, ben de bu seriyi elimden geldiğince devam ettirmeye çalışacağım. Umarım sizler için güzel bir yardımcı kaynak olmuştur.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Docker-compose&amp;rsquo;un Production için elverişli olup olmadığı konusunda arkadaşlarımın da bazı fikirleri var. Fakat ben küçük projelerde veya başlangıç açamasında çok ciddi bir sıkıntı olacağını düşünmüyorum. Bu konuyla ilgili daha fazla bilgi için mutlaka &lt;a href=&#34;https://bit.ly/2K6aKg3-docker-compose-production&#34;&gt;Docker dökümantasyonuna&lt;/a&gt; bir göz atmanızı öneriyorum, Docker&amp;rsquo;in ne kadar kapsamlı bir şey olduğunu anlamanızı isterim.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>09 - Celery ile periyodik işler</title>
      <link>https://gokmengorgen.net/django-notes/09-celery-ile-periyodik-isler/</link>
      <pubDate>Sun, 10 Jun 2018 00:17:16 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/09-celery-ile-periyodik-isler/</guid>
      <description>

&lt;p&gt;&lt;em&gt;En son, ekranlarımızı güncelleyen bir komut hazırlamıştık. Şimdi bu komutu periyodik olarak çalıştırmamız gerekiyor. Önceki yazımızda cron ile bunu nasıl yapabileceğimize dair değinmiştik; ama biz bunu Celery&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ile yapmayı deneyeceğiz.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker ile, Celery&amp;rsquo;i kolayca kurup kullanabileceğimiz geliştirme ortamını hazırlayacağız.&lt;/li&gt;
&lt;li&gt;Django komutumuzu Celery görev fonksiyonunda kullanabilir hale getireceğiz.&lt;/li&gt;
&lt;li&gt;Admin panelinden görevlerin çalışma zamanlarını ayarlayacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-09&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;
  &lt;h4&gt;Yazıyla ilgili önemli bir uyarı&lt;/h4&gt;

  &lt;p&gt;Konuyu uzatmamak için bir Django komutunu doğrudan Celery görev fonksiyonları içinde kullandım; ama bu çok doğru bir yöntem &lt;strong&gt;olmayabilir&lt;/strong&gt;. Örneğin, komutun zorunlu olmayan parametreleri kod içinde farklı yorumlanabilir, &lt;code&gt;None&lt;/code&gt; beklerken boş bir string alabilirsiniz.&lt;/p&gt;

  &lt;p class=&#34;mb-0&#34;&gt;Bunun yerine, hem Django komutu, hem de Celery fonksiyonunda kullanabileceğiniz &lt;strong&gt;ortak bir kod&lt;/strong&gt; yazmanız daha mantıklıdır.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;neden-celery-ve-neden-docker&#34;&gt;Neden Celery ve neden Docker?&lt;/h2&gt;

&lt;p&gt;Önceki yazımızda hazırladığımız &lt;strong&gt;checkurls&lt;/strong&gt; komutunu periyodik olarak çalıştırabilmek için bir görev yöneticisine ihtiyacımız var. Celery benim bu tip işler için en sık kullandığım araç. Celery ile görevleri yönetmek kolay, deployment süreçlerinde sunucuya daha az müdahale ediliyor, görev çalıştırma zamanlarını admin panelinden programlamak mümkün.&lt;/p&gt;

&lt;p&gt;Bir web projesi geliştirirken &lt;strong&gt;DEVELOPMENT&lt;/strong&gt;, &lt;strong&gt;STAGING&lt;/strong&gt;, &lt;strong&gt;PRODUCTION&lt;/strong&gt; gibi farklı sunucu ortamları hazırlanır&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; ve bu ortamların birbirine olabildiğince benzemesi arzu edilir, böylece çevre farklılıklarından doğacak sorunları önlemiş oluruz. Bunu yapabilmek için sanallaştırmaya ihtiyacımız var ve bunun çeşitli yöntemleri var:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Daha önce ben &lt;strong&gt;Vagrant&lt;/strong&gt; üzerine bir yazı &lt;a href=&#34;https://gokmengorgen.net/blog/vagrant-ile-proje-gelistirme/&#34;&gt;yazmıştım&lt;/a&gt;. Alışıldığında oldukça pratik yöntemdir, hiçbir ayar yapmasanız bile elinizin altında &lt;strong&gt;PRODUCTION&lt;/strong&gt; sunucunuza benzer geliştirme ortamınız olur.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; kullanabilirsiniz, alışması yeni başlayanlar için öğrenme süreci zaman alıyor. Ama uzun vadede hız ve esneklik kazanırsınız.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;WSL&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;VMware&lt;/strong&gt; veya &lt;strong&gt;Virtualbox&lt;/strong&gt; ile sanal işletim sistemi yükleme ve onun üzerinden geliştirme yapabilirsiniz. Olabilecek en kötü sanallaştırma yöntemidir, kısa vadede belki hız kazandırır; ama uzun vadede deployment süreçlerinde canınızı sıkabilir.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ben Docker&amp;rsquo;i seçtim ve merak etmeyin, bu eğitimi devam ettirebilmek için Docker konusuna olabildiğince az değineceğim. Şimdilik &lt;strong&gt;Docker&lt;/strong&gt; ve &lt;strong&gt;Docker Compose&lt;/strong&gt;&amp;lsquo;u yükleyin&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; ve Docker servisinin başladığına emin olun. Sonra repomuzdan &lt;strong&gt;Article-09/hello_django&lt;/strong&gt; dizinine girin ve aşağıdaki komutu çalıştırın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose up --build -d
Creating network &amp;quot;hello_django_default&amp;quot; with the default driver
Building web
Step 1/7 : FROM python:3.6
 ---&amp;gt; d69bc9d9b016
...
Creating hello_django_web_1  ... done
Creating hello_django_amqp_1 ... done
Creating hello_django_celery_1 ... done
Creating hello_django_celery-beat_1 ... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uzun bir çıktı ve nihayetinde dört konteyner ile geliştirme ortamımız hazır. Her konteynerin içinde bir komut çalışıyor, örneğin web&amp;rsquo;in içinde &lt;code&gt;python manage.py runserver 0:8000&lt;/code&gt; komutu çalışıyor, Python yorumlayıcımız artık bu konteynerin içinde ve konteyner ayağa kalktığında &lt;code&gt;http://localhost:8000&lt;/code&gt; bağlantısından projemize de erişebiliyor olacağız. Diğer üç konteynerin birinde Celery için gerekli &lt;strong&gt;AMQP&lt;/strong&gt; hizmeti çalışıyor, diğer ikisinde de görevlerimizi çalıştıran bir &lt;strong&gt;Celery worker&lt;/strong&gt; ve periyodik olarak görev emirlerini oluşturan &lt;strong&gt;Celery beat&lt;/strong&gt; var.&lt;/p&gt;

&lt;h2 id=&#34;celery-ile-ilk-görevin-tanımlanması&#34;&gt;Celery ile ilk görevin tanımlanması&lt;/h2&gt;

&lt;p&gt;Docker konteynerlerimiz hazırlanırken &lt;strong&gt;requirements.txt&lt;/strong&gt; dosyamızdan bağımlılıklarımız da okunuyor. Birkaç yeni bağımlılık ekledik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# requirements.txt

# Görev yönetimi için Celery
celery==4.1.1
# Görev zamanlarını Django Admin panelinden yönetmek
# için ek bir bağımlılık daha
django_celery_beat==1.1.1
# Bu da ekranlarımızı filtrelerken kullanacağımız yardımcı bir bağımlılık
python-dateutil==2.7.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi Celery konteynerimizin nasıl çalıştığını ve hangi komutu çalıştırdığını anlayalım. Önce &lt;strong&gt;settings.py&lt;/strong&gt; dosyamızda Celery ile ilgili kurulum ve ayarlarımızı ekledik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
INSTALLED_APPS = [
    ...
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;django_celery_beat&#39;,  # Admin panelinde görev zamanlarını yönetmek için
    &#39;hello_palette&#39;,
    ...
]
...
CELERY_BROKER_URL = &#39;amqp&#39;  # Docker konteynerimizin adını yazdık.
CELERY_IMPORTS = [
    &#39;hello_uptime.tasks&#39;  # Görevlerimizi bu modülde saklayacağız.
]
# Test mesajlarımız için basit bir email backend yapılandırması.
# Emailleri konsolda göreceğiz.
DEFAULT_FROM_EMAIL = &#39;hello_django@localhost&#39;
EMAIL_BACKEND = &#39;django.core.mail.backends.console.EmailBackend&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sonra, Celery uygulamamızı Django projemiz ile entegre çalışabilmesi için bir script hazırladık:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_django/celery.py
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# Ayarları settings.py dosyamızdan alacak.
os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;hello_django.settings&#39;)

app = Celery(&#39;hello_django&#39;)

# Ayar değişkenlerimiz hep CELERY diye başlayacak.
app.config_from_object(&#39;django.conf:settings&#39;, namespace=&#39;CELERY&#39;)

# Tüm görev fonksiyonlarımızı Celery kendisi tespit edecek.
app.autodiscover_tasks()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_django/__init__.py
from __future__ import absolute_import, unicode_literals

# Bu aslında zorunlu değil; ama görevlerimizi tanımlarken `shared_task` yardımcı
# fonksiyonunu kullanmak, uygulamayı bağımsız hale getiriyor. Örneğini sonra göreceğiz.
from .celery import app as celery_app

__all__ = [&#39;celery_app&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bunu her projede bir seferlik yapıyoruz. Bundan sonraki aşamadak artık görev fonksiyonları yazmak. Şimdi &lt;strong&gt;checkurls&lt;/strong&gt; komutumuzu bir görev fonksiyonu haline getirelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/tasks.py
from celery import shared_task
from django.core.management import call_command


@shared_task
def check_monitors():
    call_command(&#39;checkurls&#39;, mail_clients=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django komutumuzu görev fonksiyonu içinde &lt;code&gt;--mail_clients&lt;/code&gt; parametresiyle çalıştırmış olduk. Fakat önceki yazımızda parametre olarak sadece &lt;strong&gt;urls&lt;/strong&gt; vardı ve onu da zorunlu yapmıştık. Şimdi &lt;code&gt;--mail_clients&lt;/code&gt; parametresine ihtiyacımız var; çünkü herhangi bir ekran erişilemez olduğunda, kullanıcıya bir bildirim epostası göndermek istiyoruz. Komut satırında böyle bir ihtiyacımız yoktu, çünkü her şeyi zaten komut satırında görüyorduk:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/management/commands/checkurls.py
...
class Command(BaseCommand):
    ...
    def add_arguments(self, parser):
        # urls parametresi artık zorunlu değil
        parser.add_argument(&#39;urls&#39;, nargs=argparse.ZERO_OR_MORE, type=str)
        # mail_clients parametresi de tercihe bağlı
        parser.add_argument(&#39;--mail_clients&#39;, action=&#39;store_true&#39;, dest=&#39;mail_clients&#39;)

    def handle(self, *args, **options):
        now = timezone.now()
        offline_urls = []

        # Monitörler kaç dakikada bir kontrol edilmesi istendiyse, en az bir o kadar dakika kadar öncesine göre
        # monitörleri filtreliyoruz. Bir de sadece aktif olanları tekrar kontrol edeceğiz.
        available_monitors = Monitor.objects.filter(is_active=True).filter(
            models.Q(interval=MonitoringInterval.MIN_5,
                     checked_at__lt=now - relativedelta(seconds=MonitoringInterval.MIN_5)) |
            ...
            models.Q(interval=MonitoringInterval.HOUR_6,
                     checked_at__lt=now - relativedelta(seconds=MonitoringInterval.HOUR_6)))
        ...
        # Burada da tüm erişilemeyen ekranlar için her kullanıcıya eposta göndereceğiz.
        if options[&#39;mail_clients&#39;] and offline_urls:
            for url in offline_urls:
                self.mail_clients(url, available_monitors)

    def mail_clients(self, url, available_monitors):
        subject = &amp;quot;[Hello Uptime] Monitor is DOWN: {}&amp;quot;.format(url)
        for monitor in available_monitors.filter(url=url, user__isnull=False):
            message_list = [
                &amp;quot;Hi {},&amp;quot;.format(monitor.user.get_full_name()),
                &amp;quot;The monitor ({}) is currently DOWN.&amp;quot;.format(url),
            ]
            send_mail(
                subject, &#39;\n&#39;.join(message_list), from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[monitor.user.email])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;görevin-periyodik-olarak-çalıştırılması&#34;&gt;Görevin periyodik olarak çalıştırılması&lt;/h2&gt;

&lt;p&gt;Artık sona yaklaşmak üzereyiz. Konteynerimizde &lt;strong&gt;checkurls&lt;/strong&gt; komutumuzu şöyle çalıştırabiliriz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose exec web python manage.py checkurls
https://gokmengorgen.net - 2 monitor(s): online
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi Celery ile görev fonksiyonumuzu çalıştıralım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose exec web python manage.py shell
Python 3.6.5 (default, May  5 2018, 03:09:35)
Type &#39;copyright&#39;, &#39;credits&#39; or &#39;license&#39; for more information
IPython 6.4.0 -- An enhanced Interactive Python. Type &#39;?&#39; for help.

In [1]: from hello_uptime.tasks import check_monitors

In [2]: check_monitors.delay()
Out[2]: &amp;lt;AsyncResult: c2f340dc-...f&amp;gt;

In [3]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Görev asenkron çalıştığı için bir sonuç göremedik, onun için Celery konteynerindeki logları okumamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose logs -f --tail 100 celery
celery_1  | [...] Received task: hello_uptime.tasks.check_monitors[31399a19-...e]
celery_1  | [...] https://gokmengorgen.net - 2 monitor(s):
celery_1  | [...] online
celery_1  | [...] Task hello_uptime.tasks.check_monitors[31399a19-...e] succeeded in 0.8740212999982759s: None
celery_1  | [...] Received task: hello_uptime.tasks.check_monitors[c2f340dc-...f]
celery_1  | [...] Task hello_uptime.tasks.check_monitors[c2f340dc-...f] succeeded in 0.013204600007156841s: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Logları sadeleştirdim yine de çirkin, bu konuya daha sonra değiniriz, ama başarılı bir şekilde çalıştığını gördük. Peki ama nasıl periyodik çalıştırılacak bu görev? Hemen Admin panelimizi açıp bir &lt;strong&gt;Interval&lt;/strong&gt; girdisi oluşturalım:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/celery-admin-interval.jpg&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/celery-admin-interval.jpg&#34; alt=&#34;Celery admin interval&#34; title=&#34;Celery admin interval&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve bir de &lt;strong&gt;Periodic Task&lt;/strong&gt; girdisi:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/celery-admin-periodic-task.jpg&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/celery-admin-periodic-task.jpg&#34; alt=&#34;Celery admin periodic task&#34; title=&#34;Celery admin periodic task&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi tekrar Celery loglarımıza bakıp süreci takip edelim, gerçekten de dakikada bir çalışıyor mu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ docker-compose logs -f --tail 100 celery
celery_1  | [2018-06-12 16:34:08,298: INFO] Received task: hello_uptime.tasks.check_monitors[92ef036c-...3]
celery_1  | [2018-06-12 16:34:09,926: INFO] Task hello_uptime.tasks.check_monitors[92ef036c-5341-...3] succeeded in 1.6s: None
celery_1  | [2018-06-12 16:35:08,298: INFO] Received task: hello_uptime.tasks.check_monitors[e9a53576-...c]
celery_1  | [2018-06-12 16:35:08,305: INFO] Task hello_uptime.tasks.check_monitors[e9a53576-...c] succeeded in 0.01s: None
celery_1  | [2018-06-12 16:36:08,298: INFO] Received task: hello_uptime.tasks.check_monitors[5574fbc6-...0]
celery_1  | [2018-06-12 16:36:08,306: INFO] Task hello_uptime.tasks.check_monitors[5574fbc6-...0] succeeded in 0.01s: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gayet beklediğimiz gibi ilerliyor. Yazıyı 5 dakikaya sığdırmak epey zor oldu; ama seriyi devam ettirmeye enerjim var, merak etmeyin. Sonraki yazımızda görüşmek üzere.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;Celery&lt;/a&gt; websitesinde detaylı bilgi bulabilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Önce development konusunu uptime ile bitirelim, sonraki yazılarda deployment konusuna değineceğiz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://store.docker.com/search?type=edition&amp;amp;offering=community&#34;&gt;Buradan&lt;/a&gt; indirebilirsiniz. MacOS, Windows, Ubuntu, hatta yerele kurmayıp AWS gibi cloud çözümler üzerinden bile Docker kullanmak mümkün.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Daha güçlü PowerShell</title>
      <link>https://gokmengorgen.net/blog/daha-guclu-powershell/</link>
      <pubDate>Fri, 08 Jun 2018 02:00:39 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/daha-guclu-powershell/</guid>
      <description>

&lt;p&gt;Uzun süre Linux dağıtımı kullanmış birisi için komut satırı uygulamaları ve komut istemi Windows&amp;rsquo;ta kanayan yara. Henüz aynı rahatlığı bulamamış olsam da, terminal emulator olarak ConEmu, Shell olarak PowerShell kullanıyorum. Tabi birkaç ayarlamayla birlikte.&lt;/p&gt;

&lt;h2 id=&#34;sorunlar&#34;&gt;Sorunlar&lt;/h2&gt;

&lt;p&gt;En çok kullandığım komut satırı uygulaması Git. Git, Windows&amp;rsquo;ta Bash ile birlikte geliyor. Henüz Windows&amp;rsquo;ta yeniyseniz, Git en iyi Bash ile birlikte çalışıyor, ona bir şans verin. Çünkü PowerShell&amp;rsquo;de ha deyip kullanamıyorsunuz. PowerShell&amp;rsquo;de kullanabilmek için yükleme aşamasında size sunulan seçenekleri ona göre seçmelisiniz. Git ile ilgili diğer ayarlar için &lt;a href=&#34;https://gokmengorgen.net/blog/gelistiriciler-icin-windows-10-pro/&#34;&gt;bu yazıma&lt;/a&gt; mutlaka göz atın.&lt;/p&gt;

&lt;p&gt;Git ile ilgili iki önemli ayar var:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; dosyanızda &lt;strong&gt;autocrlf&lt;/strong&gt; tanımlaması &lt;strong&gt;false&lt;/strong&gt; olmalı. Ben her zaman satır sonu biçimleme tipi olarak &lt;strong&gt;LF&lt;/strong&gt; tercih ediyorum ve daha az baş ağrısı için size de öneririm.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt; gibi çıktılarda Unicode veya Türkçe karakter problemleriyle uğraşmamak için &lt;strong&gt;LC_ALL&lt;/strong&gt; tanımlaması &lt;strong&gt;C.UTF-8&lt;/strong&gt; olmalı.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/powershell-environment-variables.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/powershell-environment-variables.png&#34; alt=&#34;Environment variables&#34; title=&#34;Çevre değişkenleri&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;terminal-emulator-ve-eklentiler&#34;&gt;Terminal emulator ve eklentiler&lt;/h2&gt;

&lt;p&gt;Bir framework, dil veya araca ilk bulaştığımızda nasıl yapıyorsak öyle yapalım ve Google&amp;rsquo;da &lt;strong&gt;Awesome PowerShell&lt;/strong&gt; diye aratalım. Blog yazıları, videolar, eklentiler, paket yöneticileri, IDE&amp;rsquo;ler&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, birçok şey &lt;a href=&#34;https://github.com/janikvonrotz/awesome-powershell&#34;&gt;bulacaksınız&lt;/a&gt;. Eklentilerden en çok kullandığım &lt;a href=&#34;https://github.com/dahlbyk/posh-git&#34;&gt;posh-git&lt;/a&gt;, Git kullanırken çok yardımcı oluyor.&lt;/p&gt;

&lt;p&gt;Tab desteği, daha fazla font desteği ve tek pencerede birden fazla shell desteği için &lt;a href=&#34;https://conemu.github.io/&#34;&gt;ConEmu&lt;/a&gt; kullanıyorum. Font olarak &lt;strong&gt;Meslo Regular for Powerline Nerd&lt;/strong&gt; kullanıyorum. ConEmu ile birlikte prompt&amp;rsquo;u unicode karakterlerle özelleştirmek de mümkün oluyor. Bunun için oh-my-zsh gibi &lt;a href=&#34;https://github.com/JanDeDobbeleer/oh-my-posh&#34;&gt;oh-my-posh&lt;/a&gt; var. Tema olarak Paradox tercih ediyorum:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/powershell-oh-my-posh.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/powershell-oh-my-posh.png&#34; alt=&#34;Oh my posh&#34; title=&#34;Oh my posh&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code içinde de bu tema epey güzel çalışıyor.&lt;/p&gt;

&lt;h2 id=&#34;ve-powershell-core-açık-kaynak&#34;&gt;Ve PowerShell Core açık kaynak&lt;/h2&gt;

&lt;p&gt;Hem &lt;a href=&#34;https://github.com/powershell/powershell&#34;&gt;açık kaynak&lt;/a&gt;, hem multi-platform. Linux dağıtımı kullanıyor olsaydım başka bir shell&amp;rsquo;e ihtiyaç duyar mıydım bilmiyorum; ama sanırım bir şans verirdim.&lt;/p&gt;

&lt;p&gt;İyi denemeler.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;IDE var, PowerShell için?!
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>08 - Komutlar</title>
      <link>https://gokmengorgen.net/django-notes/08-komutlar/</link>
      <pubDate>Sat, 02 Jun 2018 02:05:05 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/08-komutlar/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Web projelerinin en önemli bölümlerinden biri de teknik operasyonlar. Bazen birikmiş sessionları temizlemek, bazen çeviri dosyalarını oluşturmak, bazen de sadece arama motorlarına buradayım demek için komut satırı uygulamalarına ihtiyaç duyarız. Bizim de uptime uygulamasında, ekranları kontrol etmek için benzer bir komut satırı uygulamasına ihtiyacımız var.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;URL&amp;rsquo;lerin erişilebilir olup olmadığını anlayabileceğimiz bir komut yazacağız.&lt;/li&gt;
&lt;li&gt;Ekran durumlarını admin panelinden ve kullanıcı arayüzünden görünür hale getireceğiz.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-08&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ekranları-kontrol-edelim&#34;&gt;Ekranları kontrol edelim&lt;/h2&gt;

&lt;p&gt;Kullanıcılar için Uptime uygulamasını yazdık, kullanıcılar ekranları giriyor, bizim de bu ekranları periyodik olarak kontrol etmemiz gerekiyor. &lt;strong&gt;Periyodik&lt;/strong&gt; kısmını sonraya bırakalım ve önce ekranları kontrol etme kısmına odaklanalım.&lt;/p&gt;

&lt;p&gt;En nihayetinde yapacağımız şey, komut satırından komutumuzu url parametreleriyle çalıştırmak ve o url&amp;rsquo;i kullanan ekran sayısını öğrenmek, url&amp;rsquo;in erişim durumunu kontrol etmek, ve bilgileri veritabanına işlemek:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py checkurls https://blabla.com https://gokmengorgen.net https://radity.com
https://blabla.com - 0 monitor(s): offline
https://gokmengorgen.net - 2 monitor(s): online
https://radity.com - 1 monitor(s): online
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hatırlamak için modelimizi tekrar incelemekte fayda var:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/models.py
...
class Monitor(models.Model):
    user = models.ForeignKey(
        verbose_name=_(&amp;quot;User&amp;quot;), to=settings.AUTH_USER_MODEL, related_name=&#39;monitors&#39;, on_delete=models.CASCADE,
        null=True)
    url = models.URLField(verbose_name=_(&amp;quot;URL&amp;quot;))
    interval = models.PositiveSmallIntegerField(
        verbose_name=_(&amp;quot;Monitoring interval&amp;quot;), choices=MonitoringInterval.get_choices(),
        default=MonitoringInterval.get_default())
    status = models.CharField(verbose_name=_(&amp;quot;Status&amp;quot;), max_length=9, choices=MonitorStatus.get_choices(), blank=True)
    is_active = models.BooleanField(verbose_name=_(&amp;quot;Is active?&amp;quot;), blank=True, default=True)
    checked_at = models.DateTimeField(verbose_name=_(&amp;quot;Checked at&amp;quot;), null=True, editable=False)
    created_at = models.DateTimeField(verbose_name=_(&amp;quot;Created at&amp;quot;), auto_now_add=True)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burada bazı field&amp;rsquo;ları henüz tam anlamıyla kullanmadık:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status:&lt;/strong&gt; URL&amp;rsquo;in erişim durumunu burada saklayacağız.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_active:&lt;/strong&gt; Aktif olmayan ekranları pas geçeceğiz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;checked_at:&lt;/strong&gt; En son ne zaman kontrol ettiğimiz bilgisini saklayacağız.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bizim komutumuz, ekran bilgilerini bu fieldları kullanarak saklayacak. Django belgesinde anlatıldığı&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; üzere özel bir komut yazabilmemiz için, script&amp;rsquo;imizi &lt;strong&gt;management/commands/&lt;/strong&gt; içinde tutmamız gerekiyor&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Komutu hazırlarken bir kuralımız var, bu komutu kullanacak kişinin veya uygulamanın hiçbir şekilde yanlış ve saçmasapan URL girmeyeceğini varsayıyoruz. Bunu varsayabiliriz, çünkü hem uptime uygulamasında, hem admin panelinde URL&amp;rsquo;ler için bir kontrolümüz var ki geçerli URL girilmemişse veritabanına kaydedilemiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/management/commands/checkurls.py
import requests
from django.core.management.base import BaseCommand
from django.utils import timezone
from requests.exceptions import SSLError

from hello_uptime.models import Monitor
from hello_uptime.utils import MonitorStatus


class Command(BaseCommand):
    help = &amp;quot;Checks the urls for monitors&amp;quot;

    def add_arguments(self, parser):
        # Komutumuz çoklu parametre alıyor ve zorunlu. URL&#39;leri komut satırında yazacağız.
        parser.add_argument(&#39;urls&#39;, nargs=&#39;+&#39;, type=str)

    def handle(self, *args, **options):
        # Komutumuz çalıştırıldığında bu fonksiyonu çalıştıracak. Parametrelerimize de buradan erişebileceğiz.
        urls = options[&#39;urls&#39;]

        for url in urls:
            monitors = Monitor.objects.filter(is_active=True, url=url)
            # Komut satırından ekranlar hakkında bilgi almak için birkaç satır ekliyoruz.
            self.stdout.write(self.style.WARNING(&amp;quot;{} - {} monitor(s)&amp;quot;.format(url, monitors.count())), ending=&#39;: &#39;)

            try:
                response = requests.get(url)
                status = MonitorStatus.ONLINE if response.status_code == 200 else MonitorStatus.OFFLINE
            except SSLError:
                status = MonitorStatus.OFFLINE

            monitors.update(status=status, checked_at=timezone.now())  # Sonucu saklıyoruz.
            status_style = self.style.ERROR if status == MonitorStatus.OFFLINE else self.style.SUCCESS
            self.stdout.write(status_style(status))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kullanıcı-ekran-durumlarını-nasıl-görecek&#34;&gt;Kullanıcı ekran durumlarını nasıl görecek?&lt;/h2&gt;

&lt;p&gt;Komutumuzu çalıştırdıktan sonra sonuçları iki yerde göreceğiz. Birincisi admin paneli:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/uptime-monitor-status.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/uptime-monitor-status.png&#34; alt=&#34;Monitor status&#34; title=&#34;Ekranların durumu&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ama admin paneli sadece yetkili kullanıcılar için. Normal kullanıcılar ne yapacak? &lt;strong&gt;main.css&lt;/strong&gt; içine birkaç satır stil ekleyelim ve sonra &lt;strong&gt;dashboard.html&lt;/strong&gt; dosyasını düzenleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* static/main.css */
...
table.monitor-form {
    margin-top: 40px;
}

table.monitor-form th,
table.monitor-buttons th {
    padding-right: 10px;
    text-align: right;
    width: 200px;
}

table.monitor-form td.status-online,
table.monitor-form td.status-offline {
    padding: 0 5px;
    color: white;
}

table.monitor-form td.status-online {
    background-color: green;
}

table.monitor-form td.status-offline {
    background-color: red;
}

table.monitor-buttons {
    margin-top: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/uptime/dashboard.html --&amp;gt;
...
&amp;lt;form action=&amp;quot;{% url &#39;uptime:dashboard&#39; %}&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    {% csrf_token %}
    {{ formset.management_form }}

    {% for form in formset %}
        &amp;lt;table class=&amp;quot;monitor-form&amp;quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
                &amp;lt;td&amp;gt;{% blocktrans with number=forloop.counter %}Monitor {{ number }}{% endblocktrans %}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            {% if form.instance.pk %}
                &amp;lt;tr&amp;gt;
                    &amp;lt;th&amp;gt;{% trans &amp;quot;Status&amp;quot; %}:&amp;lt;/th&amp;gt;
                    &amp;lt;td class=&amp;quot;status-{{ form.instance.status }}&amp;quot;&amp;gt;{{ form.instance.get_status_display }}&amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
                &amp;lt;tr&amp;gt;
                    &amp;lt;th&amp;gt;{% trans &amp;quot;Checked at&amp;quot; %}:&amp;lt;/th&amp;gt;
                    &amp;lt;td&amp;gt;{{ form.instance.checked_at }}&amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
            {% endif %}
            {{ form.as_table }}
        &amp;lt;/table&amp;gt;
    {% endfor %}
    &amp;lt;table class=&amp;quot;monitor-buttons&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;{% trans &amp;quot;Save&amp;quot; %}&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/uptime-monitor-status-frontend.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/uptime-monitor-status-frontend.png&#34; alt=&#34;Monitor status in frontend&#34; title=&#34;Kullanıcı arayüzünde ekranların durumu&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;peki-nasıl-komutu-periyodik-çalıştıracağız&#34;&gt;Peki nasıl komutu periyodik çalıştıracağız?&lt;/h2&gt;

&lt;p&gt;Bunu anlatabilmem için sunucu tarafına biraz değinmemiz gerekiyor. Bu zamana kadar Django projelerini hep Linux dağıtımlarını kullanarak servis ettim ve periyodik çalıştırılacak işler konusunda projemizi barındırdığımız sistemden destek almamız gerekiyor. Birkaç yolu var, en basiti crontab kullanmak, kullanımı çok basit, bir shell script&amp;rsquo;i hazırladıktan sonra sunucuda &lt;code&gt;crontab -e&lt;/code&gt; komutunu çalıştırıp buna benzer bir satır eklememiz gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
5 * * * * django-notes /home/django-notes/sync_monitors.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Böylece 5 dakikada bir ekranları kontrol ederdik. Ama bana bir hafta daha izin verin, size bunu başka bir yöntem olan Celery&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; ile nasıl yapılacağını göstereceğim. İyi günler!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Komutlar çok detaylı bir konu olduğu için, &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/howto/custom-management-commands/&#34;&gt;bu belgeye&lt;/a&gt; mutlaka bakmanızı öneriyorum. Ben burada sadece Uptime uygulamasında gerekli olduğu kadarıyla ele aldım.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Daha önce de belirttiğimiz gibi, bir dizinin python modülü olarak algılanabilmesi için &lt;strong&gt;__init__.py&lt;/strong&gt; dosyasına ihtiyacımız var. Bu her dizin için geçerlidir, iç içe olsa bile.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Celery için mutlaka &lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;sitesine&lt;/a&gt; bir göz atın.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Django modelinde selectbox kullanımı</title>
      <link>https://gokmengorgen.net/blog/django-modelinde-selectbox-kullanimi/</link>
      <pubDate>Sun, 27 May 2018 16:45:30 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/django-modelinde-selectbox-kullanimi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/django-choice-class.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bazen bir model field&amp;rsquo;ında kullanımı sınırlandırmak veya veriyi denetlemek için basit çözümlere ihtiyacımız var. Örneğin, bir araba markası sorulduğunda kullanıcının kafadan veri girişini engellemek veya Opel - opel gibi büyük - küçük farklarından dolayı oluşacak gereksiz seçenek bölünmelerini önlemek gerekir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/django-notes/&#34;&gt;Django notlarım&lt;/a&gt;&amp;lsquo;da sürekli dile getirdiğim konu var, bir şeye ihtiyaç duyduğunuzda:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mutlaka Django&amp;rsquo;nun &lt;a href=&#34;https://docs.djangoproject.com/&#34;&gt;kendi dökümantasyonuna&lt;/a&gt; bir göz atın.&lt;/li&gt;
&lt;li&gt;Mutlaka başkaları nasıl çözmüş diye araştırın.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Django dökümantasyonundaki &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/models/fields/#django.db.models.Field.choices&#34;&gt;bir örneği&lt;/a&gt; alalım ve onun üzerinden gidelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Student(models.Model):
    FRESHMAN = &#39;FR&#39;
    SOPHOMORE = &#39;SO&#39;
    JUNIOR = &#39;JR&#39;
    SENIOR = &#39;SR&#39;
    YEAR_IN_SCHOOL_CHOICES = (
        (FRESHMAN, &#39;Freshman&#39;),
        (SOPHOMORE, &#39;Sophomore&#39;),
        (JUNIOR, &#39;Junior&#39;),
        (SENIOR, &#39;Senior&#39;),
    )
    year_in_school = models.CharField(max_length=2, choices=YEAR_IN_SCHOOL_CHOICES, default=FRESHMAN)

    def is_upperclass(self):
        return self.year_in_school in (self.JUNIOR, self.SENIOR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bazen öyle şeyler oluyor ki, bir modele ihtiyaç duymadan bu seçeneklere çeşitli katmanlarda erişmek gerekebiliyor veya bu tip seçenekleri herhangi bir model tanımlamadan, örneğin formda kullanmak durumunda kalabiliyorsunuz, o zaman da &amp;ldquo;Bunu &lt;strong&gt;models.py&lt;/strong&gt;&amp;lsquo;de tuttuk, öbürünü niye &lt;strong&gt;forms.py&lt;/strong&gt;&amp;lsquo;ye yazdık?&amp;rdquo; diye kendinize sorabilirsiniz. Ben bu tip ortak kullanılan şeyleri, ilgili uygulama içinde &lt;strong&gt;choices.py&lt;/strong&gt; veya &lt;strong&gt;utils.py&lt;/strong&gt; gibi bir dosya oluşturup kullanıyorum. Örneğin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/utils.py

class StudentChoice(object):
    FRESHMAN = &#39;FR&#39;
    SOPHOMORE = &#39;SO&#39;
    JUNIOR = &#39;JR&#39;
    SENIOR = &#39;SR&#39;

    @classmethod
    def get_choices(cls):
        choices = (
            (cls.FRESHMAN, &amp;quot;Freshman&amp;quot;),
            (cls.SOPHOMORE, &amp;quot;Sophomore&amp;quot;),
            (cls.JUNIOR, &amp;quot;Junior&amp;quot;),
            (cls.SENIOR, &amp;quot;Senior&amp;quot;),
        )
        return choices
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/models.py
from hello_student.utils import StudentChoice


class Student(models.Model):
    year_in_school = models.CharField(
        max_length=2, choices=StudentChoice.get_choices(), default=StudentChoice.FRESHMAN)

    def is_upperclass(self):
        return self.year_in_school in (StudentChoice.JUNIOR, StudentChoice.SENIOR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Form&amp;rsquo;da da kullansak, View katmanında da kullansak benim yöntemim hep bu. Seçenekleri gruplamak istersek:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/utils.py
class StudentChoice(object):
    ...
    @classmethod
    def get_choices(cls):
        choices = (
            (&amp;quot;Starting class&amp;quot;, (
                (cls.FRESHMAN, &amp;quot;Freshman&amp;quot;),
                (cls.SOPHOMORE, &amp;quot;Sophomore&amp;quot;),
            )),
            (&amp;quot;Upper class&amp;quot;, (
                (cls.JUNIOR, &amp;quot;Junior&amp;quot;),
                (cls.SENIOR, &amp;quot;Senior&amp;quot;),
            ))
        )
        return choices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/hello-student-choices.gif&#34; alt=&#34;Grouped choices&#34; title=&#34;Gruplanmış seçenekler&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Peki, seçenekleri taşıdık, varsayılan seçenek ayarını da aynı yerde tutsak?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/utils.py
class StudentChoice(object):
    ...
    @classmethod
    def get_default(cls):
        return cls.FRESHMAN
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/models.py

class Student(models.Model):
    year_in_school = models.CharField(
        max_length=2, choices=StudentChoice.get_choices(), default=StudentChoice.get_default())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hatta bir şey daha yapalım, seçenekle ilgili yardımcı fonksiyonları da aynı yerden yönetelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_student/utils.py

class StudentChoice(object):
    ...
    @classmethod
    def is_upperclass(cls, choice):
        return choice in (cls.JUNIOR, cls.SENIOR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu durumda üst sınıf olup olmadığı kontrolünü şöyle yapardık:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;is_upperclass = StudentChoice.is_upperclass(student.year_in_school)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Böylece &lt;strong&gt;models.py&lt;/strong&gt; dosyamızı biraz daha temiz tutmuş olduk. Bunu alışkanlık haline getirirsek, projenin herhangi bir yerinde selectbox, multiple selectbox ve benzeri bir şey ihtiyacımız olduğunda nereye bakacağımızı bilmiş oluruz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>07 - Kullanıcı doğrulama</title>
      <link>https://gokmengorgen.net/django-notes/07-kullanici-dogrulama/</link>
      <pubDate>Fri, 18 May 2018 23:46:49 +0300</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/07-kullanici-dogrulama/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Facebook, Twitter, Linkedin, Yemeksepeti, Markafoni, Hepsiburada, Sahibinden&amp;hellip; Hepsi bizim kim olduğumuzu bilmek isterler. Çünkü bize göre içerik üretirler, hizmet verirler, istediklerimizi sunarlar. Biz de ekranlarımızı kullanıcıya özel yapmak, herkes kendi ekranlarını görsün ve yönetsin istiyorsak, benzer bir kimlik doğrulama sistemi kullanmalıyız.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Django&amp;rsquo;nun en önemli bileşenlerinden biri olan kimlik doğrulama sistemini kullanacağız.&lt;/li&gt;
&lt;li&gt;Kullanıcı giriş yaptı mı yapmadı mı bilgisini tüm Template katmanında layout dosyamızda tutacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-07&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kullanıcı-modelimiz&#34;&gt;Kullanıcı modelimiz&lt;/h2&gt;

&lt;p&gt;Peki bu kadar çok ihtiyaç duyulan bir bileşen için her projede tekrar tekrar yazmak ne kadar doğru olurdu? Django, bazı çok ihtiyaç duyulan şeyleri projenin içinde tutup geliştiriyor, bazen de &lt;a href=&#34;https://github.com/django/django-contrib-comments&#34;&gt;django-contrib-comments&lt;/a&gt; gibi projeden ayırıyor. Django auth&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, en temel gereksinimleri içeren ve geliştirilmeye uygun bir kullanıcı modelini içinde barındırıyor; giriş - çıkış sayfaları, hesap doğrulama, parola sıfırlama gibi temel View katmanlarını da içeriyor ve sadece Template katmanını oluşturarak hızlıca bu sayfaları hazırlayabiliyorsunuz.&lt;/p&gt;

&lt;p&gt;Önce ne yapmak istediğimizi netleştirelim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Kullanıcı uptime uygulamasına gittiğinde -giriş yapmamışsa- giriş sayfasına yönlendireceğiz.&lt;/li&gt;
&lt;li&gt;Her kullanıcı sadece kendi ekranlarını görecek ve yönetecek.&lt;/li&gt;
&lt;li&gt;Çıkış yaptığında anasayfaya yönlendirilecek.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uygulamayı kurmaya her zaman olduğu gibi &lt;strong&gt;settings.py&lt;/strong&gt; dosyasından başlıyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
from django.urls import reverse_lazy  # öncekilerden farklı olarak reverse yerine reverse_lazy
...
INSTALLED_APPS = [
    ...
    &#39;django.contrib.auth&#39;,  # uygulamamız zaten kuruluydu.
    ...
]
...
# Auth settings
LOGIN_REDIRECT_URL = reverse_lazy(&#39;uptime:dashboard&#39;)  # kullanıcıyı giriş yapması için buraya yönlendireceğiz.
LOGOUT_REDIRECT_URL = reverse_lazy(&#39;home&#39;)  # kullanıcı çıkış yaptığında ise buraya yönlendireceğiz.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İlk migrationları çalıştırdığımızda hatırlarsanız, epey bir çıktı &lt;a href=&#34;https://gokmengorgen.net/django-notes/02-model-katmani/#fnref:4&#34;&gt;görmüştük&lt;/a&gt;. Django auth projeyle birlikte kurulu geldiği için aslında veritabanımzda bir &lt;strong&gt;User&lt;/strong&gt; modelimiz var. Zaten olmasa, Admin panelinde giriş yapabilmek için gerekli &lt;strong&gt;super user&lt;/strong&gt;&amp;lsquo;i oluşturamazdık.&lt;/p&gt;

&lt;p&gt;Django auth ile birlikte gelen View katmanımızı kullanabilmek için URL&amp;rsquo;leri bağlamayı unutmayalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_django/urls.py
...
urlpatterns = [
    ...
    path(&#39;accounts/&#39;, include((&#39;django.contrib.auth.urls&#39;, &#39;auth&#39;), namespace=&#39;auth&#39;)),
    ...
]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;model-katmanındaki-değişiklik&#34;&gt;Model katmanındaki değişiklik&lt;/h2&gt;

&lt;p&gt;Şimdi uptime uygulamasının Monitor modeline &lt;strong&gt;user&lt;/strong&gt; adında bir field ekleyelim, gerekli migration dosyamızı oluşturup çalıştıralım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/models.py
...
from django.conf import settings
...
class Monitor(models.Model):
    user = models.ForeignKey(
        verbose_name=_(&amp;quot;User&amp;quot;), to=settings.AUTH_USER_MODEL, related_name=&#39;monitors&#39;, on_delete=models.CASCADE,
        null=True)
    url = models.URLField(verbose_name=_(&amp;quot;URL&amp;quot;))

    class Meta:
        ...
        unique_together = (&#39;user&#39;, &#39;url&#39;)
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yaptığımız değişiklikleri anlayalım:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Öncelikle &lt;strong&gt;url&lt;/strong&gt; field&amp;rsquo;inden &lt;strong&gt;unique&lt;/strong&gt; attribute&amp;rsquo;unu kaldırdık. Eskiden uygulamamızı ziyaret eden herkes tek bir ekran ekleyebiliyorken, şimdi her kullanıcı kendi ekran panelinden aynı URL&amp;rsquo;i takip edebilecek. Ama yine de her kullanıcının kendi panelinde aynı domainin takip edilmesini engellemek için &lt;strong&gt;unique_together&lt;/strong&gt; kullandık.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user&lt;/strong&gt; field&amp;rsquo;i için ForeignKey kullandık, User modelini tanımlarken &lt;strong&gt;AUTH_USER_MODEL&lt;/strong&gt; tanımlamamızı kullandık, eğer Django&amp;rsquo;nun içindeki User modeli bize uymasaydı ve kendimiz bir User model hazırlamış olsaydık, &lt;strong&gt;settings.py&lt;/strong&gt; dosyamızdan &lt;strong&gt;AUTH_USER_MODEL&lt;/strong&gt; tanımlamamız gerekecekti. Şimdilik varsayılan &lt;code&gt;auth.User&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;related_name&lt;/strong&gt; olarak &lt;strong&gt;monitors&lt;/strong&gt; yazdık, kodun içinde elimizde &lt;code&gt;user&lt;/code&gt; olursa, o kullanıcının ekranlarına &lt;code&gt;user.monitors.all()&lt;/code&gt; diyerek erişebileceğiz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;on_delete&lt;/strong&gt; CASCADE, kullanıcımız veritabanından silinirse, ekranları da beraberinde silinecek.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;null&lt;/strong&gt; neden True dedik? Çünkü bu zamana kadar uygulamayı hep &lt;strong&gt;user&lt;/strong&gt; field olmadan kullandık, ya migration için öntanımlı bir kullanıcı tanımlamamız gerekiyordu, ya da Model katmanında &lt;strong&gt;user&lt;/strong&gt; field&amp;rsquo;inin boş olmasına izin verecektik. En kolayı şuan için buna izin vermek.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py makemigrations hello_uptime
Migrations for &#39;hello_uptime&#39;:
hello_uptime/migrations/0002_auto_20180519_1203.py
- Add field user to monitor
- Alter field url on monitor
- Alter unique_together for monitor (1 constraint(s))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py migrate hello_uptime
Operations to perform:
Apply all migrations: hello_uptime
Running migrations:
Applying hello_uptime.0002_auto_20180519_1203... OK
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;template-katmanındaki-değişiklik&#34;&gt;Template katmanındaki değişiklik&lt;/h2&gt;

&lt;p&gt;Tüm sayfalarda kullanıcının giriş yapıp yapmadığı bilgisini gösterebilmek için &lt;strong&gt;base.html&lt;/strong&gt; layout dosyamızda değişiklik yapıyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/base.html --&amp;gt;
{% load i18n %}  &amp;lt;!-- trans ve bloctrans template tag&#39;ı buradan geliyor. Çeviri yapabilmemiz için gerekli. --&amp;gt;

{% block header %} &amp;lt;!-- Neden header block&#39;una aldık? Çünkü bazı sayfalarda bu block&#39;u boş göstereceğiz. --&amp;gt;
    &amp;lt;header&amp;gt;
        &amp;lt;!-- context_processors konusunu hatırlayın, user tüm sayfalarda tanımlı. --&amp;gt;
        {% if user.is_authenticated %}
            &amp;lt;!-- işte size tek satırda örnek blocktrans, with, get_full_name ve default kullanımı. --&amp;gt;
            {% blocktrans with name=user.get_full_name|default:user.username %}Hello,  {{ name }}!{% endblocktrans %}
            &amp;lt;a href=&amp;quot;{% url &#39;auth:logout&#39; %}&amp;quot;&amp;gt;{% trans &amp;quot;Log out&amp;quot; %}&amp;lt;/a&amp;gt;
        {% else %}
            &amp;lt;a href=&amp;quot;{% url &#39;auth:login&#39; %}&amp;quot;&amp;gt;{% trans &amp;quot;Log in&amp;quot; %}&amp;lt;/a&amp;gt;
        {% endif %}
    &amp;lt;/header&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django auth içindeki Login View katmanı, &lt;strong&gt;registration/login.html&lt;/strong&gt; adında bir Template dosyası arıyor. Kendimiz basit bir form oluşturalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/registration/login.html --&amp;gt;
{% extends &#39;base.html&#39; %}

{% load i18n %}

{% block title %}{{ block.super }} - Log in{% endblock %}

{% block header %}{% endblock %} &amp;lt;!-- Bunun içinde zaten bu sayfaya yönlendiren bir link var sadece, gereksiz. --&amp;gt;

{% block content %}
    &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
        {% csrf_token %}

        &amp;lt;fieldset&amp;gt;
            &amp;lt;legend&amp;gt;{% trans &amp;quot;Log in&amp;quot; %}&amp;lt;/legend&amp;gt;

            &amp;lt;table&amp;gt;
                &amp;lt;tbody&amp;gt;
                {{ form.as_table }}
                &amp;lt;tr&amp;gt;
                    &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
                    &amp;lt;td&amp;gt;
                        &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;{% trans &amp;quot;Log in&amp;quot; %}&amp;lt;/button&amp;gt;
                    &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        &amp;lt;/fieldset&amp;gt;
    &amp;lt;/form&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/login-page.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/login-page.png&#34; alt=&#34;Login page&#34; title=&#34;Giriş ekranı&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;view-katmanında-değişiklik&#34;&gt;View katmanında değişiklik&lt;/h2&gt;

&lt;p&gt;Model&amp;rsquo;imiz hazır, Template&amp;rsquo;imiz hazır. Şimdi View katmanımızı kullanıcının giriş yapması için kısıtlamalıyız. Giriş yapmayan kullanıcı uptime uygulamasını göremeyecek, onun yerine login ekranımıza yönlendirilecek, giriş yaptıktan sonra tekrar uptime uygulamasına yönlendirilecek. Bir diğer kural, her kullanıcı kendi ekranlarını görecek, düzenleyecek:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/views.py
...
from django.contrib.auth.mixins import LoginRequiredMixin
...
class UptimeDashboardView(LoginRequiredMixin, ModelFormSetView):  # Yetki kontrolü bundan ibaret :-)
    ...
    def get_queryset(self):
        return Monitor.objects.filter(user=self.request.user).order_by(&#39;id&#39;)
    ...
    def formset_valid(self, formset):
        monitors = formset.save()
        for monitor in monitors:
            monitor.user = self.request.user
            monitor.save()
        ...
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/uptime-with-auth.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/uptime-with-auth.png&#34; alt=&#34;Uptime with auth&#34; title=&#34;Giriş yapılmış kullanıcıyla Uptime uygulaması&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bundan sonraki yazımızda Django ile komut satırı uygulaması yazıp URL&amp;rsquo;lerin durumunu kontrol edeceğiz. Kalın sağlıcakla.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/auth/default/&#34;&gt;Django kimlik doğrulama sistemi&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>06 - Bildirimler ve çeviriler</title>
      <link>https://gokmengorgen.net/django-notes/06-bildirimler-ve-ceviriler/</link>
      <pubDate>Thu, 10 May 2018 14:36:49 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/06-bildirimler-ve-ceviriler/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Uptime ekranımızda URL&amp;rsquo;lerimizi giriyoruz; ama kullanıcı ile bir etkileşim olmuyor. Gerçekten kaydetti mi, bir sorun mu oldu, ne oldu belli değil. Bir de uygulamayı İngilizce geliştiriyoruz; ama Türkçe yerelde Türkçe arayüz görmek istersek ne yapacağız? Birlikte deneyelim, görelim.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Django&amp;rsquo;da bildirim altyapısını (Messages Framework&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) uygulamamızda kullanacağız.&lt;/li&gt;
&lt;li&gt;Tüm sayfalarda bildirim mesajlarının nasıl çalıştığını inceleyerek Template katmanına sayfa bağımsız içerik nasıl enjekte ediliyor, bu konuya değineceğiz.&lt;/li&gt;
&lt;li&gt;Bildirim mesajlarını yerelleştireceğiz.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-06&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;messages-framework&#34;&gt;Messages Framework&lt;/h2&gt;

&lt;p&gt;Django admin panelinde dikkatinizi çekti mi, bir Monitor eklemek, düzenlemek veya silmek istediğimizde aşağıdaki gibi bir bildirim alıyoruz:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/admin-notification.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/admin-notification.png&#34; alt=&#34;Notification in admin panel&#34; title=&#34;Admin panelinde bildirim&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aynısını Uptime ekranında kullanmak için, Django ile birlikte gelen Messages Framework&amp;rsquo;e ihtiyacımız var. İlk kez Django projesi kurduğumuzda bildirimler kullanıma hazır haldedir. Önce basit bir stil düzeltmesi yapalım, bildirim bir hata mesajı mı, yoksa olumlu bir bilgi mi içeriyor, renkle anlaşılsın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* static/main.css */
...
ul.messages {
  margin: 0 0 20px 0;
  padding: 0;
  list-style-type: none;
}

ul.messages li {
    margin-bottom: 5px;
    padding: 15px 20px;
    background-color: #eaeaea;
    color: #222;
}

ul.messages li.error { /* Bildirim tag&#39;ı error ise arkaplan kırmızı */
    background-color: #f7e4e1;
}

ul.messages li.success { /* Bildirim tag&#39;ı success ise arkaplan yeşil */
    background-color: #e1faea;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi Template katmanımızı güncelleyelim. Yalnız hangi dosyayı düzenlediğimize dikkat edin, bildirimler tek bir sayfada olmayacak. Yani tüm sayfalarda kullandığımız layout dosyasına bir kod ekleyeceğiz ve hangi sayfa olursa olsun bildirimler tutarlı görünecek:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/base.html --&amp;gt;
...
{% if messages %}
    &amp;lt;ul class=&amp;quot;messages&amp;quot;&amp;gt;
        {% for message in messages %}
            &amp;lt;li{% if message.tags %} class=&amp;quot;{{ message.tags }}&amp;quot;{% endif %}&amp;gt;{{ message }}&amp;lt;/li&amp;gt;
        {% endfor %}
    &amp;lt;/ul&amp;gt;
{% endif %}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi View katmanımızı güncelleyeceğiz. Yalnız bir şeye dikkat etmenizi istiyorum. Form geçerli veya geçersiz olduğunda bir bildirim mesajı ekliyoruz; ama hiç &lt;code&gt;messages&lt;/code&gt; diye bir içerik verisi tanımlamadığımız halde bu değişkeni tüm Template dosyalarımızda &lt;strong&gt;ortak&lt;/strong&gt; kullanabiliyoruz. Yani &lt;code&gt;messages&lt;/code&gt; değişkenimiz, Template katmanımız yorumlanırken bir şekilde içine enjekte ediliyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/views.py
...
from django.contrib import messages
...

class UptimeDashboardView(ModelFormSetView):
    ...

    def formset_valid(self, formset):
        formset.save()
        # Formlarımızda sorun yoksa bu metod çalışacak.
        # Bildirimimizi messages.success ile ekleyeceğiz.
        messages.success(self.request, _(&amp;quot;The monitors have been updated.&amp;quot;))
        return super().formset_valid(formset)

    def formset_invalid(self, formset):
        # Formlarımızda sorun varsa bu metod çalışacak.
        # Bir hata mesajı göstermek istediğimiz için messages.error kullanıyoruz.
        messages.error(self.request, _(&amp;quot;The monitors could not be updated, please check the form.&amp;quot;))
        return super().formset_invalid(formset)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hiç &lt;code&gt;get_context_data&lt;/code&gt; metoduna dokunmadık, hiç &lt;code&gt;messages&lt;/code&gt; diye içerik verisi eklemedik; ama çalışıyor, nasıl?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/notification-error.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/notification-error.png&#34; alt=&#34;Error message&#34; title=&#34;Hata mesajı&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorumuzun cevabı proje ayarlarında gizli:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
TEMPLATES = [
    {
        ...
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                ...
                &#39;django.contrib.messages.context_processors.messages&#39;,
            ],
        },
    },
]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Context Processors konusuna daha sonra bizzat kendimiz bir örnek yazarak tekrar değineceğiz, şimdilik bu kadarıyla yetinebiliriz&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;çeviriler&#34;&gt;Çeviriler&lt;/h2&gt;

&lt;p&gt;Tarayıcımın dili Türkçe olduğunda, bildirimleri de Türkçe görmek için bizim yerelleştirme&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; yapmamız gerekiyor. Çeviriler yerelleştirmenin bir konusu; ancak bunun dışında tarih biçimleri, parayı ifade eden sayıların yazılışı, sayı ayraçları da yerelleştirmenin konusudur.&lt;/p&gt;

&lt;p&gt;Önce proje ayarlarında çeviri için gerekli birkaç ayar yapmamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
MIDDLEWARE = [
    ...
    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
    &#39;django.middleware.locale.LocaleMiddleware&#39;,  # Sıra önemli.
    &#39;django.middleware.common.CommonMiddleware&#39;,
    ...
]
...
LANGUAGE_CODE = &#39;en&#39;

LANGUAGES = [
    (&#39;en&#39;, &amp;quot;English&amp;quot;),
    (&#39;tr&#39;, &amp;quot;Türkçe&amp;quot;),
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, &#39;locale&#39;),
)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django çeviri için gettext&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; kullanıyor. Projemizde &lt;strong&gt;locale&lt;/strong&gt; dizinini oluşturduktan sonra aşağıdaki komutu çalıştırın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ mkdir locale
$ python manage.py makemessages -l tr
processing locale tr
$ ls locale/tr/LC_MESSAGES/
django.po
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi &lt;strong&gt;django.po&lt;/strong&gt; dosyasını herhangi bir çeviri editörüyle&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; açın ve dosya içeriğini inceleyin. Daha önce uygulamanın bir çok yerinde kullandığımız tanıdık kelimeler göreceğiz:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/poedit.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/poedit.png&#34; alt=&#34;Poedit&#34; title=&#34;Poedit ile çeviri&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Peki, &lt;code&gt;makemessages&lt;/code&gt; komutu bizim çevirilebilir mesajlarımızı nasıl bulabildi? View katmanındaki kodumuzda &lt;code&gt;_()&lt;/code&gt; kullanımına dikkat edin, projenin başından beri hep çevrilebilir mesajları ugettext metodunu kullanarak yazdık:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/views.py
...
from django.utils.translation import ugettext as _
...

class UptimeDashboardView(ModelFormSetView):
    ...
    def formset_valid(self, formset):
        ...
        messages.success(self.request, _(&amp;quot;The monitors have been updated.&amp;quot;))
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Çevrilebilir mesajlarımızı projede kullanabilmemiz için son bir adım kaldı. Aşağıdaki komutla derleme yapmamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py compilemessages
processing file django.po in C:\Users...\hello_django\locale\tr\LC_MESSAGES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geliştirme sunucusunu tekrar çalıştırın, Türkçe yerelini kullanan bir tarayıcıyla uptime uygulamasına gidin ve sadece Kaydet düğmesine basın:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/translation.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/translation.png&#34; alt=&#34;Turkish notification message&#34; title=&#34;Türkçe bildirim mesajı&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bildirim mesajı artık Türkçe. Böylece nasıl çeviri yapabileceğimizi öğrenmiş olduk. Elbette bu konu bununla sınırlı değil, tekil - çoğul ayrımı, çevirilerin kullanıcı tercihleriyle ilişkilendirilmesi, kodu güncelledikçe değişen cümleler ve daha bir çok detay var. Onun için, her zaman Django&amp;rsquo;nun kendi belgesine de bir göz atmakta fayda var. İleride biz de gerektikçe örneklendireceğiz.&lt;/p&gt;

&lt;p&gt;Bir sonraki konumuz, kullanıcı modelleri oluşturup uptime uygulamasını kullanıcıyla ilişkilendirmek olacak.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Messages Framework ile ilgili detaylı bilgiyi &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/contrib/messages/&#34;&gt;burada&lt;/a&gt; bulabilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Örnek bir context processors metodu &lt;a href=&#34;https://github.com/django/django/blob/master/django/contrib/messages/context_processors.py&#34;&gt;burada&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Çeviriler ile ilgili detaylı bilgiye &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/i18n/translation/&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Gettext&amp;rsquo;i &lt;a href=&#34;https://www.gnu.org/software/gettext/&#34;&gt;buradan&lt;/a&gt; indirip yükleyin, çeviri dosyası oluşturmamız için gerekiyor.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Ben &lt;a href=&#34;https://poedit.net/&#34;&gt;Poedit&lt;/a&gt; kullanıyorum, epey iş görüyor.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Stres</title>
      <link>https://gokmengorgen.net/blog/stres/</link>
      <pubDate>Thu, 10 May 2018 13:03:43 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/blog/stres/</guid>
      <description>&lt;p&gt;Üniversiteden arkadaşım derdi:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yemeye vereceğin paraya acımayacaksın.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IT sektöründe çalışanlar masa başı tüm gün oturuyor olsalar da, sürekli zihin yoruyorlar, kafa patlatıyorlar. Epey stresli bir iş yapıyorlar. Kendim için söylediğim şeyleri arkadaşlarıma da söylerim. Gece zoraki çalışma olmaz, hiçbir şey uykundan etmemeli; &lt;strong&gt;stresini yönet&lt;/strong&gt;, zamanını önceden planla, haftasonu neyi seviyorsan onu yap, tutamayacağın sözü verme.&lt;/p&gt;

&lt;p&gt;Hayatında eşinle, dostlarınla güzel bir yemek yemek seni stresinden uzaklaştıracaksa, o paraya ve zamana acımayacaksın. Çocuğunla parkta dondurma yemekse stresi yenecek olan şey, yiyeceksin. Gece bir başına dizi izlemek, kitap okumaksa seni yarına hazırlayacak olan şey, onu yapmalısın.&lt;/p&gt;

&lt;p&gt;Yapın bunu, özellikle &lt;strong&gt;İstanbullular&lt;/strong&gt;. Delirmek üzeresiniz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>05 - Formset</title>
      <link>https://gokmengorgen.net/django-notes/05-formset/</link>
      <pubDate>Sun, 06 May 2018 14:30:19 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/05-formset/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Palette uygulamasıyla MTV Katmanları ve Admin paneli ve CRUD ile ilgili giriş seviyesinde bilgiler edindik. Yeni uygulamamız &lt;strong&gt;Uptime&lt;/strong&gt;. Bu uygulamayla yerelleştirme, sayfa isteklerini yönetme ve yetkilendirme, eposta veya sayfa içi bildirimlerle kullanıcıyı bilgilendirme, unittest, komut satırında çalışan scriptler ve bunlarla ilişkili birçok konuya değineceğiz. Formset ile başlıyoruz.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Uptime uygulamasını yazmaya başlıyoruz. URL&amp;rsquo;leri girmek için Formset kullanıyoruz.&lt;/li&gt;
&lt;li&gt;İhtiyacımızı görecek bir Django eklentisini yükleyip kullanacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-05&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yeni-uygulamamız-uptime&#34;&gt;Yeni Uygulamamız, Uptime&lt;/h2&gt;

&lt;p&gt;Uygulamamızın en temel işlevi, belirlediğimiz URL veya IP adreslerinin erişilebilirliğini belirli aralıklarla kontrol etmek. Piyasa bu işi yapan uptimerobot, pingdom gibi çeşitli hizmetler var. Biz de Django’yu öğrenmek için basit bir prototipini yapmış olacağız. Daha önce öğrendiklerimizi kullanarak şöyle bir başlangıç yapıyoruz:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hello_uptime&lt;/strong&gt; adında yeni bir uygulama oluşturuyoruz (startapp).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;templates/uptime/&lt;/strong&gt; içinde Template katmanımızı oluşturuyoruz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;urls.py&lt;/strong&gt; ile uygulama url’lerimizi tanımlıyoruz, bunun için gerekli View katmanlarımızı hazırlıyoruz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor&lt;/strong&gt; adında ilk modelimizi oluşturuyoruz, model üzerinde denemelerimizi yapmak için Admin class’ımızı hazırlıyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeni bir uygulama yazarken önce bir kabaca başlangıç yapmak size yardımcı olur. Yani hemen Template katmanının içini doldurmaya başlamayın, önce basit bir form olsun yeter. Modelinizi denemek mi istiyorsunuz? Admin panelini kullanın. Şimdi, depodan Article-05 dizinine girin, orada &lt;strong&gt;hello_uptime&lt;/strong&gt; uygulamasını kullanıp hızlı bir başlangıç yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;Uygulamamızı basit bir şekilde tasarlayalım. Sadece bir dashboard’ımız olsun. Orada URL veya IP girebileceğimiz bir formumuz olsun, formu kaydedebilelim ve yine aynı sayfada sonuçları izleyebileceğimiz bir ekranımız olsun.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/views.py
...
class UptimeDashboardView(FormView):
    template_name = &#39;uptime/dashboard.html&#39;  # Template dosyamız.
    form_class = MonitorForm  # Monitor modeli için form.

    def get_success_url(self):
        # Form başarıyla kaydedilirse aynı sayfaya yönlendirilecek.
        # Tek bir View katmanımız olacak. Her şey bir Dashboard&#39;dan ibaret.
        return reverse(&#39;uptime:dashboard&#39;)

    def get_form_kwargs(self):
        # Tekrar hatırlatıyorum, tek bir View katmanımız var. Daha önce kaydettiğimiz
        # Bir Monitor object (instance) varsa onu kullanmaya devam edeceğiz.
        # İstediğimizde tekrar düzenleyebileceğiz. Hepsi tek bir View katmanında.
        kwargs = super().get_form_kwargs()
        instance = Monitor.objects.first()
        kwargs.update({
            &#39;instance&#39;: instance,
        })
        return kwargs

    def form_valid(self, form):
        # ModelForm&#39;u mutlaka inceleyin: hello_uptime/forms.py
        # save metodunun nereden geldiğini ve nasıl çalıştığını anlayın.
        form.save()
        return super().form_valid(form)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View kodumuzu üzerine yazdığım yorumlarla birlikte inceleyin. Şimdi burada bir sorun var. Bir sayfada tek bir Form kullanabiliyoruz. Birden fazla URL girmek istediğimizde ne yapacağız? &lt;a href=&#34;http://localhost:8000/uptime/&#34;&gt;http://localhost:8000/uptime/&lt;/a&gt; üzerinden bir bakalım:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/uptime-form.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/uptime-form.png&#34; alt=&#34;Uptime form&#34; title=&#34;Uptime form&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tek form, tek monitor :-(. Şimdi Formset&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; zamanı.&lt;/p&gt;

&lt;h2 id=&#34;formset-kullanımı-ve-don-t-repeat-yourself&#34;&gt;Formset Kullanımı ve Don&amp;rsquo;t Repeat Yourself&lt;/h2&gt;

&lt;p&gt;Uygulamamız henüz buna hazır değil; ama diyelim ki kullanıcılar projemizde hesap açsınlar ve her kullanıcının en fazla 10 URL&amp;rsquo;i izleme hakkı olsun. Yani bizim uygulama arayüzümüzde 10 form içeren bir form kümesi olsun ve kullanıcılar tek seferde düzenleyebilsin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UptimeDashboardView&lt;/strong&gt; için miras aldığımız &lt;strong&gt;FormView&lt;/strong&gt;, tek bir formu yönetebilmemiz için hazırlanmış kapsamlı bir View class&amp;rsquo;ıdır. Bu durumda elimizde iki seçenek var. Bunlardan &lt;u&gt;birincisi&lt;/u&gt;, FormView&amp;rsquo;i kendi ihtiyacımıza göre özelleştirip yeni bir genel View class&amp;rsquo;ı ve bu tip özel ihtiyaçlarda hep aynı class&amp;rsquo;ı kullanmak. Mesela bu özelleştirilmiş class&amp;rsquo;ın adı &lt;strong&gt;FormSetView&lt;/strong&gt; olabilir.&lt;/p&gt;

&lt;p&gt;Ama &lt;u&gt;bir seçeneğimiz daha&lt;/u&gt; var. Django büyük bir topluluk ve bizim ihtiyaç duyduğumuz şeye başkaları da ihtiyaç duymuş olabilir, hatta bu ihtiyacı birisi Django eklentisi haline getirmiş bile olabilir. &lt;a href=&#34;https://pypi.org/project/django-extra-views/&#34;&gt;PyPI&lt;/a&gt;&amp;lsquo;den arattığımda &lt;strong&gt;django-extra-views&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&amp;lsquo;in aradığımız eklenti olduğunu gördüm. Hemen &lt;strong&gt;requirements.txt&lt;/strong&gt;&amp;lsquo;ye yeni bağımlılığımızı ekliyoruz, kuruyoruz ve View katmanımızı güncelliyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_uptime/views.py
from django.urls import reverse_lazy
from extra_views import ModelFormSetView

from hello_uptime.models import Monitor
from hello_uptime.utils import USER_MONITOR_LIMIT


class UptimeDashboardView(ModelFormSetView):
    # django-extra-views belgesinde deniliyor ki, ayrıca Form veya FormSet
    # oluşturmaya gerek yok, bana modelini, kullanacağın field&#39;ları, success_url&#39;i
    # söyle, gerisini ben hallederim. Halletsin bir zahmet, güzel bir eklenti olmuş.
    fields = (&#39;url&#39;, &#39;interval&#39;, &#39;is_active&#39;)
    model = Monitor
    success_url = reverse_lazy(&#39;uptime:dashboard&#39;)  # Neden reverse değil de reverse_lazy? Bana yazın. ;-)
    template_name = &#39;uptime/dashboard.html&#39;

    def get_queryset(self):
        return Monitor.objects.order_by(&#39;created_at&#39;)  # Sıra bozulmasın diye, oluşturulma sırasına göre aldık.

    def get_factory_kwargs(self):
        kwargs = super().get_factory_kwargs()
        kwargs.update({
            &#39;extra&#39;: USER_MONITOR_LIMIT,  # Dashboard&#39;da 10 input&#39;un hepsini tek seferde göster.
            &#39;max_num&#39;: USER_MONITOR_LIMIT,  # Dashboard&#39;da en fazla 10 input olabilir.
        })
        return kwargs

    def formset_valid(self, formset):  # form_valid formset_valid oldu.
        formset.save()
        return super().formset_valid(formset)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eklenti kullanmasaydık, bu kod bu kadar basit ve temiz olmayacaktı. İyi ki topluluk var! Son bir işimiz kaldı, Template katmanımızı da formset kullanacak şekilde düzenlemeliyiz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/uptime/dashboard.html --&amp;gt;
...
{% block content %}
    &amp;lt;form action=&amp;quot;{% url &#39;uptime:dashboard&#39; %}&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
        {% csrf_token %}  &amp;lt;!-- Sahte istekleri önleyen CSRF template tag&#39;ımız --&amp;gt;
        {{ formset.management_form }} &amp;lt;!-- Formset&#39;imiz ile ilgili max_num, total gibi gizli inputları ekledik. --&amp;gt;
        &amp;lt;table&amp;gt;
            {% for form in formset %}
                &amp;lt;tr&amp;gt;
                    &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
                    &amp;lt;td&amp;gt;
                        &amp;lt;!-- blocktrans i18n template modülünden geliyor. Çeviriler için. --&amp;gt;
                        &amp;lt;!-- Örnek bir blocktrans ve forloop.counter kullanımı --&amp;gt;
                        {% blocktrans with number=forloop.counter %}Monitor {{ number }}{% endblocktrans %}
                    &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
                {{ form.as_table }}
            {% endfor %}
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;{% trans &amp;quot;Save&amp;quot; %}&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/table&amp;gt;
    &amp;lt;/form&amp;gt;
{% endblock %}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Formsetimiz içinde 10 tane form var ve başlangıç datasıyla birlikte artık kullanıma hazır:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/uptime-formset.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/uptime-formset.png&#34; alt=&#34;Uptime formset&#34; title=&#34;Uptime formset&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yalnız bir eksiklik var. Bu uptime uygulamasını kullanıcılarımızın bir hesap açarak kullanmasını istiyoruz ve her kullanıcının 10 ekran izleme hakkı olsun istiyoruz. Bunun için hesap oluşturma, email ile hesap doğrulama, parola yenileme gibi ekranlara ihtiyacımız var ve bu uptime panelini giriş yapan kullanıcıya göre biraz özelleştirmemiz gerekiyor. Sonraki yazımızda görüşmek üzere.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Daha önce söylediğim gibi, bilmediğiniz veya hatırlamadığınız konular için Django belgelerine sık sık bakmayı alışkanlık hale getirmeniz size çok şey kazandırır. &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/forms/formsets/&#34;&gt;Formsets&lt;/a&gt; belgesine mutlaka bakın.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Bir eklentiyi bağımlılık olarak eklemeye karar vermeden önce bakımı iyi yapılıyor mu, unittestleri var mı, belgesi nasıl, kodu temiz mi bir bakmakta fayda var.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>04 - Template Motoru</title>
      <link>https://gokmengorgen.net/django-notes/04-template-motoru/</link>
      <pubDate>Sat, 28 Apr 2018 00:56:53 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/04-template-motoru/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Eğer içeriği dinamik oluşturuyorsak, ortak sayfa bileşenlerini tekrar tekrar yazmak istemiyorsak, Template katmanını biraz daha yakından tanımamız gerekiyor.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Template katmanında layout kullanımına bir örnek göstereceğiz.&lt;/li&gt;
&lt;li&gt;Örnek bir template tag ve filter yazmayı deneyeceğiz.&lt;/li&gt;
&lt;li&gt;Admin panelimizde, göze hoş görünmesi için bir stil düzenlemesi yapacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-04&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;layout-kullanımı&#34;&gt;Layout Kullanımı&lt;/h2&gt;

&lt;p&gt;Template dosyaları yazmaya başladıkça bir şeyleri tekrar etmeye başlayacaksınız. Birçoğunun içinde head ve body var, bir çoğunda ortak stil dosyalarını kullanacaksınız, hatta hangi sayfa olursa olsun bazı meta tagları hiç değişmeyecek. Her Template dosyasında bunları tekrar tekrar yazmak zor ve anlamsız. Onun yerine, &lt;code&gt;base.html&lt;/code&gt; adında bir layout oluşturup diğer Template dosyalarımızda bu layout&amp;rsquo;u kullanabiliriz. İşte biz bu tip işlevleri Django&amp;rsquo;nun arkasındaki Template motoru sayesinde yapabiliyoruz.&lt;/p&gt;

&lt;p&gt;Django birden fazla Template motoru destekliyor. Varsayılan template motoru&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja&lt;/a&gt;&amp;lsquo;ya çok benziyor; fakat Jinja&amp;rsquo;nın tüm özelliklerini desteklemiyor. Ancak dilerseniz onu da tercih edebilirsiniz. Varsayılan Template motoru ile bir layout oluşturmayı deneyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/base.html --&amp;gt;

&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        &amp;lt;!-- block&#39;un içini varsayılan bir değerle doldurabilirsiniz. --&amp;gt;
        &amp;lt;!-- Örneğin burada varsayılan &amp;quot;Hello&amp;quot; --&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Hello{% endblock %}&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/static/main.css&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        {% block content %}{% endblock %}
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basit bir layout örneği. İçinde iki block var ve bu block&amp;rsquo;lar sayesinde içeriği doldurabiliyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/new.html --&amp;gt;

{% extends &#39;base.html&#39; %}&amp;lt;!-- Layout&#39;u ilk satırda tanımlıyoruz. --&amp;gt;
&amp;lt;!-- extends ilk satır olmak zorunda. --&amp;gt;

&amp;lt;!-- title block&#39;unun varsayılanını çağırmak için block.super kullanabilirsiniz. --&amp;gt;
{% block title %}{{ block.super }} - New{% endblock %}

{% block content %}
    &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
        ...
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;yardımcı-fonksiyonlar&#34;&gt;Yardımcı Fonksiyonlar&lt;/h2&gt;

&lt;p&gt;Biz View katmanında, kullanıcılara göstermek istediğimiz içerik verisini hazırlayıp sonra Template katmanı içinde kullanıyoruz. İçerik verisini hazırlarken değer hesaplama, veritabanından veri alma gibi birtakım işlemler gerçekleştiriyoruz. Fakat bazen bu işlemler bir sayfayı ilgilendiren bir işlem değil de, tüm sayfalarda gerektiğinde kullanabileceğimiz bir işlem olabiliyor. Eğer bu işlem, doğrudan Template katmanını ilgilendiren bir işlemse biz burada &lt;strong&gt;Template Tag&lt;/strong&gt; veya &lt;strong&gt;Template Filter&lt;/strong&gt; gibi yöntemleri kullanmayı tercih ediyoruz. Örneğin &lt;code&gt;{% csrf_token %}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hatırlarsanız Palette uygulamamızda yeni resim yüklemek için hazırladığımız formda bu Template Tag&amp;rsquo;i kullanmıştık. Başında ve sonunda &lt;code&gt;{%&lt;/code&gt; ve &lt;code&gt;%}&lt;/code&gt; olması onun bir Template Tag olduğunu gösterir. Aslında &lt;strong&gt;if&lt;/strong&gt;, &lt;strong&gt;for&lt;/strong&gt;, &lt;strong&gt;with&lt;/strong&gt; gibi temel programlama dili anahtar kelimeleri de Template katmanında bir Tag olarak isimlendirilebilir. Ancak eğer &lt;code&gt;{{ color|default_if_none:&amp;quot;#fff&amp;quot; }}&lt;/code&gt; şeklinde bir kullanım görürseniz, burada &lt;code&gt;default_if_none&lt;/code&gt; adında bir Template Filter kullanıldığını anlayabilirsiniz. Filter&amp;rsquo;in temel işlevi değişkenin kendisini modifiye etmek. Yani burada &lt;strong&gt;color&lt;/strong&gt; değişkeni yoksa &lt;strong&gt;#fff&lt;/strong&gt; değerini elde ederiz.&lt;/p&gt;

&lt;p&gt;Django&amp;rsquo;yla birlikte kullanışlı birçok &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/templates/builtins/&#34;&gt;Template Tag ve Filter&lt;/a&gt; geliyor. Fakat bazen özel ihtiyaçlar üçüncü parti bir Django eklentisi kullanmak gerekebiliyor veya kendimiz bu ihtiyacı gideren basit bir Template Tag veya Filter yazmak isteyebiliriz.&lt;/p&gt;

&lt;p&gt;Palette uygulamamıza dönelim ve renkleri kutu kutu göstermeyi deneyelim. Önce &lt;strong&gt;main.css&lt;/strong&gt; dosyamıza basit bir stil ekleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* static/main.css */

.colors {
  margin: 25px 0;
}

.colors .color-item { /* renk kutuları */
  display: inline-block;
  width: 50px;
  height: 50px;
  border: 2px solid #eee;
  background-color: #555;
  margin-right: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sonra &lt;strong&gt;detail.html&lt;/strong&gt; dosyasında renk kutuları göstermeye çalışalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/palette/detail.html --&amp;gt;

...
&amp;lt;div class=&amp;quot;colors&amp;quot;&amp;gt;
    {% for color in palette.colors %}
        &amp;lt;span class=&amp;quot;color-item&amp;quot; style=&amp;quot;background-color: {{ color }};&amp;quot; title=&amp;quot;{{ color }}&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    {% endfor %}
&amp;lt;/div&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bir sorunumuz var. &lt;code&gt;palette.colors&lt;/code&gt; field&amp;rsquo;imizin veri tipi liste değil. O sadece virgülle ayrılmış renk kodlarını içeren string. Bizim string&amp;rsquo;i list&amp;rsquo;e çevirecek bir filtreye ihtiyacımız var. Burada hemen ilk filtremizi yazmaya başlayabiliriz. hello_palette uygulamasının içinde &lt;strong&gt;templatetags&lt;/strong&gt; dizini oluşturup içinde &lt;strong&gt;__init__.py&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; ve &lt;strong&gt;palette_tags.py&lt;/strong&gt; adında iki dosya oluşturalım ve ilk filtremizi yazalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/templatetags/palette_tags.py

from django import template

register = template.Library()


@register.filter
def as_list(value):
  return value.split(&#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu sayede renk listesini şu şekilde elde edebiliriz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/palette/detail.html --&amp;gt;

...
    {% for color in palette.colors|as_list %}
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi bir soru. Bu renk listesine sadece Template katmanında mı ihtiyaç duyacağız? Yani bir Template Filter fonksiyonunu Template katmanı dışında bir yerde kullanmak istesek ne kadar hoş olurdu? İleriye dönük düşünürsek bunu Model katmanında da çözebilirdik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/models.py

class Palette(models.Model):
    ...

    @property
    def colors_as_list(self):
        return self.colors.split(&#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Böylece Template katmanında şu şekilde kullanabilirdik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/palette/detail.html --&amp;gt;

...
    {% for color in palette.colors_as_list %}
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/color-boxes.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/color-boxes.png&#34; alt=&#34;Color boxes&#34; title=&#34;Renk kutuları&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;admin-panelinde-stil-düzenlemesi&#34;&gt;Admin Panelinde Stil Düzenlemesi&lt;/h2&gt;

&lt;p&gt;Admin panelinde de renk kodlarını güzel göstermek için SVG ile basit bir stil denemesi yapsak nasıl olur? Bunun için
ilgili Admin class&amp;rsquo;ında özel bir column fonksiyonu yazmamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/admin.py

...
from django.utils.html import format_html
...


@admin.register(Palette)
class PaletteAdmin(admin.ModelAdmin):
    list_display = (&#39;__str__&#39;, &#39;get_colors&#39;, &#39;created_at&#39;, &#39;is_deleted&#39;)  # colors&#39;u sildik, fonskyionun adını yazdık.
    ...

    def get_colors(self, obj):
        # buradaki obj aslında bir Palette instance&#39;i. Böylece renk kodlarımıza erişebileceğiz.
        # models.py&#39;deki colors_as_list metodumuzu burada da kullanabiliyoruz.
        # format_html, HTML tag&#39;lerini HTML dosyasında doğru şekilde çevirebilmek için gerekli.
        circle_template = &#39;&amp;lt;svg width=16 height=16&amp;gt;&amp;lt;circle cx=8 cy=8 r=5 style=&amp;quot;fill: {};&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;&amp;lt;/svg&amp;gt;&#39;
        return format_html(&#39;&#39;.join(circle_template.format(c) for c in obj.colors_as_list))

    get_colors.short_description = &amp;quot;Colors&amp;quot;  # Column için isim veriyoruz.
    get_colors.allow_tags = True  # HTML tag&#39;i kullanımına izin veriyoruz.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/admin-color-circles.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/admin-color-circles.png&#34; alt=&#34;Admin color circles&#34; title=&#34;Admin panelinde renk çemberleri&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi biraz daha göze hoş geliyor, değil mi? Böylece basit bir uygulamamızı tamamlamış olduk. Bundan sonra farklı uygulamalarla sizi Django&amp;rsquo;nun farklı güzellikleri konusunda bilgilendirmek istiyorum. Kısa zamanda tekrar görüşmek üzere.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/templates/&#34;&gt;Buradan&lt;/a&gt; Template diline hızlı başlangıç yapabilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Bir dizinin Python paketi olduğunu anlatabilmemiz için __init__.py dosyasına ihtiyacımız var.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>03 - Admin Paneli</title>
      <link>https://gokmengorgen.net/django-notes/03-admin-paneli/</link>
      <pubDate>Sun, 22 Apr 2018 00:02:51 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/03-admin-paneli/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Model objemizi oluşturduktan sonra hemen veri girişi yapsak, denesek, kontrol etsek nasıl olurdu? Django&amp;rsquo;nun en güzel yanlarından biri olan &lt;strong&gt;Django Admin&amp;rsquo;e&lt;/strong&gt; el atalım mı? Önce modelimizde biraz değişiklik yapmamız gerek.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;İkinci bir migration script oluşturma denemesi yapacağız.&lt;/li&gt;
&lt;li&gt;Model katmanında ilk sinyal denememizi yapacağız.&lt;/li&gt;
&lt;li&gt;Palette modelimizi &lt;strong&gt;Django Admin&lt;/strong&gt; panelinde göreceğiz.&lt;/li&gt;
&lt;li&gt;Resim yükleyebilmek için form sayfası, resmin renk kodlarını görüntüleyebilmek için detay sayfası hazırlayacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-03&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bir-migration-daha&#34;&gt;Bir Migration Daha&lt;/h2&gt;

&lt;p&gt;Önceki konuyu pekiştirmek için &lt;strong&gt;Palette&lt;/strong&gt; modelimizde birkaç değişiklik yapıp yeni bir migration script oluşturalım. Önce &lt;code&gt;is_deleted&lt;/code&gt; adında yeni bir field ekleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/models.py
...
class Palette(models.Model):
    ...
    colors = models.TextField(verbose_name=_(&amp;quot;Colors&amp;quot;), editable=False)  # Bunu admin panelinden düzenlenemez hale getirdik.
    is_deleted = models.BooleanField(verbose_name=_(&amp;quot;Is deleted?&amp;quot;), blank=True, default=False)  # işte yeni field&#39;imiz.
    ...

    def __str__(self):  # Bunu hatırlayın, admin panelinde kullanacağız.
        return self.image.name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py makemigrations hello_palette
Migrations for &#39;hello_palette&#39;:
  hello_palette/migrations/0002_auto_20180422_0757.py
    - Add field is_deleted to palette
    - Alter field colors on palette
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py migrate hello_palette
Operations to perform:
  Apply all migrations: hello_palette
Running migrations:
  Applying hello_palette.0002_auto_20180422_0757... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Neden &lt;code&gt;colors&lt;/code&gt; field&amp;rsquo;i düzenlenemez yapıldı?&lt;/strong&gt; Çünkü Admin panelinden veya herhangi bir arayüzden bu fieldin değiştirilmesini, doldurulmasını istemiyoruz. Bu uygulamada amacımız bir resim dosyasının renk paletini otomatik olarak oluşturmak. &lt;strong&gt;hello_palette&lt;/strong&gt; uygulaması içindeki &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-03/hello_django/hello_palette/color_parser.py&#34;&gt;&lt;strong&gt;color_parser.py&lt;/strong&gt;&lt;/a&gt; bize bu konuda yardımcı olacak; ancak &lt;strong&gt;colorific&lt;/strong&gt; adında bir bağımlılığı var, onu kurmayı unutmayalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# requirements.txt
...
colorific==0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peki bu &lt;strong&gt;color_parser&lt;/strong&gt; modülümüzü nasıl kullanacağız? Biz istiyoruz ki yeni bir resim yüklendiğinde, &lt;strong&gt;ilk kez&lt;/strong&gt; kaydedildiğinde renk paleti oluşturulsun. Yani, bizim bir model objesinin kaydetme aşamasını yakalamamız ve o an ek bir işlem daha yaptırmamız gerekiyor. İşte bunu biz sinyal metodlarıyla&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; yapıyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/models.py
...
from django.dispatch import receiver
from hello_palette.color_parser import ColorParser
...
@receiver(models.signals.post_save, sender=Palette)
def parse_colors(sender, instance, created, **kwargs):
    if not created:
        return  # don&#39;t do anything

    instance.colors = ColorParser(image_path=instance.image.path).parse_colors()
    instance.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eğer ilk kez bir Palette objesi kaydediliyor veya oluşturuluyorsa, &lt;strong&gt;colors&lt;/strong&gt; field&amp;rsquo;imizin içi HEX kodlarıyla doldurulacak. Şimdi admin paneline geçmeden önce son bir şey daha yapmamız gerekiyor.&lt;/p&gt;

&lt;h1 id=&#34;media-ayarlarımız&#34;&gt;Media Ayarlarımız&lt;/h1&gt;

&lt;p&gt;Static ve Media arasındaki temel fark; static adı üzerinde statiktir, genellikle frontend dosyalarımızı ve içeriği veya konumu değişmeyen dosyalar için kullanırız. Ancak bir de dışarıdan uygulama için yüklediğimiz dosyalar var. Bunlar media dosyalarıdır ve bunlar için ayrıca ayar yapmamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
MEDIA_URL = &#39;/media/&#39;
MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# django_palette/urls.py
from django.conf import settings
from django.conf.urls.static import static
...

urlpatterns = [
    ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;django-admin&#34;&gt;Django Admin&lt;/h1&gt;

&lt;p&gt;Bir proje oluşturduğunuzda Django Admin kurulu geliyor. Bizim şuan tek yapmamız gereken, bir tam yetkili kullanıcı oluşturmak. Bu sayede Admin paneline giriş yapabileceğiz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py createsuperuser
Username (leave blank to use &#39;gokmen&#39;):
Email address: gokmen@alageek.com
Password:
Password (again):
Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geliştirme sunucumuzu çalıştırıp &lt;code&gt;https://localhost:8000/admin/&lt;/code&gt; adresine gidelim ve girişimizi yapalım:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/django-admin.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/django-admin.png&#34; alt=&#34;Django admin panel&#34; title=&#34;Django Admin panelimiz&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Admin panelini ilk açtığınızda sadece &lt;strong&gt;Users&lt;/strong&gt; ve &lt;strong&gt;Groups&lt;/strong&gt; olacak, &lt;strong&gt;Palette&lt;/strong&gt; modelimizi de ekleyebilmek için bizim bir admin kaydı yapmamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/admin.py
from django.contrib import admin
from hello_palette.models import Palette


@admin.register(Palette)
class PaletteAdmin(admin.ModelAdmin):
    list_display = (&#39;__str__&#39;, &#39;colors&#39;, &#39;created_at&#39;, &#39;is_deleted&#39;)
    list_filter = (&#39;is_deleted&#39;,)
    date_hierarchy = &#39;created_at&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi buna bir göz atalım, biz dedik ki:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resim dosyası adı, renkler, ve resmin yüklenme tarihini admin panelinde kolon olarak göster. &lt;code&gt;__str__&lt;/code&gt; metodunu modelimizde görebilirsiniz, tekrar inceleyin, resim dosyası adını döndürüyor.&lt;/li&gt;
&lt;li&gt;Resmin silinip silinmediğine göre filtrelememe izin ver. Dışarıdan bir kullanıcının gerçekten veri silmesine izin vermeyeceğiz, &lt;strong&gt;soft delete&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Resimlerin yüklenme tarihine göre filtrelememe de izin ver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Böylece admin panelinde yeni bir Palette objesi eklemek istediğimizde biraz daha özelleştirilmiş bir panel göreceğiz:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/palette-in-admin.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/palette-in-admin.png&#34; alt=&#34;Palette in admin&#34; title=&#34;Palette Admin Paneli&#39;nde&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Renk kodlarımızı görebiliyoruz! Fakat admin paneli normal kullanıcılar için değil, biz burada sadece modelimizi test etmek istedik. Normal yetkisiz kullanıcılar için MTV konusunu hatırlayarak birkaç View yazmamız gerekiyor.&lt;/p&gt;

&lt;h2 id=&#34;mtv&#34;&gt;MTV&lt;/h2&gt;

&lt;p&gt;Bir kullanıcının bir resim yükleyip renk paletini oluşturması için bir form sayfası, bir de sonucu gösterebileceğimiz detay sayfasına ihtiyacımız var, önce View katmanı hazırmış gibi url&amp;rsquo;leri yazıyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_django/urls.py
...
urlpatterns = [
    path(&#39;&#39;, view=HomeView.as_view(), name=&#39;home&#39;),
    path(&#39;palette/&#39;, include(&#39;hello_palette.urls&#39;, namespace=&#39;palette&#39;)),  # namespace&#39;in palette olmasına dikkat
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Palette uygulamamıza &lt;strong&gt;&lt;a href=&#34;http://localhost:8000/palette/&#34;&gt;http://localhost:8000/palette/&lt;/a&gt;&lt;/strong&gt; üzerinden erişebileceğiz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/urls.py
from django.urls import path
from hello_palette.views import PaletteDetailView, PaletteFormView

app_name = &#39;palette&#39;

urlpatterns = [
    path(&#39;&#39;, view=PaletteFormView.as_view(), name=&#39;new&#39;),  # namespace `palette`, name `new`
    path(&#39;&amp;lt;int:pk&amp;gt;/&#39;, view=PaletteDetailView.as_view(), name=&#39;detail&#39;),  # namespace `palette`, name `detail`
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PaletteFormView&amp;rsquo;in&lt;/strong&gt; daha önceki View katmanı örneğinden farklı bir URL yapısı yok, ancak &lt;strong&gt;PaletteDetailView&lt;/strong&gt; için &lt;strong&gt;pk&lt;/strong&gt; değerine ihtiyacımız var. Bu değer ile istediğimiz &lt;strong&gt;Palette&lt;/strong&gt; model objesine erişebileceğiz. &lt;strong&gt;PaletteFormView&lt;/strong&gt; önceki örnekten farklı olarak bir forma&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; ihtiyacı var:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms
from hello_palette.models import Palette


class PaletteForm(forms.ModelForm):
    class Meta:
        model = Palette  # ModelForm&#39;un güzelliği, model fieldlarımızdan form üretmek.
        exclude = (&#39;is_deleted&#39;,)  # bu field sadece admin için gerekli, kullanıcı için gereksiz.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View katmanımız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# hello_palette/views.py
from django.shortcuts import get_object_or_404, redirect
from django.views.generic import DetailView, FormView
from hello_palette.models import Palette
from hello_palette.forms import PaletteForm


class PaletteFormView(FormView):
    template_name = &#39;palette/new.html&#39;  # template dosyamızı sonra oluşturacağız.
    form_class = PaletteForm

    def form_valid(self, form):
        palette = form.save()  # form başarılıysa, kaydet.
        return redirect(&#39;palette:detail&#39;, palette.pk)  # namespace ve name&#39;ları işte burada kullanıyoruz.


class PaletteDetailView(DetailView):
    template_name = &#39;palette/detail.html&#39;  # template dosyamızı sonra oluşturacağız.

    def get_object(self, queryset=None):
        pk = self.kwargs.get(&#39;pk&#39;)  # URL&#39;deki pk&#39;i hatırladınız mı?
        return get_object_or_404(Palette, pk=pk, is_deleted=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Model katmanı tamam, View katmanı tamam, şimdi Template katmanımızı tamamlamamız gerekiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/palette/new.html --&amp;gt;
...
&amp;lt;body&amp;gt;
    &amp;lt;!-- enctype resim dosyası yükleyebilmek için --&amp;gt;
    &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
        {% csrf_token %} &amp;lt;!-- Cross Site Request Forgery Protection --&amp;gt;
        &amp;lt;ul&amp;gt;
            {{ form.as_ul }} &amp;lt;!-- PaletteForm burada --&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Upload&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- templates/palette/detail.html --&amp;gt;
...
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;img src=&amp;quot;{{ palette.image.url }}&amp;quot; height=250 /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;p&amp;gt;{{ palette.colors }}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi resim yükleyip renk kodu almayı deneyebiliriz, bunun için super user olmaya ihtiyacımız yok. Biraz işlevsiz bir arayüz; ancak MTV için yeterli:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/palette-1.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/palette-1.png&#34; alt=&#34;Palette form view&#34; title=&#34;Palette form ekranı&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/palette-2.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/palette-2.png&#34; alt=&#34;Palette detail view&#34; title=&#34;Palette detay ekranı&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View katmanımızı &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/blob/master/Article-03/hello_django/hello_palette/views.py&#34;&gt;repo&amp;rsquo;dan&lt;/a&gt; inceleyin, orada bir Delete View örneği daha göreceksiniz. Bir sonraki yazımızda Template dosyalarımızın üzerinden bir kez daha geçelim.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;strong&gt;Signals&lt;/strong&gt; konusunda daha fazla bilgi için Django&amp;rsquo;nun &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/signals/&#34;&gt;kendi dökümantasyonuna&lt;/a&gt; gözatmanızı öneririm.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;CSRF, sunucuya sahte isteklerin gönderilmesini veya gerçek isteklerin gönderilirken değiştirilmesini engellemek için bir tür yöntemdir. Django dökümantasyonunda bu konuyla ilgili &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/csrf/&#34;&gt;detaylı bilgi&lt;/a&gt; var.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>02 - Model Katmanı</title>
      <link>https://gokmengorgen.net/django-notes/02-model-katmani/</link>
      <pubDate>Wed, 04 Apr 2018 00:12:24 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/02-model-katmani/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Şimdi MTV&amp;rsquo;nin Model katmanına giriş yapacağız; ama bu konuya tek bir yazı yetmeyecek. Bu yazıyı okurken öğrendiklerinizi pekiştirmek için alıştırmaları yapmaya özen gösterirseniz, bir sonraki konuya daha kolay ısınırsınız.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Django&amp;rsquo;da uygulama oluşturacağız, bundle yapısına kısaca değineceğiz.&lt;/li&gt;
&lt;li&gt;Model katmanını içerecek basit bir uygulama yazacağız.&lt;/li&gt;
&lt;li&gt;Model migration script&amp;rsquo;leri oluşturacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-02/hello_django&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;oluştur-oku-güncelle-sil&#34;&gt;Oluştur, Oku, Güncelle, Sil&lt;/h2&gt;

&lt;p&gt;Veritabanında veri ile ilgili yapılabilecek dört temel işlemin baş harflerinden oluşuyor &lt;strong&gt;CRUD&lt;/strong&gt;: Create - Read - Update - Delete. Her View katmanının belli bir amacı olur ve bu amaca göre Model katmanıyla bağlantıya geçer (bazen geçmez), sonucu Template katmanında gösterir. Django dökümantasyonunda çok güzel bir alıştırma&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; var. Biz şimdi herhangi bir resim dosyasını analiz edip bir renk paleti oluşturmayı deneyeceğiz, önce modellemeden başlıyoruz. Önce uygulamayı oluşturalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py startapp hello_palette
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu noktada &lt;strong&gt;bundled application&lt;/strong&gt; konusuna bir değinelim. Django&amp;rsquo;da her uygulamanın bir dizini var:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bir Django projesi, &lt;strong&gt;birden fazla uygulamayı&lt;/strong&gt; içinde barındırabilir.&lt;/li&gt;
&lt;li&gt;Bir uygulama, &lt;strong&gt;birden fazla Django projesinde&lt;/strong&gt; barınabilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Burada amaç, projenin belli bir işlevini veya özelliğini bir paket haline getirip, o paketi kolayca projeye kurup çıkarabilmek. &lt;strong&gt;pip&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; ile kurulabilen her Django eklentisi aslında birer uygulamadır. Yani siz de geliştirdiğiniz bir uygulamayı, Template ve statik dosyalarını uygulama dizininde tutarak dağıtabilirsiniz.&lt;/p&gt;

&lt;p&gt;Ben dağıtmayı düşünmediğim, bir projeye kökünden bağımlı olan uygulamalarımda iki şeye önem veriyorum:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;İsimlendirirken herhangi bir isim çakışmasını önlemek için proje adıyla bir prefix ekliyorum: &lt;strong&gt;palette&lt;/strong&gt; yerine &lt;strong&gt;hello_palette&lt;/strong&gt; gibi.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;templates&lt;/strong&gt; ve &lt;strong&gt;static&lt;/strong&gt; dosyalarımı uygulamanın içinde değil, ortak proje dizininde tutmayı tercih ediyorum.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ ls
hello_django/  hello_palette/  manage.py*  static/  templates/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ ls hello_palette/
__init__.py  admin.py  apps.py  migrations/  models.py  tests.py  views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bir uygulama oluşturduğumuzda oluşan dosya ve dizin yapısı bu. Model katmanında ORM&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; model objelerimizi &lt;code&gt;models.py&lt;/code&gt; dosyasında tutacağız, Model katmanında yapılan değişiklikleri içeren, otomatik oluşturulan scriptleri &lt;code&gt;migrations/&lt;/code&gt; dizininde bulabileceğiz. Şimdi bir örnekle ORM konusuna girelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# models.py
from django.db import models
from django.utils.translation import ugettext_lazy as _


class Palette(models.Model):
    image = models.ImageField(verbose_name=_(&amp;quot;Image&amp;quot;), upload_to=&#39;images/&#39;)
    colors = models.TextField(verbose_name=_(&amp;quot;Colors&amp;quot;))
    created_at = models.DateTimeField(verbose_name=_(&amp;quot;Created at&amp;quot;), auto_now_add=True)

    class Meta:
        verbose_name = _(&amp;quot;Palette&amp;quot;)
        verbose_name_plural = _(&amp;quot;Palettes&amp;quot;)
        ordering = (&#39;-created_at&#39;,)

    def __str__(self):
        return self.image.path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bizim varsayılan veritabanımız SQLite ve daha ilk andan kullanıma hazır. Fakat veritabanımızda henüz &lt;strong&gt;Palette&lt;/strong&gt; model objemiz ile ilgili bir table ve columnlar yok. Model katmanımızda yaptığımız her değişikliğin veritabanımıza yansıtılması için bir &lt;strong&gt;migration script&lt;/strong&gt; oluşturmamız gerekiyor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py makemigrations hello_palette
App &#39;hello_palette&#39; could not be found. Is it in INSTALLED_APPS?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Önemli bir şey unuttuk, uygulamayı kurmadan kullanmaya çalıştık. Yeni uygulamamızı INSTALLED_APPS listesine ekleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# settings.py
...
INSTALLED_APPS = [
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;hello_palette&#39;,  # en sona, sira onemli.
]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py makemigrations hello_palette
SystemCheckError: System check identified some issues:

ERRORS:
hello_palette.Palette.image: (fields.E210) Cannot use ImageField because Pillow is not installed.
        HINT: Get Pillow at https://pypi.python.org/pypi/Pillow or run command &amp;quot;pip install Pillow&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu sefer de eksik bağımlılık nedeniyle hata aldık. Bu sorunu nasıl çözeceğimize dair bir ipucu zaten verilmiş ama yeri gelmişken bağımlılıklar konusuna el atalım.&lt;/p&gt;

&lt;h2 id=&#34;proje-bağımlılıkları-requirements-txt&#34;&gt;Proje Bağımlılıkları, requirements.txt&lt;/h2&gt;

&lt;p&gt;Projeye başlarken &lt;code&gt;pip&lt;/code&gt; ile kurduğumuz ilk bağımlılığımızı hatırlayalım, Django. Şimdi resim dosyalarımız ile ilgili meta datayı veritabanında saklamak isterken Django bizden &lt;code&gt;Pillow&lt;/code&gt; kurmamızı istedi. Projenin kapasitesi, özellikleri arttıkça bağımlılıklar artar. Bizim bunları her kurulumda tek tek kurmamız, sürümlerini kontrol etmemiz, yönetmemiz epey zor. Fakat bir &lt;code&gt;requirements.txt&lt;/code&gt; dosyası oluşturup bu listeyi saklarsak, bu sorunu büyük ölçüde çözmüş oluruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# requirements.txt
Django==2.0.3
Pillow==5.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bağımlılıkların sürümünü &lt;a href=&#34;https://pypi.org/&#34;&gt;PyPI&lt;/a&gt; sitesinden bakıp öğrenebilirsiniz. Bağımlılık dosyamızı hazırladıktan sonra paketleri artık bir komutla kurabiliriz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ pip install -r requirements.txt
Requirement already satisfied: Django==2.0.3 in c:\users\gokmen\appdata\local\programs\python\python36-32\lib\site-packages (from -r requirements.txt (line 1))
Collecting Pillow==5.1.0 (from -r requirements.txt (line 2))
  Using cached Pillow-5.1.0-cp36-cp36m-win32.whl
Requirement already satisfied: pytz in c:\users\gokmen\appdata\local\programs\python\python36-32\lib\site-packages (from Django==2.0.3-&amp;gt;-r requirements.txt (line 1))
Installing collected packages: Pillow
Successfully installed Pillow-5.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Son kez migration script oluşturmayı deneyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py makemigrations hello_palette
Migrations for &#39;hello_palette&#39;:
  hello_palette\migrations\0001_initial.py
    - Create model Palette
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oldu! Elimizde veritabanında istediğimiz tabloları ve columnları oluşturacak bir script&amp;rsquo;imiz var. Artık sıra veritabanında&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# terminal
$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, hello_palette, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying hello_palette.0001_initial... OK  # bizimki burada.
  Applying sessions.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hayda, bir migration script&amp;rsquo;imiz var sanıyorduk. Tabi ki öyle değil, auth, contenttypes, sessions&amp;hellip; Bunların hepsi birer uygulama ve dikkat ederseniz bunlar INSTALLED_APPS listesinde de var. Projede kullandığımız uygulamaların veritabanımıza henüz kabul edilmemiş migration script&amp;rsquo;leri varsa, Django bunları tespit edip belli sırayla veritabanımıza uygular. Peki bir migration script&amp;rsquo;in uygulanıp uygulanmadığını Django nasıl anlıyor? O bilgiyi de veritabanında tutarak! Yani Django&amp;rsquo;daki migration uygulamasının da bir tablosu var.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazımda palette uygulamasını kodlamaya devam edeceğiz. Sağlıcakla.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Ben kendi deneyimlerimi katarak bu yazı dizisini hazırlıyorum; ancak siz çok geç olmadan Django dökümantasyonuna elinizi, gözünüzü alıştırın. Bu yazıda öğrendiklerinizi &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/intro/tutorial01/&#34;&gt;buradan&lt;/a&gt; pekiştirmenizi tavsiye ediyorum.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Tüm Django paketlerini &lt;a href=&#34;https://pypi.org/search/?q=django&#34;&gt;buradan&lt;/a&gt; görebilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Object-Relational Mapping kısaltması ORM&amp;rsquo;de temel amaç, kodumuzun içinde, kullandığımız programlama dilinin sağladığı kolaylıklardan sonuna kadar yararlanarak veritabanında çeşitli işlemler gerçekleştirmek.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Projeyi ilk oluşturduğumuzda bazı uygulamalar önceden kurulu geldiği için beklediğimizden fazla migration çalıştı. Bu uygulamaların bir çoğuna daha sonra tekrar değineceğiz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>01 - Başlangıç</title>
      <link>https://gokmengorgen.net/django-notes/01-baslangic/</link>
      <pubDate>Fri, 30 Mar 2018 19:22:15 +0200</pubDate>
      
      <guid>https://gokmengorgen.net/django-notes/01-baslangic/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Web Framework&amp;rsquo;leri, bir web projesinde duyulabilecek temel ihtiyaçları belli bir amaç doğrultusunda, belli yöntemlerle karşılamaya çalışırlar. Bugüne kadar geliştirilmiş binlerce framework var ve tercihi nasıl yapacağınız konusu tamamen size bağlı. Kararınız Django ise veya Django&amp;rsquo;ya meraklıysanız, bu yazı dizisini sizler için hazırladım. Elimden geldiğince hızlı bir başlangıç yapacağım, &lt;u&gt;detaylara boğmak yok&lt;/u&gt;, motivasyonunuzu da &lt;strong&gt;yüksek tutmaya&lt;/strong&gt; çalışacağım.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;özet&#34;&gt;Özet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Django geliştirme ortamımızı kuracağız.&lt;/li&gt;
&lt;li&gt;Geliştirme sunucusunu nasıl kullanacağımızı öğreneceğiz.&lt;/li&gt;
&lt;li&gt;Dizin ve dosya yapımızı inceleyeceğiz, MVC ve MTV konularına kısaca değineceğiz.&lt;/li&gt;
&lt;li&gt;Anasayfamızı çok basit bir tasarımla birlikte sunacağız.&lt;/li&gt;
&lt;li&gt;Bu yazıyla ilgili kodlara &lt;a href=&#34;https://github.com/gkmngrgn/django-notes/tree/master/Article-01&#34;&gt;buradan&lt;/a&gt; erişebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;en-temel-gereksinimler&#34;&gt;En Temel Gereksinimler&lt;/h2&gt;

&lt;p&gt;En temel gereksinimimiz Django&amp;rsquo;nun geliştirildiği dil olan Python. Yani öncelikle bizim Python3&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; yorumlayıcısına ihtiyacımız var. Sitesine girip kurduktan sonra beraberinde pip paket yükleme aracınızı da kurmuş olacaksınız. Bu araçla Django&amp;rsquo;yu kuracağız. Kullandığınız herhangi bir terminal uygulamasını açın ve şu komutu çalıştırın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install Django==2.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Collecting Django==2.0.3
  Downloading Django-2.0.3-py3-none-any.whl (7.1MB)
    100% |████████████████████████████████| 7.1MB 127kB/s
Collecting pytz (from Django==2.0.3)
  Downloading pytz-2018.3-py2.py3-none-any.whl (509kB)
    100% |████████████████████████████████| 512kB 776kB/s
Installing collected packages: pytz, Django
Successfully installed Django-2.0.3 pytz-2018.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django kurulduktan sonra, artık Django projelerini yönetebilmek için bir yeni bir komutumuz var, &lt;code&gt;django-admin&lt;/code&gt;. Hemen bir websitesi projesini oluşturalım ve geliştirme sunucusunu çalıştıralım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ django-admin.exe startproject hello_django
$ cd hello_django
$ python manage.py runserver 0:8000  # Bunu hatırlayın, çok sık kullanacağız.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Performing system checks...

System check identified no issues (0 silenced).

You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run &#39;python manage.py migrate&#39; to apply them.
March 30, 2018 - 22:14:18
Django version 2.0.3, using settings &#39;hello_django.settings&#39;
Starting development server at http://0:8000/
Quit the server with CTRL-BREAK.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu noktaya kadar geldiniz ve web tarayıcınızdan &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; adresine girdiğinizde aşağıdaki gibi bir görüntü alıyorsanız, temel gereksinimlerimiz tamam demektir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/installation.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/installation.png&#34; alt=&#34;Django installation&#34; title=&#34;Tebrikler! Django hazır.&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kodlamaya-geçmeden-bir-gözden-geçirelim&#34;&gt;Kodlamaya Geçmeden, Bir Gözden Geçirelim&lt;/h2&gt;

&lt;p&gt;Projemizin dizin / dosya yapısını bir gözden geçirelim. Ne nerede, önce onu bilelim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hello_django/
  __pycache__
  settings.py
  urls.py
  wsgi.py
  __init__.py
db.sqlite3
manage.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eksikler çok; ama başlamak için yeterince basit. En önemlilerinden başlayalım:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.sqlite3&lt;/code&gt;, adından belli. Veritabanı dosyamız, varsayılan veritabanı hizmetini &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite&lt;/a&gt;&amp;lsquo;ten alıyoruz.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manage.py&lt;/code&gt;, &lt;code&gt;django-admin&lt;/code&gt; komutumuzla benzer bir işlevi var; ancak içinde barındırıldığı projeye göre özelleştirilmiş, yapılandırılmış.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings.py&lt;/code&gt;, proje ayarlarımızı içeren bir Python dosyası.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls.py&lt;/code&gt;, tüm url tanımlamalarımızı içeriyor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wsgi.py&lt;/code&gt;, &lt;a href=&#34;https://wsgi.readthedocs.io/en/latest/what.html&#34;&gt;WSGI&lt;/a&gt; yapılandırmamızı içeriyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WSGI&amp;rsquo;ye daha sonra bakacağız, onu bir kenara bırakalım ve &lt;code&gt;runserver&lt;/code&gt; ile ne olduğunu anlayalım:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Önce proje ortamındaki değişkenlerimiz &lt;code&gt;manage.py&lt;/code&gt; ile tanımlanıyor.&lt;/li&gt;
&lt;li&gt;Ayarlarımız &lt;code&gt;settings.py&lt;/code&gt; dosyasından alınıyor, uygulanıyor. Veritabanımız da bu noktada ayarlanmış oluyor.&lt;/li&gt;
&lt;li&gt;Web adreslerimiz &lt;code&gt;urls.py&lt;/code&gt; üzerinden tanımlanıyor. Böylece burada tanımlanan adreslere tarayıcımızdan ulaşabiliyoruz.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Buraya kadar projenin nasıl çalıştığını anladıysak, artık kod yazmaya ve MTV (Model - Template - View) kullanarak ilk
sayfamızı oluşturmaya hazırız.&lt;/p&gt;

&lt;h2 id=&#34;mtv-nedir-birlikte-deneyelim&#34;&gt;MTV nedir? Birlikte Deneyelim&lt;/h2&gt;

&lt;p&gt;Bir web sitesi ziyaretçisinin isteklerinin değerlendirilmesi ve cevaplandırılması için yazılımda çeşitli tasarımlar bulunuyor ve bunlardan biri &lt;strong&gt;MVC&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Model - View - Controller sayesinde, ziyaretçinin istekleri alınıyor, View katmanında değerlendiriliyor; veri gerektiğinde Model katmanından elde ediliyor ve Controller üzerinden bu iki katman arasında iletişim sağlanıyor.&lt;/p&gt;

&lt;p&gt;Fakat Django&amp;rsquo;da biz bu yapıyı farklı şekilde kullanıyoruz ve &lt;strong&gt;MTV&lt;/strong&gt; (Model - Template - View) olarak isimlendiriyoruz. Bir Controller yerine merkeze View katmanını koyuyoruz, veriyi Model katmanından alıyoruz, Template katmanında da kullanıcıya bir sonuç gösteriyoruz. URL adresi tanımlarken de hep View katmanını kullanıyoruz. Bunu bizzat deneyip görelim. Yapacağımız şey, anasayfada farklı bir mesaj göstermek. Önce &lt;code&gt;hello_django/hello_django/urls.py&lt;/code&gt; dosyasını açın ve ilk sayfamızı bağlayalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
from django.contrib import admin
from django.urls import path
from hello_django.views import HomeView  # Bunu ekledik.

urlpatterns = [
    path(&#39;&#39;, view=HomeView.as_view(), name=&#39;home&#39;),  # Bunu ekledik.
    path(&#39;admin/&#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burada anasayfaya ziyaret edildiğinde hangi View class&amp;rsquo;ının karşılayacağını belirtmiş olduk; fakat View henüz hazır değil. &lt;code&gt;hello_django/hello_django/views.py&lt;/code&gt; dosyası oluşturup yeni bir tane yazalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.views.generic import TemplateView


class HomeView(TemplateView):
    template_name = &#39;home.html&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geliştirme sunucumuzu daha önce gösterdiğimiz şekilde çalıştırın ve sonucu beraber anlayalım:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/template-does-not-exist.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/template-does-not-exist.png&#34; alt=&#34;Template does not exist.&#34; title=&#34;View hazır; ama Template eksik.&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View class&amp;rsquo;ımızda &lt;code&gt;home.html&lt;/code&gt; dosyasını kullanacağımızı belirttik, Django bizim için birkaç yere bakmış ama Template&amp;rsquo;i bulamamış. Biz bir dizin oluşturalım ve Template dosyamızı &lt;code&gt;hello_django/templates/home.html&lt;/code&gt; olarak tutalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Hello, Django!&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/static/main.css&amp;quot;&amp;gt; &amp;lt;!-- Buna dikkat! --&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Hello, Django!&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Son bir şey kaldı. Django&amp;rsquo;ya Template dizinimizin nerede olduğunu haber vermemiz gerekiyor. &lt;code&gt;settings.py&lt;/code&gt; dosyasını açın ve aşağıdaki değişikliği yapın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
TEMPLATES = [
    {
        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],  # Bunu değiştirdik.
        &#39;APP_DIRS&#39;: True,
        &#39;OPTIONS&#39;: {
            ...
        },
    },
]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/say-hello.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/say-hello.png&#34; alt=&#34;Say hello!&#34; title=&#34;View tamam, Template tamam. Sırada?&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Artık beklediğimiz sonucu görebiliyoruz. Son olarak sayfada bir stil düzenlemesi yaparak ilk yazımızı tamamlayalım. HTML dosyamızı oluştururken &lt;code&gt;/static/main.css&lt;/code&gt; adında bir stil dosyamız varmış gibi tanımlamıştık. Bu dosyayı oluşturalım ve sonra &lt;code&gt;static&lt;/code&gt; dizinimizi Template dizini için olduğu gibi &lt;code&gt;settings.py&lt;/code&gt; dosyamızda tanımlayalım.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static/main.css&lt;/code&gt; dosyamız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  background-color: #222;
  color: #fff;
  font-size: 48px;
  font-family: &#39;Segoe UI&#39;, Tahoma, Geneva, Verdana, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt; dosyamızda yapılan değişiklik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = &#39;/static/&#39;
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, &#39;static&#39;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gokmengorgen.net/img/django-notes/hello-django-with-style.png&#34; target=&#34;_blank&#34;&gt;
  &lt;img src=&#34;https://gokmengorgen.net/img/django-notes/hello-django-with-style.png&#34; alt=&#34;Black and white&#34; title=&#34;Siyah Beyaz!&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MTV&amp;rsquo;nin Template ve View katmanlarına burada kısaca değinmiş olduk. Bir sonraki yazımda Model katmanı hakkında bilgi vereceğim ve bununla ilgili beraber bir alıştırma yapacağız. Hoşça kalın!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Python3 &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;buradan&lt;/a&gt; indirebilirsiniz.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;MVC hakkında daha fazla bilgi için &lt;a href=&#34;https://tr.wikipedia.org/wiki/Model-View-Controller&#34;&gt;buraya&lt;/a&gt; bakın.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Geliştiriciler için Windows 10 Pro</title>
      <link>https://gokmengorgen.net/blog/gelistiriciler-icin-windows-10-pro/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/gelistiriciler-icin-windows-10-pro/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Bu yazıda sözünü ettiğim işletim sistemi ve sürümü Windows 10 Pro’dur. Amacım yazılım geliştiriciler için Windows 10 Pro’nun alternatif bir geliştirme ortamı olduğunu anlatmaktır. Windows 8 değil, Windows 10 Home da değil, sadece Windows 10 Pro. Karar elbette sizin.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;genel-görünüm&#34;&gt;Genel Görünüm&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/my-desktop.png&#34; alt=&#34;My Desktop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Uzun süre Linux dağıtımı ve MacOS kullanan birisi olarak ilk Windows izlenimim çok kötüydü. Font rendering Ubuntu’dan bile kötüydü. Masaüstü ortamı KDE’den bile karışıktı. Klavye kısayollarını yeni baştan öğrenmem, alışmam gerekecekti. Ama şu detay beni Windows’ta tutabildi: Laptopu ilk açtığımdan itibaren ihtiyacım olup kuramadığım hiçbir program, eksikliğini hissettiğim hiçbir uygulama, kullanamadığım veya ayarlamak zorunda kaldığım mikrofon, kamera gibi hiçbir donanım olmadı. MacOS’ta olduğu gibi, Windows’u açtığımda kullanıcı hesabı oluşturmak, bulut depolama servisi OneDrive’i bağlamak gibi ilk kurulum ayarlarını yaptım ve bir daha ne format atma gereği duydum, ne de performans sorunu yaşadım.&lt;/p&gt;

&lt;h2 id=&#34;donanım&#34;&gt;Donanım&lt;/h2&gt;

&lt;p&gt;Eğer Macbook Pro gibi bir laptop arıyorsanız, gibisini değil aslını alın. Ona da Windows kurabilirsiniz. PC için tavsiye isterseniz:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kurumlarda tercih edilen Thinkpad (Lenovo), Dell, HP gibi markalara öncelik tanıyın.&lt;/li&gt;
&lt;li&gt;SSD şart, mümkünse 16 GB RAM ve son nesil i7 olsun (Yine Macbook Pro’dan ucuz olabilir).&lt;/li&gt;
&lt;li&gt;Ekran çözünürlüğüne, kalitesine önem verin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Başımdan geçen bir olayı anlatayım. Ben Thinkpad kullanıcısıyım, trende üzerime ve fermuarı açık olduğu için çantamın içine kaynar su döküldü, Thinkpad’i elime aldığımda suyun sıcaklığını hissettim. Laptopu açıp kontrol ettim epey, hiçbir sorun yoktu. O an o laptopun Macbook Pro olduğunu düşünemiyorum.&lt;/p&gt;

&lt;h2 id=&#34;antivirüs-programı&#34;&gt;Antivirüs Programı&lt;/h2&gt;

&lt;p&gt;Yüklü geliyorsa kaldırmanıza gerek yok, gelmiyorsa almanıza gerek yok 🙂 Yine de olsun istiyorsanız, bir zararı yok.&lt;/p&gt;

&lt;h2 id=&#34;terminal-ve-posix-uyumluluğu&#34;&gt;Terminal ve POSIX Uyumluluğu&lt;/h2&gt;

&lt;p&gt;Windows’a yöneltilen eleştirilerin başında POSIX uyumlu olmaması var. İşin doğrusu bu konuda bir sıkıntı çekmedim, çünkü işletim sistemi ne olursa olsun bu zamana kadar hep sanallaştırma kullandım. Yani geliştirme yaptığım ortam her zaman bir Ubuntu LTS sunucusu oldu. Ancak Twitter’daki mesajıma yazılan cevaplardan gördüm ki sanallaştırmayı herkes kullanmıyor. Bana örnek bir sorun gösterilirse çözümü beraber tartışabiliriz. Ancak sanallaştırma bana göre tüm platformlar için en mantıklı çözüm.&lt;/p&gt;

&lt;p&gt;Terminal konusunu ise bir tek Linux dağıtımları becerebiliyor. Ne MacOS, ne de Windows’ta aynı rahatlığı yakalayamadım. Fakat Powershell iş görmüyor mü? Görüyor. Pencere tabları kullanmak isterseniz ConEmu var. KDE’deki Yakuake gibi Quake-style kullanmak isterseniz cmder var. Zsh’siz olmaz derseniz Babun var. Bana Bash yeter derseniz de Git ile birlikte gelen Bash var. Bana bir SSH yeter derseniz Bitvise ve Putty var. Seçenek çok.&lt;/p&gt;

&lt;h2 id=&#34;paket-yöneticileri&#34;&gt;Paket Yöneticileri&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/package-manager.png&#34; alt=&#34;Package Manager&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows’ta ilk kullandığım paket yöneticisi Pacman oldu. Archlinux’taki Pacman’ın pek çok parametresini destekliyor.&lt;/li&gt;
&lt;li&gt;Bir süre Chocolatey kullandım, bu MacOS’taki Bower’a daha yakın bir alternatif.&lt;/li&gt;
&lt;li&gt;Şuan ise hiçbir paket yöneticisi kullanmıyorum. Masaüstü uygulamalarının bir kısmını Windows Store ile, bir kısmını doğrudan uygulamanın sitesinden indirerek yüklüyorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-ve-dosyalarda-crlf-ve-utf-8-bom-sorunu&#34;&gt;Git ve Dosyalarda CRLF ve UTF-8 Bom Sorunu&lt;/h2&gt;

&lt;p&gt;Git’i grafik arayüzüyle kullanmak isterseniz, çok güzel alternatifler var. Komut satırı tercih ediyorsanız, zaten Bash ile birlikte geliyor, onu kullanabilirsiniz veya Powershell tercih edebilirsiniz. Git’e dair hiçbir alışma problemi yaşamayacaksınız, bir konu hariç.&lt;/p&gt;

&lt;p&gt;Windows’ta yeni bir dosya oluşturup yazmaya başladığınızda, satırbaşı için öntanımlı CRLF yöntemini kullanıyor. Yani dosyalarınızı Unix tabanlı bir işletim sistemi kullanan birisi okumak, açmak veya çalıştırmak istediğinde; veya bir repoya gönderdiğinizde, deploy ettiğinizde bir okuma, derleme, yorumlama problemiyle karşılaşmanız çok büyük olasılık.&lt;/p&gt;

&lt;p&gt;Eğer bir sürüm kontrol sistemi kullanıyorsanız, bu tip sorunların üstesinden gelmek kolay: Dosyalarınızı commitlerken LF’ye zorlamak. Stackoverflow’da çözümü detaylı bir şekilde anlatılıyor. Buna ek olarak bir de kullandığınız editör ve IDE’lerde newline ayarınızı bir seferlik yapmanız gerekir.&lt;/p&gt;

&lt;p&gt;Gelelim UTF-8 Bom sorununa. Bu sorun CRLF’ye göre anlaşılması çok daha zor ve sinsi bir sorun. CRLF ile aynı sorunları yaşıyorsunuz; ancak gözle görünür hiçbir problem yok, o nedenle file encoding’e dikkat etmeniz gerekiyor. BOM hakkında detaylı bilgi için Gökhan Şengün’ün buradaki cevaplarına bir göz atınız.&lt;/p&gt;

&lt;h2 id=&#34;sanallaştırma&#34;&gt;Sanallaştırma&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/docker-for-windows.png&#34; alt=&#34;Docker for Windows&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Windows sanallaştırma konusunda gerçekten çok başarılı bir platform. Gerek VMware olsun, gerek Virtualbox, gerekse Hyper-V, elinizin altında çok sayıda alternatif var:&lt;/p&gt;

&lt;p&gt;Henüz yeni kararlı sürüme erişmiş WSL (Windows Subsystem Linux) ile arada ek bir sanallaştırmaya ihtiyaç duymadan UNIX ortamına sahip olabilirsiniz. Ancak henüz web development yapmak için yeterli görünmüyor, terminali kapattığınızda alt sisteme erişimin kapanması gibi bir sorun var.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WSL kurulumu çok basit, Windows Store’dan Ubuntu veya Suse diye aratıyorsunuz.&lt;/li&gt;
&lt;li&gt;Docker desteği çok güzel. Hyper-V ile birlikte kullanıyorsunuz.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Virtualbox ile Vagrant kullandığınız zaman, veya Android geliştirme yaparken emülatöre ihtiyaç duyduğunuzda Hyper-V’yi kapatıp bilgisayarı yeniden başlatmak zorundasınız. Bu ilk başlarda canımı sıksa da, artık alıştım. Hyper-V açıp kapatmak için Powershell’i Admin yetkisiyle açıp aşağıdaki komutu kullanabilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# kapatmak için
$ bcdedit /set hypervisorlaunchtype off

# açmak için
$ bcdedit /set hypervisorlaunchtype auto
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;son-söz&#34;&gt;Son Söz&lt;/h2&gt;

&lt;p&gt;Önce kısayolları öğrenmekle başlayın, bu sizin işletim sistemine hakimiyetinizi ve iş yapma hızınızı her platformda etkiler. Vim ve Emacs severler üzülmesin, Windows altında çok güzel çalışıyorlar. Bir de 2018 mobil{in|yanın} yılı olacak!.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant ile proje geliştirme</title>
      <link>https://gokmengorgen.net/blog/vagrant-ile-proje-gelistirme/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/vagrant-ile-proje-gelistirme/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/hashicorp-vagrant.png&#34; alt=&#34;Hashicorp Vagrant&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Monolitik yapıda bir web projesinin iskeletini oluşturup, projeyi geliştirmek için bir geliştirme ortamına ihtiyacımız var. Geliştirme ortamını hazırlarken bazı ayrıntıları göz önünde bulundurmak gerekir:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Projede tek başıma mı olacağım? Tek başıma değilsem ekip arkadaşlarım kurulumda sorun yaşarlar mı?&lt;/li&gt;
&lt;li&gt;Tek başıma bile olsam, yerelimde yaşamadığım bir sorunu sunucuda yaşarsam bununla nasıl başa çıkacağım veya bu ihtimalın olmaması için ne yapabilirim?&lt;/li&gt;
&lt;li&gt;Bağımlılıklarda sürüm çakışması yaşarsam bunu nasıl çözeceğim? Geliştirme ortamımı diğerlerinden nasıl izole edebilirim?&lt;/li&gt;
&lt;li&gt;Geliştirme ortamımı yeni baştan kurmak istediğimde, başka bir bilgisayara geçtiğimde, her seferinde kurulum belgesi mi okuyacağım? Ve bu belge her işletim sistemi, her işletim sistemi sürümünde geçerli olabilecek mi?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Amacımız şudur: 5 tane projemiz de olsa, ekibe sonradan katılıyor da olsak, hızlıca geliştirme ortamına sahip olabilmek ve bu ortamlar arasında kolayca geçiş yapabilmek, gerekirse hızlıca baştan kurabilmek.&lt;/p&gt;

&lt;h2 id=&#34;sanallaştırma&#34;&gt;Sanallaştırma&lt;/h2&gt;

&lt;p&gt;Vagrant sanallaştırma teknolojilerini kullanarak, kolayca yapılandırılabilir, tekrar tekrar kurulabilir ve taşınabilir geliştirme ortamı sağlayan bir araç. Bu sayede tek komutla geliştirme ortamımız hazırlanacak:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu komutun bizim istediğimiz şekilde çalışabilmesi için bilgisayarımıza Vagrant ve bir sanallaştırma çözümü (örneğin VirtualBox) kurmamız, bir de proje dizinimizde Vagrantfile adında bir yapılandırma dosyası oluşturup hazırlamamız gerekiyor. Vagrant hakkında daha fazla bilgiyi &lt;a href=&#34;https://www.vagrantup.com/intro/index.html&#34;&gt;buradan&lt;/a&gt; edinebilirsiniz.&lt;/p&gt;

&lt;p&gt;Projelerimde kullandığım Vagrant yapılandırmamı &lt;a href=&#34;https://github.com/gkmngrgn/vagrant-skeleton&#34;&gt;burada&lt;/a&gt; bulabilirsiniz, depoyu forklayıp siz de katkıda bulunabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;ubuntu/xenial64&amp;quot;
  config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8000, host: 8000
  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    vb.memory = &amp;quot;512&amp;quot;
  end
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;increase_swap.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;update_repositories.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_java.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_elasticsearch.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_nodejs.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_postgresql.sh&amp;quot;
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;install_python.sh&amp;quot;
  [...]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt; dosyamızın içeriği çok basit. Bir Ubuntu 16.04 imajıyla sanal bir sunucu oluşturup, bir seferlik provision script’lerini çalıştırarak geliştirme ortamınızı hazırlıyor. Bu örnekte, 512 MB ram’lık sanal sunucumuza 1024 MB’lik SWAP alanı oluşturuyorum, sonrasında Elasticsearch, Nodejs, PostgreSQL gibi proje için gerekli paketleri kuruyorum, proje için veritabanı oluşturuyorum, Python için virtualenv’i hazırlıyorum.&lt;/p&gt;

&lt;h2 id=&#34;sorunlar-çözümler&#34;&gt;Sorunlar, Çözümler&lt;/h2&gt;

&lt;p&gt;Bu yöntemde şimdiye kadar Windows ve MacOS kullanan geliştirici arkadaşlarda ciddi problem yaşamadık. Bazen sanal sunucunun internet erişiminin olmaması gibi sorunlar yaşadıysak da bir şekilde çözüldü. Fakat tuhaf bir şekilde Linux dağıtımı kullanan arkadaşlarda VirtualBox’un çalışmaması, paketlerin yüklenmemesi gibi sorunlar yaşadık ve onlar da provision script’lerini kendi yerel bilgisayarlarında çalıştırmayı tercih ettiler. Her zaman yaşanan sorunlar değildi; ama yaşandı mı uğraştıran sorunlardı. Diğer konulara değinecek olursak:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Belli ve kurulumu denenmiş Vagrant ve VirtualBox sürümlerini kurulum belgemizde belirtmeye ve geliştiricilere de bu sürümleri kullanmalarını önermeye başladık.&lt;/li&gt;
&lt;li&gt;Mikro servisler için geliştirme ortamı hazırlamak monolitik yapıdaki projeler kadar basit olmayabiliyor. Örneğin sanal sunucumuzun içinde Docker kullanarak her bir mikro servis için bir container hazırlamak gerekebiliyor.&lt;/li&gt;
&lt;li&gt;Henüz denemedik ama provision script’lerinin bir kez çalıştırılıp, sanal sunucumuzu paketleyip, sonra bu paketi arkadaşlara dağıtmak sorunları biraz azaltabilir. Fakat bu durumda imajın boyutu artıyor ve birinin bu imajları oluşturmak için zaman ayırması gerekiyor.&lt;/li&gt;
&lt;li&gt;Değişikliklerin deploy edilmesi süreci kesinklikle geliştirme ortamının içinde değil, dışında olması gerekiyor. Geliştirme ortamının kolayca hazırlanması gibi, deployment ve test süreçlerinin de en baştan hazırlanması çok zaman kazandırır.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Emacs&#39;e nereden başlamalı?</title>
      <link>https://gokmengorgen.net/blog/emacse-nereden-baslamali/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/emacse-nereden-baslamali/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/spacemacs.png&#34; alt=&#34;Spacemacs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yazılım dünyasının en eski editörlerinden Emacs, günümüzdeki diğer popüler editörlerden farklı bir kullanma ve öğrenme disiplini istiyor. Bazı temel özelliklerini öğrenmeden editörde bir dosya açmak bile zor. O nedenle Emacs’in kendi içinde gelen tutorial’ını en azından bir kez okumak, öğrendiklerini uygulamak ve birkaç hafta sabırla kullanmak gerekiyor.&lt;/p&gt;

&lt;p&gt;Emacs Linux, Windows ve macOS işletim sistemlerinde çalışıyor. Yükleyip editörü açtığınızda ilk hali muhtemelen arzu ettiğiniz gibi görünmeyecek. Bir yandan Emacs’i öğrenirken, bir yandan da kendi zevkinize göre özelleştirmeye başlamanızı öneriyorum. İnternette yüzlerce Emacs config dosyası bulabilirsiniz, bazı kullanıcılar işi bir adım daha ileriye götürüp &lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt;, &lt;a href=&#34;https://github.com/technomancy/emacs-starter-kit&#34;&gt;StarterKit&lt;/a&gt; gibi projelerle kullanıcıların ortalama ihtiyaçlarına göre hazır config dosyaları sunuyorlar. Deneyebilirsiniz; ama bana göre bu iyi bir başlangıç olmaz. Elinizde neredeyse her şeyi yapılandırabileceğiniz bir editör var ve bunu başkalarının zevklerine göre ayarlamak yerine, kendi ihtiyaçlarınızı tespit edip, bu ihtiyaçları başkalarının nasıl çözdüğüne bakarak kendi editörünüzü kendiniz yapılandırmanız daha doğru bir yaklaşım olur.&lt;/p&gt;

&lt;p&gt;Emacs kendine özel bir Lisp yorumlayıcısıyla birlikte geliyor. Config dosyalarınızı bir Lisp script’i yazar gibi hazırlıyorsunuz. Daha önce hiç Lisp yazmadıysanız, &lt;a href=&#34;https://learnxinyminutes.com/docs/elisp/&#34;&gt;buradan&lt;/a&gt; başlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Config dosyası genellikle kullanıcı ev dizininizde &lt;strong&gt;~/emacs.el&lt;/strong&gt; veya &lt;strong&gt;~/.emacs.d/init.el&lt;/strong&gt; olarak saklanıyor. Yapılandırma dosyası hakkında daha fazla bilgi almak için okumaya &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;buradan&lt;/a&gt; başlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Belgeyi okuyup config dosyası hazırlamak gözünüzü korkutmasın, size açıklayarak küçük bir örnek göstereceğim. Benim config dosyam, önce paketleri kontrol etmek, eğer kurulmamış paket varsa da kurmakla başlıyor. Paketler, editöre ekstra özellik kazandıran kodlar içerir ve bunlar genellikle küçük dosyalardan oluşmazlar, örneğin HTML kodları, içinde CSS ve JavaScript kodu barındırdığında parse etmesi çok zordur, bunun için ek paket kurmak isteyebilirsiniz veya Emacs içinde bir git istemcisi kullanmak isteyebilirsiniz. &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm paketi&lt;/a&gt; ile Emacs komut satırını daha da güçlendirmek isteyebilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;package)
(add-to-list &#39;package-archives &#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.org/packages/&amp;quot;) t)
(package-initialize)
(when (not package-archive-contents) (package-refresh-contents))
(defvar my-packages
  &#39;(auto-complete
    flx-ido
    helm
    helm-ag
    helm-ls-git
    js2-mode
    magit
    markdown-mode
    scss-mode
    web-mode)
  &amp;quot;A list of packages to ensure are installed at launch.&amp;quot;)
(dolist (p my-packages)
  (when (not (package-installed-p p)) (package-install p)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Editörü kullandıkça bazı ihtiyaçlar ortaya çıkmaya başlıyor. Örneğin bir projede çok uzun süre çalışıp daha sonra başka bir projeye geçmek istediğimde arka planda açık olan tüm dosya yedeklerini silmek istiyorum. Bunun için &lt;code&gt;kill-other-buffers&lt;/code&gt; adında bir fonksiyon yazdım ve bu fonksiyonu bir klavye kısayoluna atadım (Ctrl c, k):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun kill-other-buffers ()
 “Kill all other buffers.”
 (interactive)
 (mapc ‘kill-buffer (delq (current-buffer) (buffer-list)))
 (message “All other buffers are killed..”))

(global-set-key (kbd “C-c k”) ‘kill-other-buffers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacs’i olabildiğince sade kullanmaya çalışıyorum. O nedenle menüyü, açılış ekranını kaldırdım, imleç pozisyonunu satır uzunluğunu anlayabilecek şekilde yapılandırdım, fontumu değiştirdim, dosya kaydederken beyaz boşlukların otomatik silinmesini sağladım, parantezlerin otomatik kapatılması gibi birçok ayarı etkinleştirdim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default truncate-lines t)
(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(setq visible-bell 1)
(column-number-mode t)
(set-face-attribute ‘default nil :font “Fira Code” :height 105 :weight ‘normal :width ‘normal)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq-default indent-tabs-mode nil)
(electric-pair-mode 1)
(add-hook ‘before-save-hook ‘delete-trailing-whitespace)
(ac-config-default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Editörde dosya açarken, aynı dizinde geçici bir dosya oluşturulduğunu göreceksiniz. Bu dosyaların ortalıkta değil de, başka bir yerde tek bir dizin içinde saklanmasını sağlıyorum:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq backup-directory-alist `((“.*” . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((“.*” ,temporary-file-directory t)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Son olarak, normalde uzun satırları kırmayı sevmiyorum, tek satırda göstermesi benim için daha iyi; ama metin dosyaları hariç, onlarda uzun satırları kırıp satırbaşıymış gibi göstermesini sağlıyorum:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook ‘markdown-mode-hook ‘visual-line-mode)
(add-hook ‘text-mode-hook ‘visual-line-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;40 yıllık editör için yapılandırmam bundan ibaret. Yapılandırmanızı ne kadar basit tutarsanız o kadar iyi. Eğer Emacs ile ilgileniyorsanız, aşağıdaki linklere de göz atın, istediğiniz zaman yorum yazıp bana soru iletebilirsiniz.&lt;/p&gt;

&lt;h2 id=&#34;kaynaklar&#34;&gt;Kaynaklar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bilgem Çakır, &lt;a href=&#34;https://youtu.be/qXw0ocR_XBI&#34;&gt;“Kullandığım Araçlar: Emacs”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Üstün Özgür, &lt;a href=&#34;https://youtu.be/FsN3Yp05_aQ&#34;&gt;“Emacs: Özgür Yazılım Devriminin Editörü”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Örnek config dosyası, &lt;a href=&#34;https://github.com/gkmngrgn/config/blob/master/.emacs.d/init.el&#34;&gt;gkmngrgn/config/init.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spacemacs &lt;a href=&#34;http://spacemacs.org/&#34;&gt;websitesi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome Emacs &lt;a href=&#34;https://github.com/emacs-tw/awesome-emacs&#34;&gt;reposu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>İşverenlere uzaktan çalışma tavsiyesi</title>
      <link>https://gokmengorgen.net/blog/isverenlere-uzaktan-calisma-tavsiyesi/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/isverenlere-uzaktan-calisma-tavsiyesi/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/remote-working.jpeg&#34; alt=&#34;Remote Working&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Beyin göçünün yükseldiği bir dönem, işveren veya üst düzey çalışanların konuyla ilgili yazdığı yazılarda aradığım çok basit bir çözüm vardı: Uzaktan çalışmak.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Çalışanlar uzaktan çalışmak ister, gerekçeleri çok, konuyla ilgili ben dahil birçok çalışan yazı yazmıştır. Ama işverenlerin uzaktan çalışmayla ilgili pek bir fikir paylaşımı yok. Onların ne düşündüğünü merak ediyorum. Görebildiğim tek cümle bu:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yurt dışında yaşayan arkadaşlarımdan bu yazıya biraz incindiklerini öğrendim, oradan da her şeyi yapabiliriz diyorlardı. Dijital bir dünyada çok şey mümkün tabii ki. Ama her şey değil. ~ Sina Afra&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Belli bir iş üzerinden gidelim; yazılım geliştireceğiz, bize gereken, interneti olan sağlam bir bilgisayar, ihtiyaca göre çevre birimleri&amp;hellip; Bunun dışında işi tanımlamak, işi yapmak veya işi yönetmek ile ilgili birtakım araçlar gerek. Bunlar olduktan sonra yüzyüze ve beraber bir ofis ortamında iş yapmaktan hiçbir farkı olmayacak &lt;strong&gt;demiyorum&lt;/strong&gt;. İş yaparken kullandığımız araçları, iletişim kanallarımızı, iş takibini ve beklentilerimizi çalışanların uzaktan çalışabileceği bir şekilde güncellememiz gerektiğini söylüyorum. Elbette çalışanların yemek ihtiyacının karşılanması, dinlenme koşullarının yeniden düzenlenmesi, iş sözleşmelerinin de buna göre yeniden gözden geçirilmesi gibi başka konular da var. Bunların hiçbiri çözülemez sorunlar değil.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;tr&#34; dir=&#34;ltr&#34;&gt;Türkiye&amp;#39;de tüm yazılım firmalarının çalışanlarına yılda en az 2 hafta uzaktan çalışma hakkı vermelerini öneriyorum. Fitili ateşleyelim.&lt;/p&gt;&amp;mdash; Gökmen Görgen ☄️ (@gokmengorgen) &lt;a href=&#34;https://twitter.com/gokmengorgen/status/825072423238238210?ref_src=twsrc%5Etfw&#34;&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Neyi bekliyoruz bilmiyorum, çalışanların şikayetlerini biliyoruz, gerekçeleri biliyoruz, bana göre çözüm ise uzaktan çalışmak. Üstelik Türkiye’de uzaktan çalışmaya yeşil ışık yakan başarılı startup’lar da çıkmaya başladı nihayet. Siz de elinizi çabuk tutsanız :-)&lt;/p&gt;

&lt;h2 id=&#34;bu-konuyla-ilgili-ilginizi-çekebilecek-paylaşımlar&#34;&gt;Bu konuyla ilgili ilginizi çekebilecek paylaşımlar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sina Afra: &lt;a href=&#34;http://www.sinaafra.com/burasi-vatan-nereye-gidiyorsunuz/&#34;&gt;Burası vatan, nereye gidiyorsunuz?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Umut Gökbayrak: &lt;a href=&#34;https://medium.com/@umutgokbayrak/gitmeli-mi-kalmal%C4%B1-m%C4%B1-813febb52f6c&#34;&gt;Gitmeli mi, kalmalı mı?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Umut Gökbayrak: &lt;a href=&#34;https://medium.com/@umutgokbayrak/yurtd%C4%B1%C5%9F%C4%B1na-beyin-g%C3%B6%C3%A7%C3%BC-52bfd5d9ef51&#34;&gt;Yurtdışına beyin göçü&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Serkan Koç: &lt;a href=&#34;https://www.linkedin.com/pulse/sina-afra-ve-bir-%C3%A7ok-arkada%C5%9F%C4%B1m-bu-ilan%C4%B1-payla%C5%9Fm%C4%B1%C5%9Flar-peki-serkan-ko%C3%A7?trk=hp-feed-article-title-like&#34;&gt;Sina Afra ve bir çok arkadaşım bu ilanı paylaşmışlar. Peki gitmek isteyenler neden istiyor?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Göç</title>
      <link>https://gokmengorgen.net/blog/goc/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/goc/</guid>
      <description>&lt;p&gt;&lt;em&gt;Bir arkadaşım, “Metroya binerken yüzü gülen insan görmüyorum.” demişti. İstanbul’a geldim geleli, insanların gözlerinin içine baka baka yürürüm. Yüzlerdeki ciddiyet, bana zihinlerinde çok farklı şeyler gezindiğini hissettiriyor. Sanki yüzleriyle zihinleri arasındaki bağlantılar kopmuş gibi. Bu o kadar bulaşıcı bir şey ki, ben de çoğu zaman pek gülümsemiyorum.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/laughing-man-background.jpeg&#34; alt=&#34;Göç&#34; title=&#34;Şu köşedeki gülüyor mu? Hayır yani gülünecek bir şey mi var?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Katre adında bir kadın. Bir bankacı, sabahı ve akşamı belli. Kahvaltısı bir poğaçadan ibaret, ancak yürürken yiyebiliyor, bir on dakikalık yürüme mesafesinden sonra metrobüse, oradan aktarma yapıp metroya binecek, sonrasında yine bir beş dakika daha yürümesi gerek. Diğer birçok işe giden insanlarla aynı vakitte işte olmak ve aynı yoldan gitmek zorunda olduğu için kendini kalabalığın ve telaşın içinde buluyor. Bu kadar zamandır işe gidip geliyor ve her gün binlerce insanla göz göze geliyor; ama bir gözü bir kere daha görebildiğini pek hatırlamıyor.&lt;/p&gt;

&lt;p&gt;Katre, karşıdan karşıya geçmek için araçların yol vermesini bekliyor. Yok hayır, bu İstanbullu için çok komik bir senaryo oldu. Doğrusu şöyle olmalı: Katre, adımlarını zihninde öyle hesapladı ki, karşıdan karşıya geçerken durma ihtimali yüksek bir sürücüye denk getirdi ve kaldırımdan yola adımını attıktan sonra artık sürücüyle göz temasını kesti, dikkatini duymaya verdi. Sürücü de “Sen bana bakmıyorsun; ama ben sana yol vermek istemiyordum, bana resmen üstünlük taslamış gibi hareket ediyorsun.” dercesine tüm hızıyla yaklaşıp son anda frene basıyor. Katre karşıya geçmiş, sürücü de yoluna devam etmiş oluyor; ama zihinlerinde çok başka senaryolar var. Katre içinden “Ezseydin bir de!” diyor, sürücü bağırıyor, laf atıyor. Katre dikiz aynasını kırmak istiyor, sürücü ezmek…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/subway-istanbul.jpeg&#34; alt=&#34;Subway&#34; title=&#34;En sevdiğim alt geçitlerden biri. Biraz ürkütücü.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ben uzun boyluyum, dolayısıyla adım mesafelerimin daha uzun olmasını, daha hızlı yürüyebileceğimi varsayıyorum. &lt;strong&gt;İstanbul’da kadınlar erkeklerden daha hızlı yürüyor&lt;/strong&gt;. Bazı kadınları geçmek için koşmam gerekiyor. Katre de öyle yürüyor. Erkek hegemonyasının içinde kendini güvende hissetmediği için mi bu böyle? İşe her gün geç kaldığı için mi? Yoksa burada herkes hızlı yürüyor, öyleyse ben de hızlı yürümeliyim diye düşündüğü için mi sadece?&lt;/p&gt;

&lt;p&gt;Bir kere yavaş yürümeyi denedim. Yüzüme bakıp uyaracak kimseye denk gelmedim; ama omzuma dokunup, elime çarpıp başını çevirmeden geçip giden çok oldu. Sanki, hayallerinde kolumdan tutup kenara çekip sorguya çekmek istiyorlardı da, gerçekte sadece bunu yapabilmişler gibi. Bir kere yürüyen merdivenin solunda durmayı denedim, bir kadın söylene söylene yanımdan geçti. Bir keresinde de bir öğrenci önümü keser gibi yapıp geçti yanımdan. Kuralların olması hayatın akışını kolaylaştırmak için iyi şeyler de, burada çok başka bir durum söz konusuydu. Burada daha çok insanlar kendi içinde biriktirdikleri öfke ve nefreti bir bahane bularak boşaltma ihtiyacı duyuyordu. Tıpkı metrobüsün şoförüne &lt;a href=&#34;https://www.google.com.tr/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=metrob%C3%BCs+kazas%C4%B1+%C5%9Femsiye&amp;amp;tbm=nws&amp;amp;pws=0&#34;&gt;şemsiyeyle saldıran yolcu&lt;/a&gt; gibi. Sorsak Katre’ye neden hızlı yürüyorsun diye, bir cevabı yok belki de. Sabah yarım saat daha erken çıksa yine hızlı yürüyecek, önüne çıkan engele yine omzundan ittirerek tepkisini gösterecek; ama hayalinde ona kıçından tekmeyi basacak. O da diğer yürüyen herkes gibi bunu arzulayacaktı.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/metrobus-accident.jpeg&#34; alt=&#34;Metrobus Accident&#34; title=&#34;Tekirdağ plakalı, welcome to İstanbul! Bir şemsiye darbesiyle sanat eseri çıktı ortaya.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;tr&#34; dir=&#34;ltr&#34;&gt;İyi ki ucaklarda kokpit diye ayri bir yer var. Ulkemizden cok ilginc hikayeler cikardi:)&lt;/p&gt;&amp;mdash; Ammar Ceker (@Ammarceker) &lt;a href=&#34;https://twitter.com/Ammarceker/status/779320508852600832?ref_src=twsrc%5Etfw&#34;&gt;September 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Her gidişin bir de dönüşü var. Katre, dönerken “Yer yok kardeşim, buraya yanaşma.” diyen insanların kapıya dizildiği yerden metrobüsün içine atlayıp “İşte bak, yer varmış.” diyerek diğer yolcularla sanal kavgaya tutuşacak, her gün olduğu gibi metro çıkışlarında, girişlerinde asansörü deneyecek. Asansör meselesine gelmişken yine bir hikayemi anlatmak isterim. İTÜ / Maslak’a giden metronun en arkadan bir önceki vagonundan inilince asansörün olduğu araya denk geliyorsunuz. O vagondan inenler, diğer vagonlardan inenlerden daha hızlı adım atarlar. Hızlı adım atanın esas nereye varmak istediği biz İstanbullu çalışan sınıfının kabak gibi bilebileceği şeylerden biridir. Bir keresinde ben bunu taklit ettim. Metro durunca vagon kapısından fırladığım gibi yürüyen merdivenlere yöneldim. Sürü psikolojisine güzel bir örnektir.&lt;/p&gt;

&lt;p&gt;Katre’nin kullandığı bu yollar tam bir dövüş arenası gibi. Yaşlılara yer yok, çocuklar servis araçlarına mahkum, engellilerin durumu hakkında çok bir bilgim yok. Simto Alev’in yıllar süren &lt;a href=&#34;http://www.simtoalev.com/6-ayda-2-baba-dikemedik/&#34;&gt;kaldırım direği hikayesi&lt;/a&gt; aslında bir özet gibi. Normal bir insanın empati eksikliği yüzünden hiç önemsemediği minik şeyler bu şehri sadece belli kalıplara uyan dar bir kitlenin rahat yaşayabilmesine imkan tanıyor. Nüfusu İstanbul’un onda biri olan Zürih’te gördüğüm engelli sayısı burada gördüğümden çok daha fazla. Oranın da tehlikeli mahalleleri var, orada da sokakta yaşayan dilenciler, yere çöp atan sorumsuzlar, ırkçı tavır takınan insanlar var; ama orada engelliler dışarı çıkabiliyorlar, kaldırımlar tekerlekli sandalyeyle çıkılabilecek yükseklikte, hayvanat bahçesinde kendi başlarına takılabiliyorlar, &lt;strong&gt;çocuklar kaldırımda scooter kullanabiliyor&lt;/strong&gt;. Çok üzgünüm; ama yaşını başını almış bir engelli görememenin sebebi hakkında &lt;a href=&#34;https://seyler.eksisozluk.com/cevremizde-neden-hic-yasini-basini-almis-zihinsel-engelli-birini-gormuyoruz&#34;&gt;söylenenler&lt;/a&gt; doğru olabilir. Vebali Katre ve benim, hatta siz değerli okuyucumuzun boynuna.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/muhammed-ali.jpeg&#34; alt=&#34;Muhammed Ali&#34; title=&#34;“Yeneceğim seni, İstanbul!” diye arattım, bu çıktı.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sizi bilmem ama Katre’de benden izler var. Her işe gidip geldiğimde, sürekli etrafa negatif enerji yayan insanlar var ve haliyle ben de istemeden yayıyorum. Biraz gülümsemekten ne zarar gelir? Serdar Kuzuloğlu’nun &lt;a href=&#34;https://www.mserdark.com/turklerin-ortak-nefreti-turkler/&#34;&gt;bir blog yazısında&lt;/a&gt; dediği gibi, &lt;strong&gt;gülmek sadece selfie çekince aklınıza gelmesin&lt;/strong&gt;. İçinizden gelmese bile gülümseyin. Bir deneyin. Hatta bir gülen insanlar hareketi başlatalım. Gülümseme hareketi, tebessüm hareketi, ismi ne olursa olsun. Yapacağımız tek şey arada bir yüzümüzü kontrol etmek.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bu yazının başlığını, Selçuk Şirin’in jüri üyesi olduğu &lt;a href=&#34;http://www.kisakes.org/pitching-1&#34;&gt;bir yarışmanın&lt;/a&gt; temasından aldım. Göçle ne alakası var bu yazının bilmiyorum; ama o yarışmayı duyduğumda aklıma bunlar gelmişti. Öyle sanıyorum ki, bu &lt;strong&gt;işini sevmeyenler memleketinde&lt;/strong&gt; koşturup duran insanların (işini sevenler dahil) akıllarından en az bir kez bu hayat silsilesinden bıkıp göç etmek geçmiştir.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kitapları sanallaştırmak</title>
      <link>https://gokmengorgen.net/blog/kitaplari-sanallastirmak/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/kitaplari-sanallastirmak/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/kindle.jpeg&#34; alt=&#34;Kindle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Geçen gün esas niyetimi fazla açıklamadan Twitter üzerinden, kitapları dağıtırsam pişman olup olmayacağım üzerine bir soru sordum:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;tr&#34; dir=&#34;ltr&#34;&gt;Siz olsanız evdeki kitapları dağıtmaktan pişman olur muydunuz? Bundan sonra sadece ebook alan biri olarak soruyorum.&lt;/p&gt;&amp;mdash; Gökmen Görgen ☄️ (@gokmengorgen) &lt;a href=&#34;https://twitter.com/gokmengorgen/status/750961464542986240?ref_src=twsrc%5Etfw&#34;&gt;July 7, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Seçimler arasında çok bir uçurum olmaması beni bir süre kararsız bıraktı; ama cevap olarak yazılanlar faydalı oldu. Özetlemek gerekirse:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Kitap kokusu, kitabın eskiyen sayfalarına dokunmak gibi romantik duygularla pişman olurdum diyen kesim var. Elbette bunu savunana saygım sonsuz; ama benim için hiç ikna edici değil.&lt;/li&gt;
&lt;li&gt;Bir önceki maddeye benzer, ama daha çok okuyucunun üzerinde bıraktığı iz nedeniyle kitabı basılı olarak rafta tutmayı tercih eden kesim var. Bu benim açımdan anlaşılabilir neden. Eski şarkıların, dinleyicinin kendi geçmişiyle ilgili bir an barındırması gibi, daha sonra tekrar hatırlandığında, sayfalar karıştırıldığında okuyucuya güzel duygular hissettirebilir. Bu da benim için kitabı dağıtmamam için ikna edici olmadı. Mesela Alacakaranlık Kuşları’nın e-kitabını &lt;strong&gt;bulabilirsem&lt;/strong&gt;, yine aynı hissi yaşarım gibi geliyor.&lt;/li&gt;
&lt;li&gt;Bir kesim, kitabı saklamak ve istediğin zaman erişebilmek konusunda e-kitabın basılı kitaplar kadar başarılı olmadığını söylüyor. Bu benim için endişe verici bir ayrıntı oldu. Amazon batarsa, Kindle’da DRM-Free olmayan kitaplarımıza nasıl erişeceğiz? Bir arkadaşım, Amazon’un istediği zaman Kindle’imizdaki satın aldığımız kitabı silme hakkına sahip olduğunu &lt;a href=&#34;https://twitter.com/zekzekus/status/751025245889392640&#34;&gt;söylüyor&lt;/a&gt;. Bir de DRM-Free olsa bile Amazon, Kindle’daki bir kitabı dışarı aktarmana &lt;a href=&#34;http://www.wetasphalt.com/content/you-cant-download-your-mobi-files-amazon-anymore-even-if-theyre-drm-free&#34;&gt;izin vermiyor&lt;/a&gt;. Kısaca, e-kitaba sahip olabilmek sıkıntılı.&lt;/li&gt;
&lt;li&gt;Bir kesim de tamamen mantıksal açıdan, e-kitap ile basılı kitap arasında hiçbir işlev farkı olmadığını söylüyor. Bu da benim için ikna edici değil. Mesele işlevi değil, birbirini ne derece ikame edebildiği. Bir önceki maddede yazdığım gerekçeler nedeniyle e-kitaba sahip olabilmek, basılı kitaba sahip olabilmek kadar kolay değil.&lt;/li&gt;
&lt;li&gt;Bir de Osmanlıca yazılmış tarihi kaynaklar gibi, bazı kitapların elektronik versiyonu olmasının çok çok düşük olasılık olduğunu söyleyenler oldu. Şimdiye kadar hiç öyle bir kitabım olmadığı için bunu da geçtim.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Benim soruyu sormaktaki amacım şuydu: Evde bulunan fazla eşya beni rahatsız ediyor. Çok fazla giysim yok, çok fazla eşyam yok, çok sık kullanmadığım ne varsa elden çıkarmayı tercih ediyorum. Sahip olduklarımı da bozulana, işlevini görmeyene kadar kullanmayı seviyorum. Tenhalık bana huzur veriyor. Ama kitap konusu, evde bu kriterlere uymayan belki de tek şey. Hem çok nadiren baktığım, kullandığım, hatta hiç yüzüne bakmadığım kitaplar var; hem de onların orada bir şekilde durması hoşuma gidiyor. Hoşuma gidiyor ama bir taraftan da bunların e-kitap olarak cebimde, her zaman erişebileceğim şekilde olması daha iyi olmaz mıydı diye kendi kendime soruyorum. Evde atılacak başka eşya kalmamış gibi bunlara takmış olmam benim sorunum. Ama e-kitap konusu güven veriyor olsa, sanırım bunu denerdim.&lt;/p&gt;

&lt;p&gt;Sonuç olarak, sahip olmak istediğim kitapları tutmaya, istemediklerimi de dağıtmaya karar verdim. Bu arada yeri gelmişken gelecek öngörümü de belirteyim: Evlerin metrekareleri daha da düşecek, konteyner hizmetleri değerlenecek, mobil yaşam diye bir kültür bu topraklara da gelecek.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uzaktan çalışmak</title>
      <link>https://gokmengorgen.net/blog/uzaktan-calismak/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/uzaktan-calismak/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/workinton-astoria.jpeg&#34; alt=&#34;Workinton Astoria&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bağımsız çalışmak (freelance) ile uzaktan çalışmak (remote) çok karıştırılıyor. Bağımsız çalışanlar aynı zamanda uzaktan çalışıyor veya uzaktan çalışanlar fiziki bir ofise sahip bir şirkette çalışıyor olabilir. Yani uzaktan çalışıyor olmanız, sizi bağımsız çalışan (freelancer) yapmıyor.&lt;/p&gt;

&lt;p&gt;Ben yazılımcıyım. Bağımsız çalışmak konusunda çok deneyimim yok. Bu konudaki gözlemim, en azından Türkiye’de hem işi verenin, hem de işi yapanın çok da profesyonel davranmadığı. Bağımsız çalışmak ayrı bir disiplin gerektiren, kendine özgü şartları ve anlaşması olan, hobi veya ek iş olarak bakılamayacak kadar ciddi bir çalışma biçimi. Fatura nasıl keseceksiniz, vergi nasıl ödeyeceksiniz, gelirinizi devlete nasıl beyan edeceksiniz, etmeyecekseniz neye güveneceksiniz, alacağınızı tahsil edemediğinizde ne yapacaksınız, sağlık sigortanız ne olacak? Bu konu, ayrı bir yazının konusu olabilir; ama dediğim gibi Türkiye’de serbest çalışmak, yaşam standardını para karşılığı düşürmekten başka bir şey değil. Serbest çalışmak istiyorsanız, günde 8–9 saat mesai gerektiren bir iş &lt;strong&gt;yapmamalısınız&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Uzaktan çalışmak ise, bana göre herkesin muhakkak deneyimlemesi gereken bir şey. İstanbul metropol bir kent. Zaman trafikte harap edilemeyecek kadar kıymetli. Ben yazılım firmalarının yakın zamanda mülakatlarda “Uzaktan çalışma deneyiminiz var mı?” diye soracaklarını düşünüyorum. Örneğin Crossover tamamen uzaktan çalışmaya uygun iş pozisyonları için çalışan arayan bir platform ve Türkiye’de faaliyete geçti. Hiç mülakatlarına katılmadım; ama eminim bu soruyu soruyorlardır. İnternet artık sesli ve görüntülü konuşma yapmak için daha elverişli (en azından telefonla konuşmaya tercih edilebilir durumda), ortak çalışma alanları (co-working space) artık eskisinden daha yaygın. Gürültüden etkilenmiyorsanız, bir kafede kahve içerken saatlerce oturup işinizi yapabilirsiniz veya evinizin bir odasını çalışma odasına çevirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Peki, uzaktan çalışmak ile şirket ofisinde çalışmak arasındaki tek fark çalışma ortamı mı? Hayır. Şirket ofisi size şunları da sağlar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Susadığınızda su her zaman var. Çay, kahve çoğunlukla hazırdır. Oda temizlik hizmeti size bedava, bulaşık derdi yok, tuvalet kağıdının bitmesi neredeyse imkansız, acıkırsanız yemek yiyebileceğiniz yer size çok yakındır.&lt;/li&gt;
&lt;li&gt;Ofise gittiniz ve internetiniz veya elektriğiniz yok, bu şirketin problemi. Gidip başka bir çalışma ortamı aramak zorunda değilsiniz. Çünkü çalışmak zorunda olduğunuz yerde herkesin elektriği, interneti aynı anda kesilmiştir!&lt;/li&gt;
&lt;li&gt;Hastaysanız muhtemelen ofisteki klimadan hastalandınız, zehirlendiyseniz muhtemelen yemekhanedeki bir yemek size dokunmuştur. Geneli böyle olduğu için size pek bir soru sorulmaz. Bir rapor alırsınız, iyileştiğinizde şirkete iletirsiniz.&lt;/li&gt;
&lt;li&gt;Ofisteyseniz, çalışıyorsunuzdur. Değilseniz, çalışmıyorsunuzdur, &lt;strong&gt;çalışmamalısınız&lt;/strong&gt;. Bu kadar net.&lt;/li&gt;
&lt;li&gt;Ofisin kuralları vardır, beraber vakit geçirdiğiniz insanlara karşı saygılı olursunuz. Sosyalleşirsiniz, samimi arkadaşlıklarınız olur. İşinizde yardımlaşır, iş dışında haftasonu piknik, kamp planları yaparsınız.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu şekilde anlatınca ofiste çalışmak uzaktan çalışmaktan daha iyiymiş gibi oldu, farkındayım. Uzaktan çalışmak imrenilen, özenilen, çok basit bir şeymiş gibi göründüğü için, önce neleri kaybedeceğinizi anlattım. Peki bu durumda uzaktan çalışmayı neden tercih edersiniz?&lt;/p&gt;

&lt;p&gt;Cevap basit. Genelde siz tercih etmezsiniz, koşullar onu gerektirir. Şirketiniz yurtdışında olabilir ve siz henüz yurtdışına çıkış şartlarınızı sağlamamış olabilirsiniz. Şirketiniz işinizde daha verimli olmanız için, çalışma ortamı tercihinizi size bırakabilir. Eve gidip gelirken harcadığınız zamanı spor yaparak veya ailenizle birlikte geçirmek, ertesi gün daha verimli olmanızı sağlayacaksa; ofise gelmekle evden çalışmak arasında bir fark görünmüyor ve şirket de masrafları kısıp çalışanın maaşına zam yapmayı düşünürse (ki her ne kadar klasik bir yaklaşım olsa da para iyi bir motivasyon aracıdır) şirket uzaktan çalışmayı çalışanları için bir seçenek olarak görebilir. Siz elinizde bu imkan varsa yararlanırsınız.&lt;/p&gt;

&lt;p&gt;Uzaktan çalışan arkadaşlarımın en çok şikayet ettiği konulardan biri yalnızlık. Etrafınızda çoğu zaman muhabbet edebileceğiniz, beraber çay içebileceğiniz bir insan olmuyor. İş yapmadan zaman geçmiyor, kendi kendinizi motive etmek, kendi disiplininizi sağlamak zorundasınız. İş dışında kalan zamanlarınızı nasıl değerlendirdiğiniz daha bir önemli oluyor, sosyalleşme ihtiyacı duyuyorsunuz, hobiler daha bir anlam kazanıyor. İş bitsin, eve geçeyim demek yerine, daha bir kendinizi dışarı atmak için can atıyorsunuz. Buna ne kadar çabuk alışırsanız, uzaktan çalışma gerektiren işlere psikolojik olarak o kadar çabuk uyum sağlarsınız.&lt;/p&gt;

&lt;p&gt;Bu konu üzerine benim söyleyebileceklerim bunlar. Uzaktan çalışmaya başladığınızda iletişim araçlarına hakim olmak, zamanı yönetmek, hatta akşamları veya haftasonları yapacağınız aktiviteleri tekrar gözden geçirmek önem kazanacak. Son olarak, bu konuyla ilgili daha önce yazılmış paylaşımlara göz atmanızı öneririm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/farslan/remote-work&#34;&gt;Remote Work&lt;/a&gt;, Fatih Arslan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/turkce/evden-%C3%A7al%C4%B1%C5%9Fmak-e8429a7966bb&#34;&gt;Evden Çalışmak&lt;/a&gt;, Abdullah Uğraşkan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@osmanun/maa%C5%9Fl%C4%B1-i%C5%9Fini-b%C4%B1rak%C4%B1p-kendi-i%C5%9Fini-kurmak-%C3%BCzerine-d%C3%BC%C5%9F%C3%BCnceler-34a94bd72659&#34;&gt;Maaşlı İşini Bırakıp Kendi İşini Kurmak Üzerine Düşünceler&lt;/a&gt;, Osman Ungur&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ufukuzun.wordpress.com/2015/05/17/uzaktan-calismak-remote-working/&#34;&gt;Uzaktan Çalışmak&lt;/a&gt;, Ufuk Uzun&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://37signals.com/remote/&#34;&gt;Remote&lt;/a&gt;, 36Signals (&lt;a href=&#34;http://tauslu.com/2015/06/kitap-tanitimi-remote-office-not-required/&#34;&gt;Burada&lt;/a&gt; Tayfun Uslu’nun incelemesi var)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Borsa kumar mı?</title>
      <link>https://gokmengorgen.net/blog/borsa-kumar-mi/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/borsa-kumar-mi/</guid>
      <description>&lt;p&gt;Sabah uyandığınızda pencereden bakıyorsunuz, kar yağıyor. Bugün işe arabayla gitmenin tehlikeli olabileceğini düşünüyorsunuz. Sıkı giyinmeye karar veriyorsunuz; ama diğer taraftan toplu taşımanın da sıkıntılı bir yolculuk olacağını hatırlıyorsunuz. Acaba patronu arayıp bugün evden çalışacağımızı mı söylesek? Çok verimli olmayacağını düşünüp işe gitmeye karar veriyorsunuz. Peki, akşam eve sağ salim dönmenizin garantisini kim verir? Kimse; ama buna rağmen önlemleri almışsınızdır. Olur da işyerinde mahsur kalırsanız, bir günlük erzağınızı da hazırlamışsınızdır. Böylece hayatta kalmayı bir şans olmaktan çıkarırsınız.&lt;/p&gt;

&lt;p&gt;Biz kağıt ve zar oyunlarına neden şans oyunu deriz? Çünkü ne yaparsak yapalım, onları ancak bir yere kadar programlayabiliriz, yönetebiliriz, yönlendirebiliriz. Zarı nasıl atarsak 6 gelir, veya zarı hep 6 gelecek şekilde atabilecek miyiz? Çok zor, şans… Ben Borsa İstanbul’da rastgele bir hisse alsam, bundan bir gelir elde etme şansım var mı? Var; ama tamamen şans. Neden? Çünkü neyi seçtiğimi bilmiyorum. Tamamen gelişigüzel, zamandan bağımsız bir hisse seçmekten bahsediyoruz, tıpki bir kart seçmek gibi.&lt;/p&gt;

&lt;p&gt;Ama bu borsanın bir şans oyunu olduğu anlamına gelmez, bu sadece şansımıza güvenerek borsa oynadığımız anlamına gelir. Oysa biz böyle yapmıyoruz, yapmamalıyız. Eğer ekonominin genel nabzını okuyabilirsek, ilgilendiğimiz endeksleri ve firmaları iyi takip edebilirsek, haberlerini alabilirsek, şirketin durumunu bilirsek, beklentileri doğru okuyabilirsek; kısaca ne işlem yaptığımızı iyi bilebilirsek, borsayı bir şans olmaktan çıkarıp, tercih edilebilir bir yatırım aracı haline getirmiş oluruz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>İşletim sistemi tercihini geliştiriciye bırakın</title>
      <link>https://gokmengorgen.net/blog/isletim-sistemi-tercihini-gelistiriciye-birakin/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/isletim-sistemi-tercihini-gelistiriciye-birakin/</guid>
      <description>&lt;p&gt;Bir yazılım projesine başlarken ihtiyaç duyacağımız ilk şey ne olur diye soracak olursak, sanırım buna “geliştirme ortamı” diyebiliriz. Örneğin bir Android projesi için şunlar gerekli:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android Studio veya Eclipse (ADT)&lt;/li&gt;
&lt;li&gt;Android Java SDK&lt;/li&gt;
&lt;li&gt;Android yüklü donanım veya emulator&lt;/li&gt;
&lt;li&gt;İşletim sistemine göre emulator hızlandırıcı eklentiler (HAXM, qemu, vb)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu ortamı işletim sistemimize kurduğumuzda, iki şeye sahip oluyoruz: Birincisi kod yazabiliyoruz, debug edebiliyoruz, sorunları düzeltebiliyoruz; ikincisi sonucu görmek için uygulamayı yükleyip çalıştırabiliyoruz, test edebiliyoruz, yayınlayabiliyoruz. Bir Windows Phone veya IOS projesi olsaydı, geliştirme ortamı gereksinimleri arasına işletim sistemi de (Windows veya OS X) girecekti; ama Android SDK tüm popüler sistemleri destekliyor, tercih geliştiriciye kalmış.&lt;/p&gt;

&lt;p&gt;Peki web projelerinde durum nasıl? Web projesi için geliştirme ortamı konusunda şu üç yoldan birine başvuruyoruz:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Geliştiriciden projeyi, kullandığı sistemin içine kurmasını talep etmek.&lt;/li&gt;
&lt;li&gt;Geliştiriciye GNU/Linux kullanmaya mecbur bırakmak.&lt;/li&gt;
&lt;li&gt;Emulator kullanmak, geliştiriciler için sanal sunucu paketi oluşturmak.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.’si bence çok kötü fikir. Geliştirici Windows kullanıyorsa karşılaşacağı handikapların sonu yok, production için fayda etmeyecek bir sürü gereksiz düzeltme yapmak zorunda kalabilir. 2.’si de bence kötü fikir. Geliştiricinin alışkın olmadığı bir sistemde, alışkın olmadığı birtakım araçlar kullanarak verimli ve pragmatik olmasını beklemek ne kadar doğru? Velev ki işe alımlarda GNU/Linux kullanıcısı olmak diye bir filtremiz olsun, doğru geliştiriciyi işe almada ne kadar adil ve yardımcı olabilir? Daha önemli bir soru, neden kişisel kullanım için tasarlanmış bilgisayarı bir server’a dönüştüresin?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gokmengorgen.net/img/vagrant-cloud.png&#34; alt=&#34;Vagrant Cloud&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O nedenle, tıpki mobil uygulama geliştirirken kullandığımız gerçek donanım veya emulator gibi, web geliştirmede de benzer bir yöntem uygulamalıyız. VMware veya Virtualbox ile, olabildiğince production’u taklit edebilmeliyiz. Ben bunu vagrant ile çok kolay bir şekilde yapabiliyorum, istediğim işletim sisteminde kullanabiliyorum ve taşıyabiliyorum. Bir başka geliştiriciyle de geliştirme ortamımı paylaşabiliyorum.&lt;/p&gt;

&lt;p&gt;İşletim sistemi tercihi, IIS’ye ihtiyaç duymak gibi çok özel durumlar olmadıkça geliştiriciye bırakılmalı. En verimli nasıl çalışabileceğini en iyi geliştiricinin kendisi bilir.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geliştiriciden işverene dağıtık manifesto</title>
      <link>https://gokmengorgen.net/blog/gelistiriciden-isverene-dagitik-manifesto/</link>
      <pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/blog/gelistiriciden-isverene-dagitik-manifesto/</guid>
      <description>

&lt;p&gt;İdeal bir dünyada yaşamadığımız malum. İşimizi yaparken birçok problemle karşılaşıyoruz; bağırarak yanımızda telefonla konuşanlar, oje sürerken kokusunun ne kadar rahatsız edici olduğunu bilmeyenler, laptopta kullanmak amacıyla bir fare ihtiyacımızı kimin karşılaması gerektiğini tartışanlar veya başkalarına aldırış etmeksizin klimanın ayarlarıyla oynayanlar.. Bunlar her zaman karşımıza çıkacaktır, şuanki dünya düzenini ele alacaksak yapacak çok fazla bir şey yok. Fakat bir nebze de olsa, aklımızdan geçenleri burada manifesto tadında sıralamak faydalı olabilir düşüncesindeyiz. Siz de aynı sıkıntıları yaşıyorsanız, iş arkadaşlarınızla (hatta gücünüz yetiyorsa işvereninizle) paylaşın; maddeler eksik veya yazıyla ilgili eleştiriniz varsa, yorum yazın, forklayın, harekete geçin.&lt;/p&gt;

&lt;h2 id=&#34;sevgili-işverenler&#34;&gt;Sevgili İşverenler&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;Sen ne gerekiyorsa bana söyle, işini güzel yapman için gerekli ortamı sağlamak benim görevim&amp;rdquo; diye düşünüp hareket ederseniz, biz de işimizi düzgün yapmak için elimizden geleni yaparız.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bize telefon, hat, bilgisayar gibi araçları sağlamanın sizin sorumluluğunuz olduğunu düşünürüz. Tablet, dizüstü bilgisayar, gold konuşma paketi vb. sahibi olmamız bu durumu değiştirmez. Hele bilgisayarımıza normalde tercih etmeyeceğimiz yazılımlar kurmak zorunda kalırsak iyice mutsuz oluruz, bu da işe yansır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nasıl ki sizin sağlık ve aile öncelikliyse, bizim için de öyle. İş çabuk bitsin diye fazla mesaiye zorlanmak, sıradaki işler ve ailemiz için yeterli enerjimiz kalmaması anlamına geliyor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bir işin ne zaman biteceğine ne biz, ne de siz karar verebilirsiniz. Doğru geliştiriciyi, doğru işte çalıştırırsanız, tahmini süreyi, ne gibi problemlerle karşılaşacağınızı ona sorabilirsiniz. &amp;ldquo;İki dakikalık iş&amp;rdquo; diye bir şey yoktur.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Müşteri sabırsızdır, bunu biz de biliyoruz. Bize işleri kısa zamanda bitirmek için psikolojik baskı yapmak yerine, harcanacak fazladan çabanın karşılığını verin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Acil durumlarda alanımız dışında işlere girebiliriz ama normal günler için görev dağılımı gereklidir. Bir geliştiriciyi hem ön yüz, hem sunucu bakımı, hem de yazılımın geliştirilmesi için kullanmaya çalışırsanız, üstüne üstlük bir de “bizim yeğenin okulunun sitesi var sen çıkarıverirsin aradan” derseniz, o adam kaçar. Biz isviçre çakısı değiliz.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eğer geleceğimiz ve ailemiz için endişe duyarsak, iş değiştirmemiz çok doğal. Bu nedenle önümüze süreli iş sözleşmesi, verilmiş sözler, hisse vaatleri sunarak bizi kendinize bağlamaya çalışmayın. Ne istediğimizi öğrenin, teklif edin. Bazı şeylerin &amp;ldquo;zamanında&amp;rdquo; mutluluğu daha önemlidir. Bir aile, her şeye bedel.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bizi motive etmek istiyorsanız, projeye ne kadar masraf yaptığınızı, nelerden feragat ettiğinizi anlatmayın. Elbette çalıştığı şirket hakkında bazı bilgiler edinmek güzeldir; ama bize &amp;ldquo;Eğer bu iş bitmezse, çocuğumuzu keserler.&amp;rdquo; diyerek işlerin daha çabuk biteceğini, bizim işi bırakmaktan vazgeçeceğimizi beklemeyin. Duygusal sömürüden uzak durun, bizim feragatlarımızı görmezden gelmek durumunda kalabilirsiniz.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Biz uzun süreler için yoğunlaşmamız gereken bir iş yapıyoruz. Her gün toplantı yapmak her ne kadar “önemli iş yapıyoruz” duygusunu pekiştirse de, bizim dağılmamıza sebep oluyor. Toplantı sadece 5 dakika olsa bile bize saatler kaybettirebiliyor. Eğer konu birkaç kişiyi ilgilendiriyorsa, bütün ekibi toplantıya davet etmenin anlamı yok. Maksat herkesi bilgilendirmekse, bunun için e-posta göndermek, şirket içi paylaşım sayfalarında blog girdisi yazmak gibi çok daha az rahatsız edici yöntemlere başvurun.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bize verdiğiniz maaşın neyi temsil ettiği konusunda bizimle anlaşın. Biz, yaptığımız iş için değil, o işe harcadığımız zaman için ücret talep ederiz. Gün boyunca hiç kod yazmamış olmamız, o gün çalışmadığımız veya o gün için ücret almayacağımız anlamına gelmez. İşte geçirdiğimiz süreye veya yazdığımız kodun satır sayısına göre performansımızı ölçemezsiniz. Mal ölçecekseniz tuğla fabrikası açın, akşamları eve gitmeden sayarsınız.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bir işi yapmamız, bitirmemiz için ekip ile çalışılmıyorsa veya bütün ekibin ofiste olması gerekmiyorsa, bizim ofiste bulunma zorunluluğumuz saçmalıktan ibarettir.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;notlar&#34;&gt;Notlar&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bazı maddelerin nasıl anlaşıldığı, nasıl yazılmasının daha doğru olacağı konusunda birçok kişinin görüşleri alınmış ve onların görüşleriyle beraber maddeler tekrar tekrar yazılmıştır. Yazıyı yazarken görüş bildiren herkese teşekkürler.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Görüş bildirenlerin bazıları kendi yaşadıkları tecrübelerini belli ortak maddelerde paylaşmıştır.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;11. maddeyle ilgili olarak, 37signals&amp;rsquo;in CEO&amp;rsquo;su Jason Fried&amp;rsquo;in &amp;ldquo;Why work does not happen at work&amp;rdquo; isimli konuşmasını izleyebilirsiniz: &lt;a href=&#34;http://www.ted.com/talks/jason_fried_why_work_doesn_t_happen_at_work.html&#34;&gt;http://www.ted.com/talks/jason_fried_why_work_doesn_t_happen_at_work.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python’da Karakter Dizisi İşlemleri</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/pythonda-karakter-dizisi-islemleri/</link>
      <pubDate>Fri, 24 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/pythonda-karakter-dizisi-islemleri/</guid>
      <description>&lt;p&gt;(&lt;a href=&#34;http://www.gokmengorgen.net&#34;&gt;http://www.gokmengorgen.net&lt;/a&gt; adresinden alıntıdır.)&lt;/p&gt;

&lt;p&gt;Geçenlerde bir arkadaşım, Python 3′te &lt;strong&gt;gettext&lt;/strong&gt; modülünün nasıl kullanılacağını sormuştu, ben de henüz 3.* sürümünü denemediğim için bir cevap verememiştim. Hala da verebilecek aşamada değilim; ama bu konu üzerinde biraz araştırma yaparken, ilginç bir internet sayfasıyla&lt;a href=&#34;http://www.python.org/dev/peps/pep-3101/&#34;&gt;1&lt;/a&gt; karşılaştım. Aşağıda paylaşacağım kodların ve bilgilerin Python 2.* serisinde çalışmaması söz konusu olabilir.&lt;/p&gt;

&lt;p&gt;Python’da karakter dizilerini iki biçimde çağırabiliyoruz:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Karakter dizileri için % işleyicisi&lt;a href=&#34;http://docs.python.org/library/stdtypes.html#string-formatting-operations&#34;&gt;2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;string.Template modülü&lt;a href=&#34;http://docs.python.org/library/string.html#string.Template&#34;&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;%&lt;/strong&gt; işleyicisiyle kullanım örneği, Python belgelerinde verilmiş:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;%(language)s has %(#)03d quot types.&#39; % {&#39;language&#39;: &amp;quot;Python&amp;quot;, &amp;quot;#&amp;quot;: 2})
#Python has 002 quot types.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu kodda değişkenler bir sözlük içinde eşleştirilmekte ve print çıktısında tanımlanmış değerleriyle ekrana yazılmaktadır. Bunun aynısı şu şekilde de yapabilirdik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;%s has %03d quot types.&#39; % (&amp;quot;Python&amp;quot;, 2))
#Python has 002 quot types.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Birincisine göre daha basit olsa da, birinci kodda şöyle bir avantaj söz konusudur:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;The %(first)s variable, and the %(second)s variable.&#39; % {&#39;second&#39;: &amp;quot;New&amp;quot;, &#39;first&#39;: &amp;quot;Old&amp;quot;})
#The Old variable, and the New variable.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu şekilde kullandığımız zaman, ikinci işleyiciyi ilk olarak tanımlayıp, ikinci işleyiciyi ise sonra tanımlayabilme fırsatımız olabiliyor. Nerelerde kullanılabileceği ayrı bir merak konusu. Bu merakı gidermeden önce bir de şu şekilde kullanıma bir bakalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;The {1} variable, and the {0} variable.&#39;.format(&amp;quot;New&amp;quot;, &amp;quot;Old&amp;quot;))
#The Old variable, and the New variable.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İlginç, değil mi? Aslında bu kadar çeşitlilik olması garibime gidiyor; ama bu son yöntemin yüksek seviye programlama diline daha yakın bir tarz olduğunu düşünmeden edemiyorum. Yanılmıyorsam bu tip kullanım, C# ve Java’da da var. Şimdi son olarak aşağıdaki kodu inceleyelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

class Main:
    def __init__(self):
        print(&amp;quot;Python version is, {0}.&amp;quot;.format(sys.version[:5])) # print&#39;lerin yazimina dikkat..

        digits_list = self.digits()

        print(&amp;quot;{1} is bigger than {0} as digit.&amp;quot;.format(digits_list[0], digits_list[1]))

    def digits(self):
        try:
            first_digit = int(input(&amp;quot;Please write a digit: &amp;quot;)) # raw_input yerine input kullaniliyor.
            second_digit = int(input(&amp;quot;And second digit: &amp;quot;))

        except ValueError:
            print(&amp;quot;\nSorry, you must enter a digit.&amp;quot;)
            exit()

        return self.sort(first_digit, second_digit)

    def sort(self, x, y):
        return sorted([x,y])

if __name__ == &amp;quot;__main__&amp;quot;:
    Main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kodun yaptığı şey basit: Sizden iki sayı girmeniz isteniyor ve sayıları, büyüklüklerine göre {0} ve {1} ile eşleştirip, “X, Y’den sayıca büyüktür.” gibisinden bir cümle döndürüyor. Kod basit olduğu için bu tip karakter dizisi işleyicilerin faydası pek belli olmuyor; ama mutlaka bir yerde faydası vardır =). Son kodun çıktısı şu şekilde:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[gkmngrgn@gacer ~]$ python3 rank.py
Python version is, 3.0.1.
Please write a digit: 3
And second digit: 1
3 is bigger than 1 as digit.
[gkmngrgn@gacer ~]$
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Django Notları - 3</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/django-notlar-3/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/django-notlar-3/</guid>
      <description>

&lt;p&gt;Django&amp;rsquo;da şablon kavramını anlatmadan önce, şablondan ne anlamamız gerektiği konusunu belirginleştirelim. Örneğin, cep telefonlarımızda hazır mesajlar yazıp kaydedebiliyoruz veya daha önce kaydedilmiş olanları gerektiğinde kullanabiliyoruz. &amp;ldquo;İşteyim, döneceğim&amp;rdquo;, &amp;ldquo;Beni 10 dakika sonra ara.&amp;rdquo; gibi &lt;strong&gt;bence&lt;/strong&gt; gereksiz olan bu hazır mesajlar şablon diye geçiyor.&lt;/p&gt;

&lt;p&gt;Ama Django&amp;rsquo;daki şablonlarımız, projemizin çok önemli bir parçası olarak karşımıza çıkıyor. Bir veya birkaç değişkene, bütün veya parça halinde html kodlarını yazmak; tanımladığımız fonksiyonları o değişkene çağırmak ve bu kodu yorumlatmak, kodu hem çirkinleştirecek; hem de projenin gelişimini çok zorlaştıracaktır.&lt;/p&gt;

&lt;p&gt;Şimdi saat bilgilerini ekrana yazdırdığımız fonksiyonun kodlarını ve urls.py dosya içeriğini tekrar verelim. &lt;strong&gt;views.py&lt;/strong&gt; dosyamız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

from django.http import HttpResponse
import datetime

def current_datetime(request):
    now = datetime.datetime.now()
    html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Saat ve tarih bilgisi: %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; % now
    return HttpResponse(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;urls.py dosyamız:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *
from mysite.views import current_datetime

urlpatterns = patterns(&#39;&#39;,
    (r&#39;^time/$&#39;, current_datetime),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burada html değişkenine atadığımız html kodu kısa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Saat ve tarih bilgisi: %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi bu kodu, html uzantılı olarak ayrı bir yere kaydedelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Merhaba Django!&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;

      body {background-color: #aaa}
      p {font-size: 12px}
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;Cancanlı django&#39;muzla zaman bilgilerimizi öğrenelim: {{ zaman }}&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Birşey dikkatınızı çekti mi? &lt;strong&gt;{{ zaman }}&lt;/strong&gt; diye birşey yazdık, nedir o? Hayır, html ile ilgili bir özellik değil. Şimdi proje dizinimizde templates diye bir alt dizin oluşturalım ve bu kodu &lt;strong&gt;zaman.html&lt;/strong&gt; olarak, bu alt dizinin içine kaydedelim. Sıra geldi, Django&amp;rsquo;muza şablon dizinimizin nerede olduğunu tanımlamaya. &lt;strong&gt;settings.py&lt;/strong&gt; dosyasını açın ve şu satırları bulun:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[...]

ROOT_URLCONF = &#39;negzelfoundation.urls&#39;

TEMPLATE_DIRS = (
)

[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TEMPLATE_DIRS&lt;/strong&gt; tüpüne, &lt;strong&gt;templates&lt;/strong&gt; dizinimizi eleman olarak yazmamız gerekiyor. Burada python bilgilerinizi istediğiniz gibi kullanabilirsiniz. İsterseniz, &lt;strong&gt;os.path&lt;/strong&gt; modülünü çağırıp yapabilirsiniz, şu şekilde:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[...]
import os.path

[...]
TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(__file__), &#39;templates&#39;).replace(&#39;\\&#39;,&#39;/&#39;),
)
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;replace&lt;/strong&gt;&amp;lsquo;in ne işe yaradığını umarım biliyorsunuzdur. Posix standardındaki işletim sistemlerinde sanırım ona gerek yok. Ama siz de benim gibi, bunun için os.path import etmeye gerek yok derseniz, şu şekilde de templates dizinini Django&amp;rsquo;ya göstertebilirsiniz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[...]
ROOT_PATH = &amp;quot;/proje/dizin/yolunu/buraya/yazin&amp;quot;

[...]
TEMPLATE_DIRS = (
    &#39;%s/templates&#39; % ROOT_PATH,
)
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buraya kadar tamam; ama hala &lt;strong&gt;{{ zaman }}&lt;/strong&gt;&amp;lsquo;ın ne olduğunu hala söylemedik. Şimdi &lt;strong&gt;views.py&lt;/strong&gt; dosyasındaki &lt;strong&gt;current_datetime&lt;/strong&gt; fonksiyonunu, gerekli modülleri çağırıp tekrar tanımlayalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
import datetime

def current_datetime(request):
    now = datetime.datetime.now()
    t = get_template(&#39;zaman.html&#39;)
    c = Context({&#39;zaman&#39;: now},)

    html = t.render(c)
    return HttpResponse(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;get_template&lt;/strong&gt;, şablonu çağırmak için; &lt;strong&gt;Context&lt;/strong&gt; ise, fonksiyonda tanımladığımız değişkenleri, şablonumuzdaki &lt;strong&gt;{{ zaman }}&lt;/strong&gt; gibi ifadelere bağlamamız için çağrıldı. Sonra, html değişkeninde bağlamları şablonda çevirtip, bir sonraki satırda da bu değişkeni döndürüyoruz. Bakalım nasıl dönmüş:&lt;/p&gt;

&lt;p&gt;(ekran görüntüsü yok)&lt;/p&gt;

&lt;p&gt;Huh, iyi eğleniyoruz ;-).&lt;/p&gt;

&lt;h2 id=&#34;şablonlarda-etiketler&#34;&gt;Şablonlarda Etiketler&lt;/h2&gt;

&lt;p&gt;Örnek olarak oluşturduğumuz &lt;strong&gt;zaman.html&lt;/strong&gt; şablosunda bildiğiniz gibi css, javascript ve html kodlaması yapabilirsiniz. Fakat zaman zaman PHP&amp;rsquo;de olduğu gibi, belli bir şarta bağlı olarak tekrar edilmesi istenen veya koşulun yerine getirilip getirilmediğine göre değişen fonksiyon cevapları ihtiyacı duyabiliriz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;[...]
&amp;lt;ul&amp;gt;
  {% hede fonksiyonu tamamlandığı sürece %}
  &amp;lt;li&amp;gt;{{ hede }}&amp;lt;/li&amp;gt;
  {% döngü sonu %}
&amp;lt;/ul&amp;gt;
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi şöyle bir örnek yapalım. Üç satırlık bir liste oluşturalım, ilk satırda şuanki saat, bir sonrakinde bir saat sonraki saat, ondan sonrakinde de iki saat sonraki saati yazdıralım. İlk olarak, &lt;strong&gt;views.py&lt;/strong&gt; dosyamızda bizim için gerekli modülleri çağıralım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
import datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;clock_list&lt;/strong&gt; isimli fonksiyonumuzu oluşturalım. Örneğimiz için sadece saat bilgisini almak bizim için yeterli:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def clock_list(request):
    time = int(datetime.datetime.now().hour)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sonra, fazla kafamızı bulandırmadan; şimdilik &lt;strong&gt;neden&lt;/strong&gt;, &lt;strong&gt;niçin&lt;/strong&gt; demeden, sonradan oluşturacağımız &lt;strong&gt;saat.html&lt;/strong&gt; isimli şablonu çağırıp, saat değişkenimizi (time) şablona gömerek sayfayı döndürelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def clock_list(request):
    time = int(datetime.datetime.now().hour)
    time_list = []
    phrase_list = []
    for x in range(3):
        time_list.append(time + x)
        phrase_list.append(&amp;quot;%s saat sonra, akrep %s gösterecek.&amp;quot; % (x, time_list[x]))

    t = get_template(&#39;saat.html&#39;)
    c = Context({&#39;phrases&#39;: phrase_list},)
    html = t.render(c)
    return HttpResponse(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evet. Ama daha saat.html isimli örnek şablonumuzu oluşturmadık. Örnek olarak yazım &lt;strong&gt;templates&lt;/strong&gt; dizinine alalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Merhaba Django!&amp;lt;/title&amp;gt;

    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      body {background-color: #e0ffb8}
      ul {border: 1px solid #333; padding: 0}
      li {border: 1px solid #aaa; list-style-type: none}
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;center&amp;gt;

      &amp;lt;ul&amp;gt;
        {% for phrase in phrases %}
        &amp;lt;li&amp;gt;{{ phrase }}&amp;lt;/li&amp;gt;
        {% endfor %}
      &amp;lt;/ul&amp;gt;
    &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;ul&amp;gt; tagı içinde bi for döngüsü yazmışız, farkettiniz mi? &lt;strong&gt;views.py&lt;/strong&gt;&amp;lsquo;de tanımladığımız &lt;strong&gt;clock_table&lt;/strong&gt; fonksiyonumuzda oluşturulan listenin her bir elemanı için ekrana bir liste elemanı yazdırıyoruz. Üç adet liste için belki değmez, belki de statik sonuçlar için bu kadar atraksiyonu gereksiz bulabiliriz; fakat sonucu değişebilecek, 100 maddelik bir listeyi yazmayı pek göze alacak değiliz, biz pratik programcılar için..&lt;/p&gt;

&lt;p&gt;Evet, &lt;strong&gt;saat.html&lt;/strong&gt; dosyamız da hazır. Son olarak bu fonksiyonu bir sayfaya atayalım. &lt;strong&gt;urls.py&lt;/strong&gt;&amp;lsquo;yi düzenliyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls.defaults import *
from mysite.views import clock_list, current_datetime, hours_ahead

urlpatterns = patterns(&#39;&#39;,
    (r&#39;^clocks/$&#39;, clock_list),
    (r&#39;^time/$&#39;, current_datetime),
    (r&#39;^time/artir/(\d{1,2})/$&#39;, hours_ahead),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nereye atamışız? &lt;a href=&#34;http://adresimiz/clocks/&#34;&gt;http://adresimiz/clocks/&lt;/a&gt; sayfasına.. &lt;strong&gt;python manage.py runserver&lt;/strong&gt; ile sanal sunucumuzu çalıştırıp &lt;a href=&#34;http://127.0.0.1:8000/clocks/&#34;&gt;http://127.0.0.1:8000/clocks/&lt;/a&gt; adresinden bir bakalım nasıl olmuş:&lt;/p&gt;

&lt;p&gt;(ekran görüntüsü yok)&lt;/p&gt;

&lt;p&gt;Eh, bu da fena değil. Biz burada döngülerin nasıl kullanılacağı üzerine, &lt;strong&gt;for&lt;/strong&gt; ile bir örnek göstererek öğrenmiş olduk. &lt;strong&gt;if&lt;/strong&gt;&amp;lsquo;tir, &lt;strong&gt;else&lt;/strong&gt;&amp;lsquo;tir, &lt;strong&gt;ifequal&lt;/strong&gt; ve benzeri diğer döngülerdir, bunların hepsi aynı mantıkla yazılıp kullanılmaktadır. Bu konuda teker teker örnek vermek yerine, şu1 linkteki kodları incelemeniz, sizin için fazlasıyla yeterli olacaktır. Eğer yine de değinilmesini istediğiniz önemli bir nokta varsa, bunu bize bildirmekten çekinmeyin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django Notları - 2</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/django-notlar-2_09/</link>
      <pubDate>Tue, 09 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/django-notlar-2_09/</guid>
      <description>

&lt;p&gt;Bir içerik düşünün, bulunduğunuz sayfanın linki ile ilişkilendirilmiş. Çağrılan sayfanın adresine göre, tanımladığınız fonksiyonları kullanmak, o sayfada görüntülemek istiyorsunuz. Peki bunu nasıl yapabiliriz? Önceki örneğimizde, fonksiyonlarımızı nerede tanımlayıp (views.py), adresleri nerede tanımlayacağımızı (urls.py) öğrenmiş olduk. Bu araçları kullanarak, web tarayıcımızda zaman bilgilerini göstermeyi başardık.&lt;/p&gt;

&lt;p&gt;Şimdiki örneğimiz ise, dinamik internet sayfalarını nasıl oluşturacağımız ile ilgili. Amacımız basit; adresteki dizin numarasıyla sayfamızdaki saat bilgisini ilişkilendirmek; yani dizin numarası kaçsa, sayfamız da o kadar saat ileriyi gösterecek. İşte, views.py&amp;rsquo;deki zaman fonksiyonumuz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hours_ahead(request, offset):
   offset = int(offset)
   dt = datetime.datetime.now() + datetime.timedelta(hours=offset)
   html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;%s saat sonra zaman şöyle olacak: %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; % (offset, dt)
   return HttpResponse(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evet, bu kodu views.py dosyasına aynen yazıyoruz. Fonksiyonun amacı gayet basit. &lt;strong&gt;dt&lt;/strong&gt; isimli değişken, sayfa adresindeki dizin numarası değerini alıyor ve o &lt;strong&gt;integer&lt;/strong&gt; olarak belirlenmiş değeri saat değişkenine ekliyor. Şimdi &lt;strong&gt;urls.py&lt;/strong&gt;&amp;lsquo;ye dönelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.conf.urls.defaults import *
from mysite.views import current_datetime, hours_ahead

urlpatterns = patterns(&#39;&#39;,
   (r&#39;^time/$&#39;, current_datetime),
   (r&#39;^time/artir/(\d{1,2})/$&#39;, hours_ahead),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;mysite&lt;/strong&gt; dizinindeki &lt;strong&gt;views.py&lt;/strong&gt; dosyasında tanımladığımız &lt;strong&gt;current_datetime&lt;/strong&gt; fonksiyonunu çağırdığımız gibi, &lt;strong&gt;hours_ahead&lt;/strong&gt;&amp;lsquo;ı da çağırdık ve &lt;strong&gt;urlpatterns&lt;/strong&gt;&amp;lsquo;te, fonksiyonumuzun çalışacağı sayfayı tanımladık. Fakat dikkat edin, sayfa adresimiz tam belli bir sayfayı belirtmiyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    (r&#39;^time/artir/(\d{1,2})/$&#39;, hours_ahead),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(ekran görüntüsü yok)&lt;/p&gt;

&lt;h2 id=&#34;düzenli-ifadeler&#34;&gt;Düzenli İfadeler&lt;/h2&gt;

&lt;p&gt;Son yazdığımız kodda, (\d{1,2}) ifadesinin ne anlama geldiğini söyleyeyim. Bu bir düzenli ifadedir. Yani biz burada &amp;ldquo;\d&amp;rdquo; kullanarak değerin sayı olduğunu, {1,2} ile de değerin 1, 2 veya bunların arasında bir değer olduğunu belirtmiş olduk. İnternette &amp;ldquo;regular expressions programming&amp;rdquo; şeklinde araştırma yaparsanız, bir çok kaynak bulabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;urls.py&amp;rsquo;de kullanabileceğiniz belli başlı düzenli ifadeleri bir tabloyla gösterelim:&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Editörün notu : Bu bölümü ayırdım. &lt;a href=&#34;http://pythontr.blogspot.com/2008/09/dzenli-ifadelelerde-kullanlan.html&#34;&gt;Buradan bulabilirsiniz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Şimdi örneğimize geri dönelim. &lt;strong&gt;urls.py&lt;/strong&gt; dosyasında belirtmiştik ki, sayfa adresinde 1 ve 2 basamaklı sayılar &lt;strong&gt;views.py&lt;/strong&gt;&amp;lsquo;de tanımlanan &lt;strong&gt;hours_ahead&lt;/strong&gt; fonksiyonumuzla ilişkilendirilsin. Fonksiyonun amacı neydi? Sayfa adresinde belirtilen değeri şuanki saate eklemek. Eğer &lt;strong&gt;urls.py&lt;/strong&gt;&amp;lsquo;de belirtilen 1 ve 2 basamaklı değerlerin dışında bir sayı girersek ne olur peki? Deneyelim:&lt;/p&gt;

&lt;p&gt;(ekran görüntüsü yok)&lt;/p&gt;

&lt;p&gt;Bu sayfanın tasarımı bile harika..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django Notları - 1</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/djangoya-balamak_06/</link>
      <pubDate>Sat, 06 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/djangoya-balamak_06/</guid>
      <description>

&lt;h2 id=&#34;girizgah&#34;&gt;Girizgah&lt;/h2&gt;

&lt;p&gt;Merhabalar. Bu belge, Django&amp;rsquo;yu öğrenirken DjangoBook1 sitesinden aldığım, biriktirdiğim notlardan oluşmuştur. Belgenin tamamen kusursuz olduğu veya anlatımının çok iyi olduğu konusunda bir garanti vermiyorum; fakat yine de size yardımcı olabilecek notlar bulabileceğinizi umuyorum. Ayrıca, belge ile ilgili bir yanlışlık veya anlatmamı istediğiniz bir nokta olursa, eposta adresimi kullanarak benimle iletişime geçebilirsiniz:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Not:&lt;/strong&gt; Django&amp;rsquo;nun ne olduğu, neden onu seçmemiz gerektiği; bu projenin hangi amaçla ortaya çıkarıldığı ve gelişimi hakkında bilgiler, belgeyi kısa tutmak için verilmemiştir. İnternet zengin bir okyanus :-)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;django-ya-başlamak&#34;&gt;Django&amp;rsquo;ya Başlamak&lt;/h2&gt;

&lt;p&gt;Çok değil, Şubat 2007&amp;rsquo;den beri GNU / Linux kullanıyorum ve onu kullanmaya başlamakla programlamaya ilgim hemen hemen aynı zamanlara denk geliyor. İnternet sitesi tasarımlarına ve programlamasına ilgi duyduğum için ilk olarak PHP&amp;rsquo;ye yönelmiştim ve hiçbir şekilde &lt;strong&gt;framework&lt;/strong&gt;&amp;lsquo;un ne anlama geldiğini, ne işe yaradığını çözemememiştim. Hatta bir ara framework ile kastedilen şeyin Wordpress, Joomla ve benzeri şeyler olduğunu zannederdim (belki onlara da framework deniliyor olabilir). İngilizce sözlüğe baktığım zaman karşıma çıkan Türkçe anlamları da beni bir o kadar çıldırtmaya yeterdi: Çatı, çerçeve, web çatısı, web framework.. Yeni başlayan, tecrübesiz kişiler için bu sözcükler gerçekten bir anlam ifade etmiyor.&lt;/p&gt;

&lt;p&gt;Sonra, güzel bir deneyim yaşadım. Ben yapacağım her site için tekrar tekrar açıp kodlara bakmak durumunda mıyım? Örneğin, alt tarafı sitenin ana sayfasında bir yazı göstermek için her defasında kodlarla cebelleşmek ne kadar akla mantığa uygundur? Üstelik zaman kavramı da hayatımızın her alanında olduğu gibi, programlamada da son derece önemli, sizce de öyle değil mi? Sıfırdan site yapmak yerine Joomla kuralım, temasını biraz değiştiririz, hazır site kalıbından çıkarmak da çok zor bir şey olmasa gerek hem, öyle değil mi?&lt;/p&gt;

&lt;p&gt;Nitekim, nasıl ki kaslarımızı amacı doğrultusunda daha rahat kullanabilmek için kemiklere ihtiyaç duyuyorsak, yapacağımız siteler için de güzel bir altyapıya ihtiyaç duymamız olası, hele ki Python&amp;rsquo;da. İşte, buna &lt;strong&gt;framework&lt;/strong&gt; deniyor. Düşünün, bir forum veya portal site yapacaksınız. Ama yönetim arayüzü yok :-). Ya da hiç düşünmeyin, hemen Django&amp;rsquo;yu kullanabilmemiz için neler gerekiyor, ona bakalım.&lt;/p&gt;

&lt;h2 id=&#34;django-için-gerekli-programlar&#34;&gt;Django İçin Gerekli Programlar&lt;/h2&gt;

&lt;p&gt;Kullandığınız dağıtım veya işletim sistemine göre kurulumları değişeceği için, nasıl kurulacağını burada anlatamayacağım. Basit bir araştırma yeter diye umuyorum.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Veritabanı tercihinize göre, Python&amp;rsquo;a veritabanı desteği:

&lt;ul&gt;
&lt;li&gt;Mysql&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Sqlite&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Not:&lt;/strong&gt; Dipnotlarda verilen linkleri kullanmadan önce Paket Yönetici&amp;rsquo;nizde araştırma yapınız. Tek başlarına çalışmamakla birlikte, birkaç bağımlılığa da ihtiyaç duymaktadırlar. Örneğin &lt;strong&gt;python-mysql&lt;/strong&gt;&amp;lsquo;in MySQL&amp;rsquo;a ihtiyaç duyması gibi&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;nihayet-projemizi-başlatıyoruz&#34;&gt;Nihayet Projemizi Başlatıyoruz&lt;/h2&gt;

&lt;p&gt;Django için gerekli paketler kurulduktan sonra, projenizi barındırabileceğiniz uygun bir dizinde ilk olarak şu komutu veriyoruz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gkmngrgn ~/programming  $  django-admin.py startproject mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Böylece mysite dizinimiz ve dizin içinde de proje için gerekli dosyalarımız oluşturulacak:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysite/
    __init__.py
    manage.py
    settings.py
    urls.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Projemiz ile ilgili yapacağımız tüm işlemler, oluşturduğumuz &lt;strong&gt;mysite&lt;/strong&gt; isimli dizinimizde yapılacak. Diyelim önemli değişiklikler yaptınız ve sitenizi web tarayıcınız ile kontrol etmek istiyorsunuz. O zaman &lt;strong&gt;mysite&lt;/strong&gt; dizinimizde şu komutu vermeniz gerekir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gkmngrgn ~/programming/mysite $  python manage.py runserver
Validating models...
0 errors found.

Django version 1.0, using settings &#39;mysite.settings&#39;
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evet, komutun çıktısında da görebileceğiniz gibi, sitenizi &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt; adresinden kontrol edebilirsiniz. İşlemi sonlandırmak için &lt;strong&gt;CONTROL-C&lt;/strong&gt; tuş kombinasyonunu kullanmanız yeterli. İsterseniz, sonraki adıma geçmeden önce bir bakalım, localhost&amp;rsquo;tan nasıl görünüyor?&lt;/p&gt;

&lt;p&gt;(ekran görüntüsü eksik)&lt;/p&gt;

&lt;p&gt;Çok tatlı, öyle değil mi? Şimdi proje dizinimizde (mysite) &lt;strong&gt;views.py&lt;/strong&gt; isminde bir dosya oluşturup, örnek olarak şunları yazalım, açıklama satırlarını (en baştaki hariç, diğer &amp;ldquo;#&amp;rdquo; ile başlayan satırlar) yazmasanız da olur:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-
# Önce Türkçe karakter desteğimiz için utf-8&#39;i yazdık.
# Şimdi gerekli modülleri çağıralım.
from django.http import HttpResponse
import datetime

# Sonra da datetime ile saat &amp;amp; tarih bilgilerini alarak HttpResponse&#39;u döndürelim.
def current_datetime(request):
    now = datetime.datetime.now()
    html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Saat ve tarihimizi, python modülü kullanarak yazdırdık: %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; % now
    return HttpResponse(html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Proje dizinimizdeki var olan örnek &lt;strong&gt;urls.py&lt;/strong&gt; dosyasını da şu şekilde değiştirelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

from django.conf.urls.defaults import *

# views.py dosyasında yazdığımız fonksiyonu burada çağırıyoruz.
# ama hangi sayfaya..
from mysite.views import current_datetime

# işte hangi sayfaya olduğunu buradan belirliyoruz.
urlpatterns = patterns(&#39;&#39;,
    (r&#39;^time/$&#39;, current_datetime),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu iki kod hakkında şimdilik sadece &lt;a href=&#34;http://localhost:8000/time&#34;&gt;http://localhost:8000/time&lt;/a&gt; sayfasına, zaman ile ilgili bilgilerimizi yazdırdığımızı söyleyeyim. &lt;strong&gt;Dikkat edin&lt;/strong&gt;, eğer Python dosyalarınızda Türkçe karakter kullanırsanız, kodun başına şunu eklemeyi unutmayın:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hadi, hazır &lt;strong&gt;python manage.py runserver&lt;/strong&gt; komutu yürürlükteyken, bir de şu linke bakalım; &lt;a href=&#34;http://127.0.0.1:8000/time:&#34;&gt;http://127.0.0.1:8000/time:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ekran görüntüsü eksik)&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;NOT:&lt;/strong&gt; Saat yanlış mı gösteriyor? settings.py dosyasını açın. TIME&lt;em&gt;ZONE satırını kendinize göre ayarlayın. Türkiye için:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[...]

# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = &#39;Europe/Istanbul&#39;

[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bir dahaki yazımızda emeklemeye başlayacağız.. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turşular ve Birkaç Os Fonksiyonu - 1</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/turular-ve-birka-os-fonksiyonu-1/</link>
      <pubDate>Wed, 27 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/turular-ve-birka-os-fonksiyonu-1/</guid>
      <description>&lt;p&gt;Python kodlaması yaparken, terminalde çok sık kullandığım birçok komutu birer parametreyle halledebileceğim bir program yazmıştım ve geçenlerde de duyurmuştum: Tiss. Parametresiz haliyle, sadece uzantılarına göre silmesini istediğim dosyaları, boş dizinleri ve python programı inşa ederken ortaya çıkan inşa dizinini siliyor. Örneğin, hede.txt dosyasını Vim&amp;rsquo;de yazıp tekrar kaydettiğimde, aynı dizinde hede.txt~ dosyası oluşuyor. Bir tane olsa hadi neyse; ama bazen .pyc, #, ~, .db gibi bir sürü gereksiz dosya öyle birikiyor ki, gerçekten tek bir komuta ihtiyacınız olabiliyor. Hangi parametreyle, ne yaptığını sitesindeki[1] kodlara bakarak görebilirsiniz. Yakında ana sayfasına parametreler hakkında bilgi gireceğim.&lt;/p&gt;

&lt;p&gt;Sonra dedim ki, ben parametresiz haliyle belli uzantılara sahip dosyaların silmesini sağlıyor olabilirim; ama ya kullanıcı bu uzantıları değiştirmek isterse? Ya benim öntanımlı olarak yazdığım uzantıların birkaçını kaldırmak istiyorsa? Bu halde kullanıcıyı, koda elle müdahale etmeye ve sonra tekrar kurmaya zorlamış olmuyor muyum? Oluyorum tabi ki..&lt;/p&gt;

&lt;p&gt;Bu nedenle, birçok program gibi, Tiss&amp;rsquo;in de ev dizininde, ayar dosyalarının saklandığı bir dizin olacaktı: .tiss. Kodu açıp baktığımda, uzantıları bir listede tuttuğumu gördüm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;backup_extensions = [&#39;*~&#39;, &#39;#*#&#39;, &#39;*.db&#39;, &#39;*.lay&#39;, &#39;*.pyc&#39;, &#39;*.log&#39;, &#39;*.ini&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm. Şimdi şöyle yapabiliriz. Eğer kullanıcı programı ilk defa çalıştırıyorsa veya ayarlarda hiçbir değişiklik yapmamışsa, öntanımlı olarak yukarıdaki listeyi silme fonksiyonunda kullanacağız. Hadi yapalım. Önce bize lazım olacak modülleri içe aktaralım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os, glob, pickle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Şimdi de lazım olacak değişkenleri tanımlayalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class files:
    def __init__(self):
        self.home = os.environ[&#39;HOME&#39;]
        self.tiss_home = os.path.join(self.home, &#39;.tiss&#39;)
        self.data_remove = os.path.join(self.tiss_home, &#39;remove.pickle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;os.environ[&amp;lsquo;HOME&amp;rsquo;]&lt;/strong&gt; ile, kullanıcının ev dizininin çıktısını alıyoruz. &lt;strong&gt;os.path.join&lt;/strong&gt;&amp;lsquo;i kullanarak ev dizin yoluna &amp;lsquo;.tiss&amp;rsquo; ekliyoruz. Üçüncü değişkeninse ikinci değişkenden bir farkı yok. Şimdi bu değişkenleri kullanarak &lt;strong&gt;.tiss&lt;/strong&gt; dizininin varlığını kontrol edelim:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def create_dir_files(self):
        if not os.path.exists(self.tiss_home):
            os.mkdir(self.tiss_home)
            self.backups()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yani kod diyor ki, eğer kullanıcının ev dizininde .tiss diye bir dizin yoksa, önce onu oluştur, sonra da &lt;strong&gt;self.backups()&lt;/strong&gt; fonksiyonunu çalıştır. Eee, o fonksiyon nerede ve neye yarar? Hemen söylüyorum. O fonksiyon, Tiss&amp;rsquo;in ana görevi olan gereksiz uzantıları silme görevi için kullanıcının belirlediği herhangi bir ayar dosyası yoksa, öntanımlı backup_extensions listesini remove.pickle isimli bir dosyada turşu gibi saklamaya yarar. İşte kodumuz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def backups(self):
        if not os.path.exists(self.data_remove):
            backup_extensions = [&#39;*~&#39;, &#39;#*#&#39;, &#39;*.db&#39;, &#39;*.lay&#39;, &#39;*.pyc&#39;, &#39;*.log&#39;, &#39;*.ini&#39;]
            pickle_file = file(self.data_remove, &#39;w&#39;)
            pickle.dump(backup_extensions, pickle_file)
            del pickle_file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İyi de, niye böyle bir şey yaptık? Doğrudan &lt;strong&gt;backup_extensions&lt;/strong&gt; değişkenini, gereksiz uzantıları silmeye yarayan fonksiyonda kullanmayı neden denemedik? Deneyebilirdik; ama kullanıcıya bu değişkeni değiştirmekten mahrum da bırakırdık. O nedenle turşu olarak bir dosyaya yazdırma gereği duyduk. Ha, illa ki turşu mu? Elbette değil, dileseydik, doğrudan bir dosya açıp oraya satır satır yazdırmayı deneyebilirdik; ama satırı çağırmak, “\n”lerle uğraşmak, split&amp;rsquo;lemek, sonra kullanıcının isteği doğrultusunda satırı değiştirmek, sonra yazdırıp dosyayı tekrar kapatmak.. İnanın, bana turşu denen bir şey varken bu amaç için başka yolu seçmek, css ile siteyi bölümlere ayırmak varken tablolarla bölmek, yani tabloları amacı dışında kullanarak siteyi ve kodu ağırlaştırmak gibi geliyor. Şimdi, turşuda saklanan değişken lazım olduğunda, nasıl çağrılır ve kullanılır onu gösterelim. Önce kod, sonra açıklaması:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def remove_files():
        pickle_file = file(self.data_remove)
        backup_extensions = pickle.load(pickle_file)
        for remove in backup_extensions:
            backup_files = glob.glob(&#39;%s/&#39; % os.getcwd() + remove)
            for backup in backup_files:
                os.remove(backup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kodda da görüldüğü gibi, bir öncekinden farklı olarak, yazma izni vermeden &lt;strong&gt;pickle_file&lt;/strong&gt; değişkenine &lt;strong&gt;self.data_remove&lt;/strong&gt; yolunu atıyoruz. Sonra turşumuzda duran listeyi &lt;strong&gt;backup_extensions&lt;/strong&gt; ile çağırıyoruz. Çağırdıkdan sonra da, bu listedeki her eleman için, bulunduğumuz dizinde tarama yapıyoruz. Eğer bulunduğumuz dizinde, &lt;strong&gt;backup_extensions&lt;/strong&gt;&amp;lsquo;taki uzantılardan herhangi birine sahip dosyalar bulunursa, onun için de ikinci bir döngü başlıyor: O uzantılara sahip dosyaları &lt;strong&gt;sil&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Evet. Buraya kadar öntanımlı listemizi nasıl turşu olarak saklayabileceğimizi, sonra lazım olduğunda nasıl çağırabileceğimizi görmüş olduk. Ama bizim amacımız neydi? Kullanıcıya bu listeyi değiştirme hakkı vermekti. Bunun için izlenecek adımlar da basit:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Silme için bir ayar fonksiyonu oluştur.&lt;/li&gt;
&lt;li&gt;Bu fonksiyon için bir parametre ata.&lt;/li&gt;
&lt;li&gt;Fonksiyonda bir değişkene düzenlenebilir olarak turşuyu çağır.&lt;/li&gt;
&lt;li&gt;Kullanıcıya hangi uzantıların silinmesini istediği üzerine soru sor.&lt;/li&gt;
&lt;li&gt;Eklenen ve çıkarılan uzantı elemanlarını tekrar turşuya kaydet.&lt;/li&gt;
&lt;li&gt;Ve kapat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu fonksiyonu da daha sonraki tarihte anlatırım. Eğer bu yazı ile ilgili bir yanlışlık veya daha iyi yöntem bulursanız, buraya mutlaka yorum olarak girmenizi istiyorum. Biz neydik? Python öğrenmeye ve onu tüm esnekliğiyle kullanmaya hevesli öğrencilerdik. Şimdiden teşekkürler.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://tiss.googlecode.com&#34;&gt;http://tiss.googlecode.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tisssss, Tisssss!</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/tisssss-tisssss/</link>
      <pubDate>Tue, 19 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/tisssss-tisssss/</guid>
      <description>&lt;p&gt;Python&amp;rsquo;da programlama yaparken işleri terminalden yürütmek açıkçası bana çok fazla zaman kazandırıyor; ama bazen feci yanlışlar yaptığım oluyor. Mesela, yanlışlıkla *.pyc&amp;rsquo;leri de svn&amp;rsquo;ye aktarmak (özellikle bkz: Mirat Can Bayrak), build dizinini silmek yerine src dizinini svn&amp;rsquo;ye atamadan yanlışlıkla silmek vesaire..&lt;/p&gt;

&lt;p&gt;Bu tip felaketlerin üstesinden gelmek için, ben de ilk başlarda &amp;ldquo;silgi&amp;rdquo; diye bir program yapmıştım. Amacım boş dizinleri ve inşa dosyalarının bulunduğu &amp;ldquo;build&amp;rdquo; dizinlerini silmek, *.pyc, *~, *#, *.db ve benzeri işime yaramayacak dosyaları tek seferde yok etmekti.&lt;/p&gt;

&lt;p&gt;Programı yaparken başta, genel bir amaç edinmeyi düşünmüştüm. Sonra ne olduysa, bu programı salt python programcılara yönelik olarak tekrar tasarlayıp, ismini de &amp;ldquo;tiss&amp;rdquo; diye değiştirdim. Önce küçük bir şemayla, programın planını göstereyim:&lt;/p&gt;

&lt;p&gt;src dizininde iki önemli .py dosyası var. &amp;ldquo;remove.py&amp;rdquo; dosyasında, tiss&amp;rsquo;in ana fonksiyonu olan silme fonksiyonunu tanımladım, &amp;ldquo;main.py&amp;rdquo;de de belli parametreler dahilinde çeşitli işlemler tanımlanıyor. Her parametre için gerektiğinde ayrı modul dosyası oluşturup sonradan import edebiliriz.&lt;/p&gt;

&lt;p&gt;Peki bunları size niye anlatıyorum? Eğer sizin de bir fikriniz varsa, modülünüzü yazıp bana gönderesiniz diye =) Kodları ve fikri gerçekten beğenirsem, buradan size &lt;strong&gt;svn hesabı verme sözü de&lt;/strong&gt; veriyorum, herhangi bir eşeklik olursa iptal edebilirim de :P. Hadi, Tiss&amp;rsquo;i kendi isteğimize göre şekillendirelim. İşte tiss burada:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tiss.googlecode.com&#34;&gt;http://tiss.googlecode.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Bu arada diyagram çok uyduruk olmuş ama Mirat&amp;rsquo;ın yazısı gaza getirdi, bir başlangıç yapalım dedik, heheh.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kurtar Beni Lambda</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/tek-satrlk-dng/</link>
      <pubDate>Fri, 15 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/tek-satrlk-dng/</guid>
      <description>&lt;p&gt;Bazen öyle şeylere ihtiyaç duyuyorum ki, &amp;ldquo;Bunun için de şimdi bilmem kaç satır döngü oluşturmaya değer mi?&amp;rdquo; diye düşünmeden olmuyor. Mesela XfceP&amp;rsquo;i yaparken de öyle bir olayla karşılaşmıştım.&lt;/p&gt;

&lt;p&gt;Sizi bilmem ama, böylesi basit bir şey için döngü oluşturmayı da fazlasıyla lüks buldum, o nedenle de lambda bazı yerlerde gerçekten işe yarayan bir araç. Özellikle, for döngüsü içinde birkaç tane daha döngü kurunca, bir tiksinti kaplıyor içimi, şu linkte&lt;a href=&#34;http://www.secnetix.de/olli/Python/lambda_functions.hawk&#34;&gt;1&lt;/a&gt; anlatıldığı gibi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = range(2, 50)
for x in nums:
    divided = False
    for i in range(2, x - 1):
        if (x % i) == 0:
            divided = True
    if divided == False:
        print x,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Halbuki lambda bu karışıklıktan tek bir satırda kurtulmanıza izin veriyor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-repl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = range(2, 50)
&amp;gt;&amp;gt;&amp;gt; for i in range(2, 8):
...     nums = filter(lambda x: x == i or x % i, nums)
...
&amp;gt;&amp;gt;&amp;gt; print nums
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lambda&amp;rsquo;nın, map &amp;amp; filter &amp;amp; reduce hedelerine ise daha sonra değinirim artık..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kodlarken</title>
      <link>https://gokmengorgen.net/python-deneyimlerimiz/ilk-setuppy-kullanrken/</link>
      <pubDate>Thu, 14 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/python-deneyimlerimiz/ilk-setuppy-kullanrken/</guid>
      <description>&lt;p&gt;Python ile programlama yaparken proje arkadaşım Mirat&amp;rsquo;le beraber (hatta ona çaktırmadan) bir kural listesi oluşturmuştum. Paylaşayım dedim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programın anadili İngilizce olmalı.&lt;/li&gt;
&lt;li&gt;Noktalama işaretlerinden önce boşluk bırakılmaz, sonra bırakılır.&lt;/li&gt;
&lt;li&gt;Operatörlerden hem önce, hem de sonra boşluk bırakılır.&lt;/li&gt;
&lt;li&gt;(), {} ve []&amp;lsquo;lerden önce boşluk bırakılmaz, sonra bırakılır; hatta bir alt satıra konulur.&lt;/li&gt;
&lt;li&gt;Eğer çıktı ekrana yazdırılacaksa &amp;ldquo; &amp;ldquo;; yazdırılmayacaksa &amp;lsquo; &amp;rsquo; kullan.&lt;/li&gt;
&lt;li&gt;Her fonksiyonun altına açıklama gir.&lt;/li&gt;
&lt;li&gt;Türkçe&amp;rsquo;mizi güzel kullanalım, trafik kurallarına uyalım.&lt;/li&gt;
&lt;li&gt;Her fonksiyon, sınıf, döngü ve try - except arasında bir satır boşluk olsun.&lt;/li&gt;
&lt;li&gt;Tab mutlaka 4 boşluk olarak ayarlanmalı.&lt;/li&gt;
&lt;li&gt;Emacs veya Vim&amp;rsquo;in güzelliği, gereksiz boşlukları göze batırıp (hele ki emacs&amp;rsquo;te) kodu kirli göstermesindedir. Gereksiz boşluklar, Emacs&amp;rsquo;te kırmızı arkaplan, Vim&amp;rsquo;de ise nokta şeklinde gözükür.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fonksiyon ve sınıf isimleri İngilizce olmalı. Eğer birden fazla kelimeden oluşuyorsa, boşluk yerine alt çizgi konulmalı ve hepsi küçük harfle yazılmalı; veya boşluk bırakmaksızın, sonraki kelimenin ilk harfi büyük yazılmalı. Örneğin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def check_local_folder():
print &amp;quot;hede&amp;quot;


def CheckLocalFolder():
print &amp;quot;dede&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Evet çok acemice; ama biz bunları uyguluyoruz. Bir de boşluklara çok mu kafayı taktık, ne.. Bu arada Alper Kanat&amp;rsquo;ın önerileriyle bir iki şey değiştirdim. Esasında biz bunu uyguluyoruz :P&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lisans</title>
      <link>https://gokmengorgen.net/lisans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/lisans/</guid>
      <description>&lt;p&gt;İçerik Commons attribution-noncommercial-sharealike lisansı ile lisanslanmıştır. Daha fazla bilgi için lütfen &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;buraya&lt;/a&gt; bir göz atın.&lt;/p&gt;

&lt;p&gt;Sitemin temasını beğendin mi? &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; ile birlikte &lt;a href=&#34;https://themes.gohugo.io/hugo-alageek-theme/&#34;&gt;alaGeek temasını&lt;/a&gt; kullanıyorum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Live stream</title>
      <link>https://gokmengorgen.net/canli-yayin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/canli-yayin/</guid>
      <description>&lt;p&gt;Oyun ve programlama zamanlarımda bana katılabilirsiniz&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;twitch-embed&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://embed.twitch.tv/embed/v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gokmengorgen.net/scripts/twitch.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yorum politikası</title>
      <link>https://gokmengorgen.net/yorum-politikasi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gokmengorgen.net/yorum-politikasi/</guid>
      <description>&lt;p&gt;Yorumlarınızla yazılarıma katkıda bulunmanızı isterim. Gerektiğinde yorumlarınızı alıntılayıp &lt;mark&gt;yazıya aktarabilirim&lt;/mark&gt; veya gelen eleştirilere göre yazıyı güncelleyebilirim. Eğer yorumunuz yayınlanmadıysa, ya küfür ve benzeri yasaklı bir kelime içermektedir; ya da aşağıdaki kurallara uyulmamıştır:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Irkçılık, seksizm, homofobik söylemler &lt;strong&gt;yasak&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Yorumunuz, yazının konusu ile ilgili olmalı.&lt;/li&gt;
&lt;li&gt;Trollere &lt;strong&gt;cevap vermeyin&lt;/strong&gt;. Konu bağlamında tartışmak serbest, ama saygısızlık yapmamalısınız.&lt;/li&gt;
&lt;li&gt;Kendi reklamınızı yapabilirsiniz; ama bana mail olarak iletmeniz daha uygun olur.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sanırım bu kadar kural yeterli.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
